_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[7],{"++UM":function(n,t,e){"use strict";e.r(t),t.default='\u6807\u91cf\uff08scalar\uff09\u7c7b\u578b\u8868\u793a\u5355\u4e2a\u503c\u3002\nRust \u6709 4 \u4e2a\u57fa\u672c\u7684\u6807\u91cf\u7c7b\u578b\uff1a\u6574\u578b\u3001\u6d6e\u70b9\u578b\u3001\u5e03\u5c14\u578b\u548c\u5b57\u7b26\u3002\n\n```rust\nlet guess: u32 = "42".parse().expect("Not a number!");\n\nlet x = 2.0; // f64\nlet y: f32 = 3.0; // f32\n\n// addition\nlet sum = 5 + 10;\n\n// subtraction\nlet difference = 95.5 - 4.3;\n\n// multiplication\nlet product = 4 * 30;\n\n// division\nlet quotient = 56.7 / 32.2;\nlet floored = 2 / 3; // Results in 0\n\n// remainder\nlet remainder = 43 % 5;\n\nlet t = true;\nlet f: bool = false; // with explicit type annotation\n\nlet c = \'z\';\nlet z = \'\u2124\';\nlet heart_eyed_cat = \'\ud83d\ude3b\';\n```\n\n\u590d\u5408\u7c7b\u578b\uff08compound type\uff09\u53ef\u4ee5\u5c06\u591a\u4e2a\u503c\u7ec4\u5408\u6210\u4e00\u4e2a\u7c7b\u578b\u3002\nRust \u6709\u4e24\u79cd\u57fa\u672c\u7684\u590d\u5408\u7c7b\u578b\uff1a\u5143\u7ec4\uff08tuple\uff09\u548c\u6570\u7ec4\uff08array\uff09\u3002\n\n## \u7c7b\u578b\u522b\u540d\u7528\u6765\u521b\u5efa\u7c7b\u578b\u540c\u4e49\u8bcd\n\n\u7c7b\u578b\u522b\u540d\u7684\u4e3b\u8981\u7528\u9014\u662f\u51cf\u5c11\u91cd\u590d\u3002\n\n```rust\n// Kilometers \u662f i32 \u7684 \u540c\u4e49\u8bcd\uff08synonym\uff09\nlet x: i32 = 5;\nlet y: Kilometers = 5;\nprintln!("x + y = {}", x + y);\n\n// \u5f15\u5165\u7c7b\u578b\u522b\u540d Thunk \u6765\u51cf\u5c11\u91cd\u590d\ntype Thunk = Box<dyn Fn() + Send + \'static>;\nlet f: Thunk = Box::new(|| println!("hi"));\nfn takes_long_type(f: Thunk) {\n    // --snip--\n}\nfn returns_long_type() -> Thunk {\n    // --snip--\n}\n```\n\n## \u4ece\u4e0d\u8fd4\u56de\u7684 never type\n\n- `!` \u5728\u51fd\u6570\u4ece\u4e0d\u8fd4\u56de\u7684\u65f6\u5019\u5145\u5f53\u8fd4\u56de\u503c\u3002\n- \u4ece\u4e0d\u8fd4\u56de\u7684\u51fd\u6570\u88ab\u79f0\u4e3a \u53d1\u6563\u51fd\u6570\uff08diverging functions\uff09\n\n```rust\nfn bar() -> ! {\n    // --snip--\n}\n\nlet guess: u32 = match guess.trim().parse() {\n    Ok(num) => num,\n    Err(_) => continue, // continue \u7684\u503c\u662f !\n};\n\nimpl<T> Option<T> {\n    pub fn unwrap(self) -> T {\n        match self {\n            Some(val) => val,\n            // panic! \u662f ! \u7c7b\u578b\n            None => panic!("called `Option::unwrap()` on a `None` value"),\n        }\n    }\n}\n\n// \u6b64\u8868\u8fbe\u5f0f\u7684\u503c\u662f !\nloop {\n    print!("and ever ");\n}\n```\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u5982\u4e0b\u6cdb\u578b\u51fd\u6570\u5b9a\u4e49\uff1a\n\n```rust\nfn generic<T>(t: T) {\n    // --snip--\n}\n// \u5b9e\u9645\u4e0a\u88ab\u5f53\u4f5c\u5982\u4e0b\u5904\u7406\uff1a\nfn generic<T: Sized>(t: T) {\n    // --snip--\n}\n```\n'},"+9KW":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u9009\u62e9\u6392\u5e8f\n---\n"},"+9hj":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: Options \u914d\u7f6e\u9009\u9879\n---\n"},"+PGJ":function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// QuickSort \u5feb\u901f\u6392\u5e8f\nfunc QuickSort(arr []int) {\n\tquickSort(arr, 0, len(arr)-1)\n}\n\n// quickSort \u8fed\u4ee3\u51fd\u6570\nfunc quickSort(arr []int, start, end int) {\n\t// \u5f00\u59cb\u7d22\u5f15\u5c0f\u4e8e\u7ed3\u675f\u7d22\u5f15\uff0c\u624d\u9700\u6392\u5e8f\n\t// \u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5143\u7d20 start == end\n\t// \u8fed\u4ee3\u65f6\uff0c\u57fa\u51c6\u503c\u521a\u597d\u4e3a\u6700\u5927\u6216\u6700\u5c0f\u5143\u7d20 start > end\n\tif start < end {\n\t\t// \u628a\u6570\u7ec4\u5206\u6210[\u5de6\u6bb5...,\u4e2d\u95f4\u503c\uff08\u57fa\u51c6\u503c\uff09,\u53f3\u6bb5...]\uff0c\u8fd4\u56de\u4e2d\u95f4\u503c\uff08\u57fa\u51c6\u503c\uff09\u7684\u7d22\u5f15\n\t\t// \u5176\u4e2d\u5de6\u6bb5\u3001\u53f3\u6bb5\u53ef\u80fd\u4e00\u4e2a\u5143\u7d20\uff0c\u4e5f\u53ef\u80fd\u4e3a\u7a7a\n\t\tmidIdx := partition(arr, start, end)\n\t\tquickSort(arr, start, midIdx-1) // \u9012\u5f52\u5de6\u6bb5...\n\t\tquickSort(arr, midIdx+1, end)   // \u9012\u5f52\u53f3\u6bb5...\n\t}\n}\n\n// partition \u5206\u533a\nfunc partition(arr []int, start, end int) int {\n\tmidVal := arr[end]             // \u9009\u53d6\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f5c\u4e3a\u57fa\u51c6\uff08\u4e2d\u95f4\uff09\u503c\n\tmidIdx := start                // \u4e2d\u95f4\u4f4d\u7f6e\u7684\u6807\u8bb0\uff0c\u5212\u5206\u5728\u53f3\u6bb5\n\tfor i := start; i < end; i++ { // \u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5c31\u662f\u57fa\u51c6\u6240\u4ee5\u4e0d\u7528\u6bd4\u8f83\n\t\t// \u4f9d\u6b21\u6bd4\u8f83\uff0c\u5982\u679c\u5143\u7d20\u6bd4\u57fa\u51c6\u503c\u5c0f\n\t\t// \u5c31\u4e0e\u6807\u8bb0\u4e2d\u95f4\u4f4d\u7f6e\u5143\u7d20\u4ea4\u6362\uff0c\u5e76\u628a\u6807\u8bb0\u53f3\u79fb\u4e00\u4f4d\n\t\tif arr[i] < midVal {\n\t\t\t// \u76f8\u540c\u5143\u7d20\u65e0\u9700\u4ea4\u6362\n\t\t\t// \u4ea4\u6362\u4e5f\u65e0\u5f71\u54cd\n\t\t\tif midIdx != i {\n\t\t\t\tswap(arr, midIdx, i)\n\t\t\t}\n\t\t\tmidIdx++\n\t\t}\n\t}\n\t// \u628a\u57fa\u51c6\u503c\u4e0e\u4e2d\u95f4\u4f4d\u7f6e\u4ea4\u6362\n\t// \u5982\u679c\u57fa\u51c6\u503c\u521a\u597d\u662f\u6700\u5927\u503c\uff0cmidIdx\u7b49\u4e8eend\uff0c\u65e0\u9700\u4ea4\u6362\n\t// \u4ea4\u6362\u4e5f\u65e0\u5f71\u54cd\n\tif midIdx != end {\n\t\tswap(arr, midIdx, end)\n\t}\n\n\treturn midIdx\n}\n\n// swap \u4ea4\u6362\u6570\u7ec4\u4e2d\u4e24\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\nfunc swap(arr []int, i, j int) {\n\tarr[i], arr[j] = arr[j], arr[i]\n}\n\nfunc main() {\n\ta := []int{3, 6, 7, 4, 5, 1, 2}\n\tQuickSort(a)\n\tfmt.Println(a)\n}\n\n```\n'},"+UIU":function(n,t,e){"use strict";e.r(t),t.default='## \u4e09\u5143\u64cd\u4f5c\u7b26\n\n```js\nconst x = 2;\nconst y = 3;\n\n// even\nconsole.log(x % 2 === 0 ? "even" : "odd");\n// odd\nconsole.log(y % 2 === 0 ? "even" : "odd");\n```\n'},"+bUS":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6570\u636e\u7ed3\u6784\n---\n"},"+bbK":function(n,t,e){"use strict";e.r(t),t.default="- \u6709\u4e24\u4e2a\u5e76\u53d1\u6982\u5ff5\u662f\u5185\u5d4c\u4e8e\u8bed\u8a00\u4e2d\u7684\uff1a`std::marker` \u4e2d\u7684 `Sync` \u548c `Send` trait\u3002\n- `Send` \u6807\u8bb0 trait \u8868\u660e\u7c7b\u578b\u7684\u6240\u6709\u6743\u53ef\u4ee5\u5728\u7ebf\u7a0b\u95f4\u4f20\u9012\n  - \u51e0\u4e4e\u6240\u6709\u57fa\u672c\u7c7b\u578b\u90fd\u662f `Send` \u7684\uff0c\u9664\u4e86\u88f8\u6307\u9488\uff08raw pointer\uff09\n  - \u4e0d\u8fc7\u6709\u4e00\u4e9b\u4f8b\u5916\uff0c\u5305\u62ec `Rc<T>`\n- `Sync` \u6807\u8bb0 trait \u8868\u660e\u4e00\u4e2a\u5b9e\u73b0\u4e86 Sync \u7684\u7c7b\u578b\u53ef\u4ee5\u5b89\u5168\u7684\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e2d\u62e5\u6709\u5176\u503c\u7684\u5f15\u7528\u3002\n  - \u6362\u4e00\u79cd\u65b9\u5f0f\u6765\u8bf4\uff0c\u5bf9\u4e8e\u4efb\u610f\u7c7b\u578b `T`\uff0c\u5982\u679c `&T`\uff08T \u7684\u5f15\u7528\uff09\u662f `Send` \u7684\u8bdd `T` \u5c31\u662f `Sync` \u7684\uff0c\n  - \u57fa\u672c\u7c7b\u578b\u662f `Sync` \u7684\uff0c\u5b8c\u5168\u7531 `Sync` \u7684\u7c7b\u578b\u7ec4\u6210\u7684\u7c7b\u578b\u4e5f\u662f `Sync` \u7684\n  - `RefCell<T>` \u548c `Cell<T>` \u7cfb\u5217\u7c7b\u578b\u4e0d\u662f `Sync` \u7684\u3002\n  - `RefCell<T>` \u5728\u8fd0\u884c\u65f6\u6240\u8fdb\u884c\u7684\u501f\u7528\u68c0\u67e5\u4e5f\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u3002\n  - `Mutex<T>` \u662f `Sync` \u7684\uff0c\n"},"+ePo":function(n,t,e){"use strict";e.r(t),t.default="```sh\n>>> tel = {'jack': 4098, 'sape': 4139}\n>>> tel['guido'] = 4127\n>>> tel\n{'jack': 4098, 'sape': 4139, 'guido': 4127}\n>>> tel['jack']\n4098\n>>> del tel['sape']\n>>> tel['irv'] = 4127\n>>> tel\n{'jack': 4098, 'guido': 4127, 'irv': 4127}\n>>> list(tel)\n['jack', 'guido', 'irv']\n>>> sorted(tel)\n['guido', 'irv', 'jack']\n>>> 'guido' in tel\nTrue\n>>> 'jack' not in tel\nFalse\n\n# dict() \u6784\u9020\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u4ece\u952e\u503c\u5bf9\u5e8f\u5217\u91cc\u521b\u5efa\u5b57\u5178\u3002\n>>> dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])\n{'sape': 4139, 'guido': 4127, 'jack': 4098}\n\n# \u5b57\u5178\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u4ece\u4efb\u610f\u7684\u952e\u503c\u8868\u8fbe\u5f0f\u4e2d\u521b\u5efa\u5b57\u5178\n>>> {x: x**2 for x in (2, 4, 6)}\n{2: 4, 4: 16, 6: 36}\n\n# \u5f53\u5173\u952e\u5b57\u662f\u7b80\u5355\u5b57\u7b26\u4e32\u65f6\uff0c\u6709\u65f6\u76f4\u63a5\u901a\u8fc7\u5173\u952e\u5b57\u53c2\u6570\u6765\u6307\u5b9a\u952e\u503c\u5bf9\u66f4\u65b9\u4fbf\n>>> dict(sape=4139, guido=4127, jack=4098)\n{'sape': 4139, 'guido': 4127, 'jack': 4098}\n\n\nsome_variable = 2\nsome_dict = {(some_variable + 1): \"three\"}\n# three\nprint(some_dict[3])\n```\n\n\u5faa\u73af\u7684\u6280\u5de7\n\n```python\nsome_list = [6, 3, 5]\n# 0 6\n# 1 3\n# 2 5\nfor i, item in enumerate(some_list):\n    print(f\"{i} {item}\")\n# If you're not using this in a for loop, use list()\n# list(enumerate(some_list)) # [(0, 6), (1, 3), (2, 5)]\n\n\nlist_1 = [1, 3, 5]\nlist_2 = [2, 4, 6]\n# 1 2\n# 3 4\n# 5 6\nfor x, y in zip(list_1, list_2):\n    print(f\"{x} {y}\")\n```\n\n```sh\n# \u5f53\u5728\u5b57\u5178\u4e2d\u5faa\u73af\u65f6\uff0c\u7528 items() \u65b9\u6cd5\u53ef\u5c06\u5173\u952e\u5b57\u548c\u5bf9\u5e94\u7684\u503c\u540c\u65f6\u53d6\u51fa\n>>> knights = {'gallahad': 'the pure', 'robin': 'the brave'}\n>>> for k, v in knights.items():\n...     print(k, v)\n...\ngallahad the pure\nrobin the brave\n\n# \u5f53\u5728\u5e8f\u5217\u4e2d\u5faa\u73af\u65f6\uff0c\u7528 enumerate() \u51fd\u6570\u53ef\u4ee5\u5c06\u7d22\u5f15\u4f4d\u7f6e\u548c\u5176\u5bf9\u5e94\u7684\u503c\u540c\u65f6\u53d6\u51fa\n>>> for i, v in enumerate(['tic', 'tac', 'toe']):\n...     print(i, v)\n...\n0 tic\n1 tac\n2 toe\n\n# \u5f53\u540c\u65f6\u5728\u4e24\u4e2a\u6216\u66f4\u591a\u5e8f\u5217\u4e2d\u5faa\u73af\u65f6\uff0c\u53ef\u4ee5\u7528 zip() \u51fd\u6570\u5c06\u5176\u5185\u5143\u7d20\u4e00\u4e00\u5339\u914d\u3002\n>>> questions = ['name', 'quest', 'favorite color']\n>>> answers = ['lancelot', 'the holy grail', 'blue']\n>>> for q, a in zip(questions, answers):\n...     print('What is your {0}?  It is {1}.'.format(q, a))\n...\nWhat is your name?  It is lancelot.\nWhat is your quest?  It is the holy grail.\nWhat is your favorite color?  It is blue.\n\n# \u5f53\u9006\u5411\u5faa\u73af\u4e00\u4e2a\u5e8f\u5217\u65f6\uff0c\u5148\u6b63\u5411\u5b9a\u4f4d\u5e8f\u5217\uff0c\u7136\u540e\u8c03\u7528 reversed() \u51fd\u6570\n>>> for i in reversed(range(1, 10, 2)):\n...     print(i)\n...\n9\n7\n5\n3\n1\n\n# \u7528 sorted() \u51fd\u6570\uff0c\u5b83\u53ef\u4ee5\u5728\u4e0d\u6539\u52a8\u539f\u5e8f\u5217\u7684\u57fa\u7840\u4e0a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6392\u597d\u5e8f\u7684\u5e8f\u5217\n>>> basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']\n>>> for f in sorted(set(basket)):\n...     print(f)\n...\napple\nbanana\norange\npear\n\n# \u6709\u65f6\u53ef\u80fd\u4f1a\u60f3\u5728\u5faa\u73af\u65f6\u4fee\u6539\u5217\u8868\u5185\u5bb9\uff0c\u4e00\u822c\u6765\u8bf4\u6539\u4e3a\u521b\u5efa\u4e00\u4e2a\u65b0\u5217\u8868\u662f\u6bd4\u8f83\u7b80\u5355\u4e14\u5b89\u5168\u7684\n>>> import math\n>>> raw_data = [56.2, float('NaN'), 51.7, 55.3, 52.5, float('NaN'), 47.8]\n>>> filtered_data = []\n>>> for value in raw_data:\n...     if not math.isnan(value):\n...         filtered_data.append(value)\n...\n>>> filtered_data\n[56.2, 51.7, 55.3, 52.5, 47.8]\n```\n"},"+xyl":function(n,t,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/[...param]",function(){return e("Lnjv")}])},"//f2":function(n,t,e){"use strict";e.r(t),t.default="```dart\nvar ingredients = new Set();\ningredients.addAll(['gold', 'titanium', 'xenon']);\nassert(ingredients.length == 3);\n// Adding a duplicate item has no effect.\ningredients.add('gold');\nassert(ingredients.length == 3);\n// Remove an item from a set.\ningredients.remove('gold');\nassert(ingredients.length == 2);\n\nvar ingredients = new Set();\ningredients.addAll(['gold', 'titanium', 'xenon']);\n// Check whether an item is in the set.\nassert(ingredients.contains('titanium'));\n// Check whether all the items are in the set.\nassert(ingredients.containsAll(['titanium', 'xenon']));\n\n// \u4ea4\u9645\u662f\u4e24\u4e2a set \u4e2d\u90fd\u6709\u7684\u6570\u636e\u7684\u5b50\u96c6\uff1a\nvar ingredients = new Set();\ningredients.addAll(['gold', 'titanium', 'xenon']);\n// Create the intersection of two sets.\nvar nobleGases = new Set.from(['xenon', 'argon']);\nvar intersection = ingredients.intersection(nobleGases);\nassert(intersection.length == 1);\nassert(intersection.contains('xenon'));\n```\n\n## \u5224\u65ad Iterable \u96c6\u5408\uff08List, Set, \u548c Map\uff09\u662f\u5426\u4e3a\u7a7a\u7684\n\n```dart\n// \u53ef\u4ee5\u4f7f\u7528 isEmpty \u51fd\u6570\u6765\u5224\u65ad\u96c6\u5408\u662f\u5426\u4e3a\u7a7a\u7684\uff1a\nif (lunchBox.isEmpty) return 'so hungry...';\nif (words.isNotEmpty) return words.join(' ');\nvar teas = ['green', 'black', 'chamomile', 'earl grey'];\nassert(!teas.isEmpty);\n```\n"},"/6fo":function(n,t,e){"use strict";e.r(t),t.default='`assert.h`\u5934\u6587\u4ef6\u5b9a\u4e49\u4e86\u5b8f`assert()`\n\n```c++\n#define NDEBUG\n#include <assert.h>\n\nassert(PI > 3);\n\nz = x * x - y * y;\nassert(z >= 0);\n// \u4e0a\u9762\u7684assert()\u8bed\u53e5\u7c7b\u4f3c\u4e8e\u4e0b\u9762\u7684\u4ee3\u7801\nif (z < 0) {\n  puts("z less than 0");\n  abort();\n}\n\n// \u5982\u679c\u5f53\u524d\u8ba1\u7b97\u673a\u7684int\u7c7b\u578b\u4e0d\u7b49\u4e8e4\u4e2a\u5b57\u8282\uff0c\u5c31\u4f1a\u7f16\u8bd1\u62a5\u9519\nstatic_assert(sizeof(int) == 4, "64-bit code generation is not supported.");\n```\n'},"/HH4":function(n,t,e){"use strict";e.r(t),t.default='```rust\nfn main() {\n    let tup: (i32, f64, u8) = (500, 6.4, 1); // \u8d4b\u503c\n}\n```\n\n```rust\nfn main() {\n    let tup = (500, 6.4, 1);\n    let (x, y, z) = tup; // \u89e3\u6784\u8d4b\u503c\n    println!("The value of y is: {}", y);\n}\n```\n\n```rust\nfn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n    let five_hundred = x.0; // \u8bbf\u95ee\u5143\u7ec4\u5143\u7d20\n    let six_point_four = x.1;\n    let one = x.2;\n}\n```\n'},"/Ksx":function(n,t,e){"use strict";e.r(t),t.default="## typedef \u547d\u4ee4\n\ntypedef \u547d\u4ee4\u7528\u6765\u4e3a\u67d0\u4e2a\u7c7b\u578b\u8d77\u522b\u540d\n\n```c++\ntypedef type name;\n\n\ntypedef unsigned char BYTE;\nBYTE c = 'z';\n\ntypedef int antelope, bagel, mushroom;\n\ntypedef int* intptr;\nint a = 10;\nintptr x = &a;\n\ntypedef int five_ints[5];\nfive_ints x = {11, 22, 33, 44, 55};\n\n// \u4e3a\u51fd\u6570\u8d77\u522b\u540d\n// \u7c7b\u578b\u522b\u540dfp\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u4ee3\u8868\u51fd\u6570signed char (*)(void)\ntypedef signed char (*fp)(void);\n```\n\n```c++\ntypedef char* STRING;\nSTRING name;\n\n\nstruct treenode {\n  // ...\n};\ntypedef struct treenode* Tree;\n\n\ntypedef struct animal {\n  char* name;\n  int leg_count, speed;\n} animal;\n// or\ntypedef struct {\n  char *name;\n  int leg_count, speed;\n} animal;\n```\n"},"/cVj":function(n,t,e){"use strict";e.r(t),t.default='ES5 \u6bd4\u8f83\u4e24\u4e2a\u503c\u662f\u5426\u76f8\u7b49\uff0c\u53ea\u6709\u4e24\u4e2a\u8fd0\u7b97\u7b26\uff1a\n\n- \u76f8\u7b49\u8fd0\u7b97\u7b26\uff08==\uff09\n- \u4e25\u683c\u76f8\u7b49\u8fd0\u7b97\u7b26\uff08===\uff09\n\n\u5b83\u4eec\u90fd\u6709\u7f3a\u70b9\uff0c\u524d\u8005\u4f1a\u81ea\u52a8\u8f6c\u6362\u6570\u636e\u7c7b\u578b\uff0c\u540e\u8005\u7684 NaN \u4e0d\u7b49\u4e8e\u81ea\u8eab\uff0c\u4ee5\u53ca+0 \u7b49\u4e8e-0\u3002\n\n```js\nObject.is("foo", "foo");\n// true\nObject.is({}, {});\n// false\n```\n'},"0/F1":function(n,t,e){"use strict";e.r(t),t.default="```js\nfunction CountingSort(arr) {\n  const [max, min] = countMaxMin(arr);\n  const tmp = new Array(max - min + 1).fill(0);\n  arr.forEach((v) => tmp[v - min]++);\n  let index = 0;\n  tmp.forEach((v, k) => {\n    while (v > 0) {\n      arr[index] = k + min;\n      index++;\n      v--;\n    }\n  });\n  return arr;\n}\n\nfunction countMaxMin(arr) {\n  let [max, min] = [arr[0], arr[0]];\n  arr.forEach((v) => {\n    v > max && (max = v);\n    v < min && (min = v);\n  });\n  return [max, min];\n}\n\nconst arr = [3, 6, 7, 4, 5, 1, 2];\nconsole.log(CountingSort(arr));\n```\n"},"02wA":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5b57\u7b26\u4e32\u5927\u5c0f\u5199\n---\n"},"0nfv":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u53d1\u5e03\u8ba2\u9605\u6a21\u578b\n---\n"},"0oSX":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5305\u7ba1\u7406"},"0qFn":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6a21\u5f0f\u548c\u5339\u914d\n---"},"0yU2":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u4fe1\u9053\n---\n"},"10tz":function(n,t){throw new Error("Module parse failed: Unexpected character '\ufffd' (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n(Source code omitted for this binary file)")},"16OV":function(n,t,e){"use strict";e.r(t),t.default='\u7c7b\u578b [n]T \u8868\u793a\u62e5\u6709 n \u4e2a T \u7c7b\u578b\u7684\u503c\u7684\u6570\u7ec4\u3002\n\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u5176\u7c7b\u578b\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u6570\u7ec4\u4e0d\u80fd\u6539\u53d8\u5927\u5c0f\u3002\n\n\u8868\u8fbe\u5f0f: `var a [10]int`\uff0c\n\u4f1a\u5c06\u53d8\u91cf a \u58f0\u660e\u4e3a\u62e5\u6709 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u3002\n\n```go\npackage main\nimport "fmt"\nfunc main() {\n  var a [2]string\n  a[0] = "Hello"\n  a[1] = "World"\n  fmt.Println(a[0], a[1])\n  fmt.Println(a)\n  primes := [6]int{2, 3, 5, 7, 11}\n  fmt.Println(primes)\n}\n// Hello World\n// [Hello World]\n// [2 3 5 7 11 0]\n\n\n// \u5982\u679c\u5728\u6570\u7ec4\u7684\u957f\u5ea6\u4f4d\u7f6e\u51fa\u73b0\u7684\u662f\u201c...\u201d\u7701\u7565\u53f7\uff0c\n// \u5219\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\u662f\u6839\u636e\u521d\u59cb\u5316\u503c\u7684\u4e2a\u6570\u6765\u8ba1\u7b97\u3002\nq := [...]int{1, 2, 3}\nfmt.Printf("%T\\n", q) // "[3]int"\n\n// \u6570\u7ec4\u7684\u957f\u5ea6\u662f\u6570\u7ec4\u7c7b\u578b\u7684\u4e00\u4e2a\u7ec4\u6210\u90e8\u5206\uff0c\n// \u56e0\u6b64[3]int\u548c[4]int\u662f\u4e24\u79cd\u4e0d\u540c\u7684\u6570\u7ec4\u7c7b\u578b\u3002\nq := [3]int{1, 2, 3}\nq = [4]int{1, 2, 3, 4} // \u7f16\u8bd1\u9519\u8bef: \u4e0d\u80fd\u8d4b\u503c [4]int \u7ed9 [3]int\n\n\n// \u6307\u5b9a\u4e00\u4e2a\u7d22\u5f15\u548c\u5bf9\u5e94\u503c\u5217\u8868\u7684\u65b9\u5f0f\u521d\u59cb\u5316\ntype Currency int\nconst (\n  USD Currency = iota // \u7f8e\u5143\n  EUR                 // \u6b27\u5143\n  GBP                 // \u82f1\u9551\n  RMB                 // \u4eba\u6c11\u5e01\n)\nsymbol := [...]string{USD: "$", EUR: "\u20ac", GBP: "\uffe1", RMB: "\uffe5"}\nfmt.Println(RMB, symbol[RMB]) // "3 \uffe5"\n\n// \u5b9a\u4e49\u4e86\u4e00\u4e2a\u542b\u6709100\u4e2a\u5143\u7d20\u7684\u6570\u7ec4r\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u88ab\u521d\u59cb\u5316\u4e3a-1\uff0c\u5176\u5b83\u5143\u7d20\u90fd\u662f\u75280\u521d\u59cb\u5316\u3002\nr := [...]int{99: -1}\n\n\n// \u5982\u679c\u4e00\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\u7c7b\u578b\u662f\u53ef\u4ee5\u76f8\u4e92\u6bd4\u8f83\u7684\uff0c\u90a3\u4e48\u6570\u7ec4\u7c7b\u578b\u4e5f\u662f\u53ef\u4ee5\u76f8\u4e92\u6bd4\u8f83\u7684\uff0c\n// \u53ea\u6709\u5f53\u4e24\u4e2a\u6570\u7ec4\u7684\u6240\u6709\u5143\u7d20\u90fd\u662f\u76f8\u7b49\u7684\u65f6\u5019\u6570\u7ec4\u624d\u662f\u76f8\u7b49\u7684\u3002\na := [2]int{1, 2}\nb := [...]int{1, 2}\nc := [2]int{1, 3}\nfmt.Println(a == b, a == c, b == c) // "true false false"\nd := [3]int{1, 2}\nfmt.Println(a == d) // compile error: cannot compare [2]int == [3]int\n\n// \u6d88\u606f\u6458\u8981\u6709256bit\u5927\u5c0f\uff0c\u56e0\u6b64\u5bf9\u5e94[32]byte\u6570\u7ec4\u7c7b\u578b\u3002\nimport "crypto/sha256"\nfunc main() {\n    c1 := sha256.Sum256([]byte("x"))\n    c2 := sha256.Sum256([]byte("X"))\n    fmt.Printf("%x\\n%x\\n%t\\n%T\\n", c1, c2, c1 == c2, c1)\n    // Output:\n    // 2d711642b726b04401627ca9fbac32f5c8530fb1903cc4db02258717921a4881\n    // 4b68ab3847feda7d6c62c1fbcbeebfa35eab7351ed5e78f4ddadea5df64b8015\n    // false\n    // [32]uint8\n}\n\n\n// \u4e0b\u9762\u7684\u51fd\u6570\u7528\u4e8e\u7ed9[32]byte\u7c7b\u578b\u7684\u6570\u7ec4\u6e05\u96f6\uff1a\nfunc zero(ptr *[32]byte) {\n  for i := range ptr {\n    ptr[i] = 0\n  }\n}\n// \u5176\u5b9e\u6570\u7ec4\u5b57\u9762\u503c[32]byte{}\u5c31\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a32\u5b57\u8282\u7684\u6570\u7ec4\u3002\n// \u5c06\u4e0a\u9762\u7684zero\u51fd\u6570\u5199\u7684\u66f4\u7b80\u6d01\u4e00\u70b9\uff1a\nfunc zero(ptr *[32]byte) {\n  *ptr = [32]byte{}\n}\n```\n'},"1F5x":function(n,t,e){"use strict";e.r(t),t.default='```js\n// arr.slice(start, end);\nvar a = ["a", "b", "c"];\na.slice(0); // ["a", "b", "c"]\na.slice(1); // ["b", "c"]\na.slice(1, 2); // ["b"]\na.slice(2, 6); // ["c"]\na.slice(); // ["a", "b", "c"]\n\nvar a = ["a", "b", "c"];\na.slice(-2); // ["b", "c"]\na.slice(-2, -1); // ["b"]\n\nvar a = ["a", "b", "c"];\na.slice(4); // []\na.slice(2, 1); // []\n\n// arr.splice(start, count, addElement1, addElement2, ...);\nvar a = ["a", "b", "c", "d", "e", "f"];\na.splice(4, 2); // ["e", "f"]\na; // ["a", "b", "c", "d"]\n\nconst someList = ["a", "b", "c"];\nsomeList.splice(1, 1);\n// a\n// c\nsomeList.forEach((element) => {\n  console.log(element);\n});\n```\n'},"1Gc5":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: range\u5faa\u73af\n---"},"1TQ1":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u65f6\u95f4\u5904\u7406\n---\n"},"1lCs":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u529b\u6263\n---\n"},"1o4w":function(n,t,e){"use strict";e.r(t),t.default="\u5e93\u5305\u7684\u4ee3\u7801\u4f4d\u4e8e lib \u76ee\u5f55\u4e2d\uff0c \u5728\u5176\u4ed6\u5305\u4e2d\u53ef\u4ee5\u8bbf\u95ee\u8fd9\u91cc\u9762\u7684\u4ee3\u7801\u3002\n\u5728 lib \u76ee\u5f55\u4e0b\u53ef\u4ee5\u521b\u5efa\u4efb\u610f\u7684\u76ee\u5f55\u7ed3\u6784\u3002\n\u901a\u5e38\u60c5\u51b5\u4e0b\u90fd\u628a\u5b9e\u73b0\u4ee3\u7801\u653e\u5230 lib/src \u76ee\u5f55\u4e2d\u3002\n\u4f4d\u4e8e lib/src \u4e0b\u9762\u7684\u4ee3\u7801\u88ab\u8ba4\u4e3a\u662f\u79c1\u6709\u7684\uff1b\n\u5176\u4ed6\u5305\u4e0d\u5e94\u8be5\u76f4\u63a5\u5bfc\u5165 src/... \u91cc\u9762\u7684\u4ee3\u7801\u3002\n\u8981\u5206\u4eab lib/src \u4e0b\u7684 API\uff0c\u4f60\u53ef\u4ee5\u5728 lib \u76ee\u5f55\u4e0b \u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\n\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u5bfc\u5165 lib/src \u4e2d\u7684\u4ee3\u7801\u3002\n\n\u6700\u7b80\u5355\u7684\u5e93\u5305\u7684 \u76ee\u5f55\u7ed3\u6784\n\n![\u6700\u7b80\u5355\u7684\u5e93\u5305\u7684 \u76ee\u5f55\u7ed3\u6784](../../../images/simple-lib2-81ebdc20fdb53d3abbc4364956141eb0f6f8f275d1636064fc3e1db959b93c1a.png)\n\nshelf \u5e93\u7684\u76ee\u5f55\u7ed3\u6784\n\n![shelf \u5e93\u7684\u76ee\u5f55\u7ed3\u6784](../../../images/shelf-02e5fd43b660fcef7dbe6a883c40159e0379c8ee2088288ca60ed7dc8781bafd.png)\n\n\u5728 lib \u548c web \u5e93\u4e2d\u5982\u4f55\u5bfc\u5165 lib/src/foo/a.dart\n\n![\u5728 lib \u548c web \u5e93\u4e2d\u5982\u4f55\u5bfc\u5165 lib/src/foo/a.dart ](../../../images/import-lib-rules-fa353f6fddc6e69fe19da41bffff4f6ec7b561eeead24840bacce032759b8473.png)\n"},"26my":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u54c8\u5e0c\u8868/\u5b57\u5178\n---\n"},"2X9E":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u81ea\u52a8\u5316\u6d4b\u8bd5\n---\n"},"2YFh":function(n,t,e){"use strict";e.r(t),t.default="```sh\n# Enable HTTPS for apt.\n$ sudo apt-get update\n$ sudo apt-get install apt-transport-https\n# Get the Google Linux package signing key.\n$ sudo sh -c 'curl https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'\n# Set up the location of the stable repository.\n$ sudo sh -c 'curl https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'\n$ sudo apt-get update\n\n$ sudo apt-get install dart\n```\n"},"2akj":function(n,t){throw new Error("Module parse failed: Unexpected character '\ufffd' (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n(Source code omitted for this binary file)")},"2tDy":function(n,t,e){"use strict";e.r(t),t.default="Dart \u6709\u4e24\u79cd\u7c7b\u578b\u7684\u5305\uff1a \u5e94\u7528 \u5305 \u548c \u5e93 \u5305\u3002\n\n\u6700\u7b80\u5355\u7684\u5e93\u5305\u7684 \u76ee\u5f55\u7ed3\u6784\uff1a\n\u901a\u5e38\u60c5\u51b5\u4e0b\u90fd\u628a\u5b9e\u73b0\u4ee3\u7801\u653e\u5230 `lib/src` \u76ee\u5f55\u4e2d\u3002\n\u4f4d\u4e8e `lib/src` \u4e0b\u9762\u7684\u4ee3\u7801\u88ab\u8ba4\u4e3a\u662f\u79c1\u6709\u7684\uff1b\n\u5176\u4ed6\u5305\u4e0d\u5e94\u8be5\u76f4\u63a5\u5bfc\u5165 `src/...` \u91cc\u9762\u7684\u4ee3\u7801\u3002\n\n\u8981\u5206\u4eab lib/src \u4e0b\u7684 API\uff0c\u4f60\u53ef\u4ee5\u5728 lib \u76ee\u5f55\u4e0b \u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\uff0c\n\u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\u5bfc\u5165 lib/src \u4e2d\u7684\u4ee3\u7801\u3002\n\n```sh\nroot ------lib-----file.dart\n        |--pubspec.yaml\n```\n\n- \u5e93\u4e0d\u4ec5\u4ec5\u63d0\u4f9b API\uff0c \u8fd8\u662f\u4e00\u4e2a\u79c1\u6709\u5355\u5143\uff1a\n  \u4ee5\u4e0b\u5212\u7ebf (\\_) \u5f00\u5934\u7684\u6807\u8bc6\u7b26\u53ea\u6709\u5728\u5e93 \u5185\u90e8\u53ef\u89c1\u3002\n  \u6bcf\u4e2a Dart app \u90fd\u662f\u4e00\u4e2a\u5e93\uff0c \u5373\u4f7f\u6ca1\u6709\u4f7f\u7528 library \u547d\u4ee4\u4e5f\u662f\u4e00\u4e2a\u5e93\n- import \u5fc5\u987b\u53c2\u6570\u4e3a\u5e93 \u7684 URI\u3002\n  \u5bf9\u4e8e\u5185\u7f6e\u7684\u5e93\uff0cURI \u4f7f\u7528\u7279\u6b8a\u7684 dart: scheme\u3002\n  \u5bf9\u4e8e\u5176\u4ed6\u7684\u5e93\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\u6216\u8005 package: scheme\u3002\n  package: scheme \u6307\u5b9a\u7684\u5e93\u901a\u8fc7\u5305\u7ba1\u7406\u5668\u6765\u63d0\u4f9b\uff0c \u4f8b\u5982 pub \u5de5\u5177\u3002\n\n```dart\nimport 'dart:html';\nimport 'dart:io';\nimport 'package:mylib/mylib.dart';\nimport 'package:utils/utils.dart';\n\n// Specifying a library prefix\uff08\u6307\u5b9a\u5e93\u524d\u7f00\uff09\nimport 'package:lib1/lib1.dart';\nimport 'package:lib2/lib2.dart' as lib2;\n// ...\nElement element1 = new Element();           // Uses Element from lib1.\nlib2.Element element2 = new lib2.Element(); // Uses Element from lib2.\n\n// Importing only part of a library\uff08\u5bfc\u5165\u5e93\u7684\u4e00\u90e8\u5206\uff09\n// Import only foo.\nimport 'package:lib1/lib1.dart' show foo;\n// Import all names EXCEPT foo.\nimport 'package:lib2/lib2.dart' hide foo;\n\n// Lazily loading a library\uff08\u5ef6\u8fdf\u8f7d\u5165\u5e93\uff09\n// \u53ef\u4ee5\u591a\u6b21\u8c03\u7528 loadLibrary() \u51fd\u6570\u3002 \u4f46\u662f\u8be5\u5e93\u53ea\u662f\u8f7d\u5165\u4e00\u6b21\nimport 'package:deferred/hello.dart' deferred as hello;\ngreet() async {\n  await hello.loadLibrary();\n  hello.printGreeting();\n}\n\n\nimport 'french.dart';\nexport 'french.dart' show hello;\n\n// \u5f15\u5165\u67d0\u4e2a\u5e93\u7684\u591a\u4e2a\u5bf9\u8c61\nimport 'package:flutter/material.dart' show StatefulWidget, StatelessWidget;\n```\n"},"32iC":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u57fa\u7840\u6982\u5ff5\n---"},"38vV":function(n,t,e){"use strict";e.r(t),t.default='\u4fe1\u9053\u662f\u5e26\u6709\u7c7b\u578b\u7684\u7ba1\u9053\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u5b83\u7528\u4fe1\u9053\u64cd\u4f5c\u7b26 `<-` \u6765\u53d1\u9001\u6216\u8005\u63a5\u6536\u503c\u3002\n\n```go\nch <- v    // \u5c06 v \u53d1\u9001\u81f3\u4fe1\u9053 ch\u3002\nv := <-ch  // \u4ece ch \u63a5\u6536\u503c\u5e76\u8d4b\u4e88 v\u3002\nch := make(chan int) // \u548c\u6620\u5c04\u4e0e\u5207\u7247\u4e00\u6837\uff0c\u4fe1\u9053\u5728\u4f7f\u7528\u524d\u5fc5\u987b\u521b\u5efa\uff1a\n\n\npackage main\nimport "fmt"\nfunc sum(s []int, c chan int) {\n  sum := 0\n  for _, v := range s {\n    sum += v\n  }\n  c <- sum // \u5c06\u548c\u9001\u5165 c\n}\nfunc main() {\n  s := []int{7, 2, 8, -9, 4, 0}\n  c := make(chan int)\n  go sum(s[:len(s)/2], c)\n  go sum(s[len(s)/2:], c)\n  x, y := <-c, <-c // \u4ece c \u4e2d\u63a5\u6536\n  fmt.Println(x, y, x+y)\n}\n// -5 17 12\n\n\n// \u5c06\u7f13\u51b2\u957f\u5ea6\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u63d0\u4f9b\u7ed9 make \u6765\u521d\u59cb\u5316\u4e00\u4e2a\u5e26\u7f13\u51b2\u7684\u4fe1\u9053\uff1a\n// \u4ec5\u5f53\u4fe1\u9053\u7684\u7f13\u51b2\u533a\u586b\u6ee1\u540e\uff0c\u5411\u5176\u53d1\u9001\u6570\u636e\u65f6\u624d\u4f1a\u963b\u585e\u3002\n// \u5f53\u7f13\u51b2\u533a\u4e3a\u7a7a\u65f6\uff0c\u63a5\u53d7\u65b9\u4f1a\u963b\u585e\u3002\npackage main\nimport "fmt"\nfunc main() {\n  ch := make(chan int, 2)\n  ch <- 1\n  ch <- 2\n  fmt.Println(<-ch)\n  fmt.Println(<-ch)\n}\n\n\n// \u53d1\u9001\u8005\u53ef\u901a\u8fc7 close \u5173\u95ed\u4e00\u4e2a\u4fe1\u9053\u6765\u8868\u793a\u6ca1\u6709\u9700\u8981\u53d1\u9001\u7684\u503c\u4e86\u3002\n// \u82e5\u6ca1\u6709\u503c\u53ef\u4ee5\u63a5\u6536\u4e14\u4fe1\u9053\u5df2\u88ab\u5173\u95ed\n// v, ok := <-ch\n// ok \u4f1a\u88ab\u8bbe\u7f6e\u4e3a false\u3002\n// \u8bb0\u4f4f\u5e94\u8be5\u5728\u751f\u4ea7\u8005\u7684\u5730\u65b9\u5173\u95edchannel\uff0c\u800c\u4e0d\u662f\u6d88\u8d39\u7684\u5730\u65b9\u53bb\u5173\u95ed\u5b83\uff0c\u8fd9\u6837\u5bb9\u6613\u5f15\u8d77panic\n// \u53e6\u5916\u8bb0\u4f4f\u4e00\u70b9\u7684\u5c31\u662fchannel\u4e0d\u50cf\u6587\u4ef6\u4e4b\u7c7b\u7684\uff0c\u4e0d\u9700\u8981\u7ecf\u5e38\u53bb\u5173\u95ed\uff0c\n// \u53ea\u6709\u5f53\u4f60\u786e\u5b9e\u6ca1\u6709\u4efb\u4f55\u53d1\u9001\u6570\u636e\u4e86\uff0c\u6216\u8005\u4f60\u60f3\u663e\u5f0f\u7684\u7ed3\u675frange\u5faa\u73af\u4e4b\u7c7b\u7684\n\n// \u5faa\u73af for i := range c \u4f1a\u4e0d\u65ad\u4ece\u4fe1\u9053\u63a5\u6536\u503c\uff0c\u76f4\u5230\u5b83\u88ab\u5173\u95ed\u3002\n// *\u6ce8\u610f\uff1a* \u53ea\u6709\u53d1\u9001\u8005\u624d\u80fd\u5173\u95ed\u4fe1\u9053\uff0c\u800c\u63a5\u6536\u8005\u4e0d\u80fd\u3002\n// for i := range c\u80fd\u591f\u4e0d\u65ad\u7684\u8bfb\u53d6channel\u91cc\u9762\u7684\u6570\u636e\uff0c\u76f4\u5230\u8be5channel\u88ab\u663e\u5f0f\u7684\u5173\u95ed\u3002\npackage main\nimport (\n  "fmt"\n)\nfunc fibonacci(n int, c chan int) {\n  x, y := 0, 1\n  for i := 0; i < n; i++ {\n    c <- x\n    x, y = y, x+y\n  }\n  close(c) // \u5173\u95ed\u4fe1\u9053\uff0c\u4e0d\u5173\u95ed\u4f1a\u62a5\u9519\n}\nfunc main() {\n  c := make(chan int, 10)\n  go fibonacci(cap(c), c)\n  for i := range c { // \u5faa\u73af\u4fe1\u9053\uff0c\u6ce8\u610fi\u5c31\u662f\u4fe1\u9053\u4fdd\u5b58\u503c\uff0c\u800c\u4e0d\u662f\u5e8f\u53f7\n    fmt.Println(i)\n  }\n}\n// 0\n// 1\n// 1\n// 2\n// 3\n// 5\n// 8\n// 13\n// 21\n// 34\n\n\n\n\n// \u7ec3\u4e60\uff1aWeb \u722c\u866b\npackage main\nimport (\n  "fmt"\n)\n// \u5b9a\u4e49\u63a5\u53e3\ntype Fetcher interface {\n  // Fetch \u8fd4\u56de URL \u7684 body \u5185\u5bb9\uff0c\u5e76\u4e14\u5c06\u5728\u8fd9\u4e2a\u9875\u9762\u4e0a\u627e\u5230\u7684 URL \u653e\u5230\u4e00\u4e2a slice \u4e2d\u3002\n  Fetch(url string) (body string, urls []string, err error)\n}\n// fakeFetcher \u662f\u8fd4\u56de\u82e5\u5e72\u7ed3\u679c\u7684 Fetcher\u3002\ntype fakeFetcher map[string]*fakeResult\ntype fakeResult struct {\n  body string\n  urls []string\n}\n// \u5b9e\u73b0\u63a5\u53e3\u65b9\u6cd5\nfunc (f fakeFetcher) Fetch(url string) (string, []string, error) {\n  if res, ok := f[url]; ok {\n    return res.body, res.urls, nil\n  }\n  return "", nil, fmt.Errorf("not found: %s", url)\n}\n// fetcher \u662f\u586b\u5145\u540e\u7684 fakeFetcher\u3002\nvar fetcher = fakeFetcher{\n  "https://golang.org/": &fakeResult{\n    "The Go Programming Language",\n    []string{\n      "https://golang.org/pkg/",\n      "https://golang.org/cmd/",\n    },\n  },\n  "https://golang.org/pkg/": &fakeResult{\n    "Packages",\n    []string{\n      "https://golang.org/",\n      "https://golang.org/cmd/",\n      "https://golang.org/pkg/fmt/",\n      "https://golang.org/pkg/os/",\n    },\n  },\n  "https://golang.org/pkg/fmt/": &fakeResult{\n    "Package fmt",\n    []string{\n      "https://golang.org/",\n      "https://golang.org/pkg/",\n    },\n  },\n  "https://golang.org/pkg/os/": &fakeResult{\n    "Package os",\n    []string{\n      "https://golang.org/",\n      "https://golang.org/pkg/",\n    },\n  },\n}\n// Crawl \u4f7f\u7528 fetcher \u4ece\u67d0\u4e2a URL \u5f00\u59cb\u9012\u5f52\u7684\u722c\u53d6\u9875\u9762\uff0c\u76f4\u5230\u8fbe\u5230\u6700\u5927\u6df1\u5ea6\u3002\nfunc Crawl(url string, depth int, fetcher Fetcher) {\n  // TODO: \u5e76\u884c\u7684\u6293\u53d6 URL\u3002\n  // TODO: \u4e0d\u91cd\u590d\u6293\u53d6\u9875\u9762\u3002\n        // \u4e0b\u9762\u5e76\u6ca1\u6709\u5b9e\u73b0\u4e0a\u9762\u4e24\u79cd\u60c5\u51b5\uff1a\n  if depth <= 0 {\n    return\n  }\n  body, urls, err := fetcher.Fetch(url)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Printf("found: %s %q\\n", url, body)\n  for _, u := range urls {\n    Crawl(u, depth-1, fetcher)\n  }\n  return\n}\nfunc main() {\n  Crawl("https://golang.org/", 4, fetcher)\n}\n```\n\n## \u4fe1\u9053\u963b\u585e\n\n`ch := make(chan type, value)`\n\n- \u5f53 `value = 0` \u65f6\uff0c`channel` \u662f\u65e0\u7f13\u51b2\u963b\u585e\u8bfb\u5199\u7684\uff0c\n- \u5f53 `value > 0` \u65f6\uff0c`channel` \u6709\u7f13\u51b2\u3001\u662f\u975e\u963b\u585e\u7684\uff0c\n  \u76f4\u5230\u5199\u6ee1 `value` \u4e2a\u5143\u7d20\u624d\u963b\u585e\u5199\u5165\u3002\n\n- \u5982\u679c\u4e00\u4e2a go \u7a0b\u5199\uff0c\u4e00\u4e2a go \u7a0b\u8bfb\uff0c\u4e0d\u4f1a\u963b\u585e\u62a5\u9519\n- \u5982\u679c\u540c\u4e00\u4e2a go \u7a0b\u5199+\u8bfb\uff0c\u9700\u8981\u6ce8\u610f\u4fe1\u9053\u7684\u7f13\u51b2\u5927\u5c0f\n\n```go\npackage main\nimport "fmt"\nfunc main() {\n  c := make(chan int, 2) //\u4fee\u65392\u4e3a1\u5c31\u62a5\u9519\uff0c\u4fee\u65392\u4e3a3\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\n  c <- 1\n  c <- 2\n  fmt.Println(<-c)\n  fmt.Println(<-c)\n}\n\n\n// \u4ea6\u4f1a\u62a5\u9519\npackage main\nimport "fmt"\nfunc main() {\n  c := make(chan int) // \u60f3\u5f53\u4e8e c := make(chan int\uff0c 0)\n  c <- 1 // \u6b64\u5904\u963b\u585e\uff0c\u65e0\u6cd5\u6267\u884c\uff0c\u5fc5\u987b\u5728\u53e6\u4e00\u4e2ago\u7a0b\u53d6\u51fa\u6570\u636e\u624d\u4f1a\u7ee7\u7eed\n  c <- 2\n  fmt.Println(<-c)\n  fmt.Println(<-c)\n}\n\n\n// \u6b63\u786e\u6267\u884c\npackage main\nimport "fmt"\nfunc main() {\n  c := make(chan int)\n  go func() { // \u65b0\u5f00\u4e00\u4e2ago\u7a0b\uff0c\u5411\u4fe1\u9053\u5199\u5165\u6570\u636e\n    c <- 1\n    c <- 2\n  }()\n  fmt.Println(<-c) // \u53d6\u51fa\u6570\u636e\n  fmt.Println(<-c)\n}\n\n\n// package main\nimport "fmt"\nfunc main() {\n  ch := make(chan int, 2)\n  ch <- 1\n  ch <- 2\n  close(ch) // \u8fd9\u91cc\u4e0d\u5173\u95ed\u5c06\u4f1a\u62a5\u9519\n  for i := range ch {\n    fmt.Println(i)\n  }\n}\n```\n\n## \u4fe1\u9053\u5173\u95ed\n\n```go\npackage main\n\nimport "fmt"\n\nfunc main() {\n    jobs := make(chan int, 5)\n    done := make(chan bool)\n\n    go func() {\n        for {\n            j, more := <-jobs\n            if more {\n                fmt.Println("received job", j)\n            } else {\n                fmt.Println("received all jobs")\n                done <- true\n                return\n            }\n        }\n    }()\n\n    for j := 1; j <= 3; j++ {\n        jobs <- j\n        fmt.Println("sent job", j)\n    }\n    close(jobs)\n    fmt.Println("sent all jobs")\n\n    <-done\n}\n```\n\n## \u4fe1\u9053\u904d\u5386\n\n\u4e00\u4e2a\u975e\u7a7a\u7684\u901a\u9053\u4e5f\u662f\u53ef\u4ee5\u5173\u95ed\u7684\uff0c \u5e76\u4e14\uff0c\u901a\u9053\u4e2d\u5269\u4e0b\u7684\u503c\u4ecd\u7136\u53ef\u4ee5\u88ab\u63a5\u6536\u5230\u3002\n\n```go\npackage main\n\nimport "fmt"\n\nfunc main() {\n\n    queue := make(chan string, 2)\n    queue <- "one"\n    queue <- "two"\n    close(queue)\n\n    for elem := range queue {\n        fmt.Println(elem)\n    }\n}\n```\n'},"39Qe":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5192\u6ce1\u6392\u5e8f\n---\n"},"3O+U":function(n,t,e){"use strict";e.r(t),t.default='\u4e92\u65a5\u5668\uff08mutex\uff09\u662f mutual exclusion \u7684\u7f29\u5199\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4efb\u610f\u65f6\u523b\uff0c\u5176\u53ea\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u67d0\u4e9b\u6570\u636e\u3002\n\n```rust\nuse std::sync::Mutex;\nfn main() {\n    // Mutex<i32> \u5e76\u4e0d\u662f\u4e00\u4e2a i32\uff0c\u6240\u4ee5 \u5fc5\u987b \u83b7\u53d6\u9501\u624d\u80fd\u4f7f\u7528\u8fd9\u4e2a i32 \u503c\u3002\n    // Mutex<T> \u662f\u4e00\u4e2a\u667a\u80fd\u6307\u9488\u3002\n    // Mutex<T> \u63d0\u4f9b\u4e86\u5185\u90e8\u53ef\u53d8\u6027\uff0c\u5c31\u50cf Cell \u7cfb\u5217\u7c7b\u578b\u90a3\u6837\u3002\n    let m = Mutex::new(5);\n    {\n        // lock \u8c03\u7528 \u8fd4\u56de \u4e00\u4e2a\u53eb\u505a MutexGuard \u7684\u667a\u80fd\u6307\u9488\u3002\n        // \u8fd9\u4e2a\u667a\u80fd\u6307\u9488\u5b9e\u73b0\u4e86 Deref \u6765\u6307\u5411\u5176\u5185\u90e8\u6570\u636e\uff1b\n        // \u5176\u4e5f\u63d0\u4f9b\u4e86\u4e00\u4e2a Drop \u5b9e\u73b0\u5f53 MutexGuard \u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u81ea\u52a8\u91ca\u653e\u9501\uff0c\n        let mut num = m.lock().unwrap();\n        *num = 6;\n    }\n    println!("m = {:?}", m);\n}\n```\n\n## \u539f\u5b50\u5f15\u7528\u8ba1\u6570 `Arc<T>`\n\n- \u4f7f\u7528 `RefCell<T>` \u53ef\u4ee5\u6539\u53d8 `Rc<T>` \u4e2d\u7684\u5185\u5bb9\u90a3\u6837\uff0c\n- \u540c\u6837\u7684\u53ef\u4ee5\u4f7f\u7528 `Mutex<T>` \u6765\u6539\u53d8 `Arc<T>` \u4e2d\u7684\u5185\u5bb9\u3002\n\n```rust\nuse std::sync::{Mutex, Arc};\nuse std::thread;\n\nfn main() {\n    let counter = Arc::new(Mutex::new(0));\n    let mut handles = vec![];\n\n    for _ in 0..10 {\n        let counter = Arc::clone(&counter);\n        let handle = thread::spawn(move || {\n            let mut num = counter.lock().unwrap();\n\n            *num += 1;\n        });\n        handles.push(handle);\n    }\n\n    for handle in handles {\n        handle.join().unwrap();\n    }\n\n    println!("Result: {}", *counter.lock().unwrap());\n}\n```\n'},"3fv6":function(n,t,e){"use strict";e.r(t),t.default='```rust\nlet decimal = 65.4321_f32;\n// \u53ef\u4ee5\u663e\u5f0f\u8f6c\u6362\nlet integer = decimal as u8;\nlet character = integer as char;\n```\n\n## from\n\n```rust\nuse std::convert::From;\n\n#[derive(Debug)]\nstruct Number {\n    value: i32,\n}\n\nimpl From<i32> for Number {\n    fn from(item: i32) -> Self {\n        Number { value: item }\n    }\n}\n\nfn main() {\n    let num = Number::from(30);\n    println!("My number is {:?}", num);\n}\n```\n\n## into\n\n```rust\nuse std::convert::From;\n\n#[derive(Debug)]\nstruct Number {\n    value: i32,\n}\n\nimpl From<i32> for Number {\n    fn from(item: i32) -> Self {\n        Number { value: item }\n    }\n}\n\nfn main() {\n    let int = 5;\n    // \u8bd5\u8bd5\u5220\u9664\u7c7b\u578b\u8bf4\u660e\n    let num: Number = int.into();\n    println!("My number is {:?}", num);\n}\n```\n\n## TryFrom and TryInto\n\n```rust\nuse std::convert::TryFrom;\nuse std::convert::TryInto;\n\n#[derive(Debug, PartialEq)]\nstruct EvenNumber(i32);\n\nimpl TryFrom<i32> for EvenNumber {\n    type Error = ();\n\n    fn try_from(value: i32) -> Result<Self, Self::Error> {\n        if value % 2 == 0 {\n            Ok(EvenNumber(value))\n        } else {\n            Err(())\n        }\n    }\n}\n\nfn main() {\n    // TryFrom\n\n    assert_eq!(EvenNumber::try_from(8), Ok(EvenNumber(8)));\n    assert_eq!(EvenNumber::try_from(5), Err(()));\n\n    // TryInto\n\n    let result: Result<EvenNumber, ()> = 8i32.try_into();\n    assert_eq!(result, Ok(EvenNumber(8)));\n    let result: Result<EvenNumber, ()> = 5i32.try_into();\n    assert_eq!(result, Err(()));\n}\n```\n\n## \u89e3\u6790\u5b57\u7b26\u4e32\n\n```rust\nfn main() {\n    let parsed: i32 = "5".parse().unwrap();\n    let turbo_parsed = "10".parse::<i32>().unwrap();\n\n    let sum = parsed + turbo_parsed;\n    println!{"Sum: {:?}", sum};\n}\n```\n'},"3kZi":function(n,t,e){"use strict";e.r(t),t.default='## defer\n\ndefer \u8bed\u53e5\u4f1a\u5c06\u51fd\u6570\u63a8\u8fdf\u5230\u5916\u5c42\u51fd\u6570\u8fd4\u56de\u4e4b\u540e\u6267\u884c\u3002\n\u63a8\u8fdf\u8c03\u7528\u7684\u51fd\u6570\u5176\u53c2\u6570\u4f1a\u7acb\u5373\u6c42\u503c\uff0c\n\u4f46\u76f4\u5230\u5916\u5c42\u51fd\u6570\u8fd4\u56de\u524d\u8be5\u51fd\u6570\u90fd\u4e0d\u4f1a\u88ab\u8c03\u7528\u3002\n\n\u63a8\u8fdf\u7684\u51fd\u6570\u8c03\u7528\u4f1a\u88ab\u538b\u5165\u4e00\u4e2a\u6808\u4e2d\u3002\n\u5f53\u5916\u5c42\u51fd\u6570\u8fd4\u56de\u65f6\uff0c\u88ab\u63a8\u8fdf\u7684\u51fd\u6570\u4f1a\u6309\u7167\u540e\u8fdb\u5148\u51fa\u7684\u987a\u5e8f\u8c03\u7528\u3002\n\ndefer \u8bed\u53e5\u7ecf\u5e38\u88ab\u7528\u4e8e\u5904\u7406\u6210\u5bf9\u7684\u64cd\u4f5c\uff0c\n\u5982\u6253\u5f00\u3001\u5173\u95ed\u3001\u8fde\u63a5\u3001\u65ad\u5f00\u8fde\u63a5\u3001\u52a0\u9501\u3001\u91ca\u653e\u9501\u3002\u901a\u8fc7 defer \u673a\u5236\n\n```go\npackage main\nimport "fmt"\nfunc main() {\n  defer fmt.Println("world")\n  fmt.Println("hello")\n}\n// hello\n// world\n\n\n// defer \u6808\npackage main\nimport "fmt"\nfunc main() {\n  fmt.Println("counting")\n  for i := 0; i < 10; i++ {\n    defer fmt.Println(i)\n  }\n  fmt.Println("done")\n}\n// counting\n// done\n// 9\n// 8\n// 7\n// 6\n// 5\n// 4\n// 3\n// 2\n// 1\n// 0\n\n\n// Contents \u5c06\u6587\u4ef6\u7684\u5185\u5bb9\u4f5c\u4e3a\u5b57\u7b26\u4e32\u8fd4\u56de\u3002\nfunc Contents(filename string) (string, error) {\n  f, err := os.Open(filename)\n  if err != nil {\n    return "", err\n  }\n  defer f.Close()  // f.Close \u4f1a\u5728\u6211\u4eec\u7ed3\u675f\u540e\u8fd0\u884c\u3002\n\n  var result []byte\n  buf := make([]byte, 100)\n  for {\n    n, err := f.Read(buf[0:])\n    result = append(result, buf[0:n]...) // append \u5c06\u5728\u540e\u9762\u8ba8\u8bba\u3002\n    if err != nil {\n      if err == io.EOF {\n        break\n      }\n      return "", err  // \u6211\u4eec\u5728\u8fd9\u91cc\u8fd4\u56de\u540e\uff0cf \u5c31\u4f1a\u88ab\u5173\u95ed\u3002\n    }\n  }\n  return string(result), nil // \u6211\u4eec\u5728\u8fd9\u91cc\u8fd4\u56de\u540e\uff0cf \u5c31\u4f1a\u88ab\u5173\u95ed\u3002\n}\n\n\n// \u5bf9\u533f\u540d\u51fd\u6570\u91c7\u7528defer\u673a\u5236\uff0c\u53ef\u4ee5\u4f7f\u5176\u89c2\u5bdf\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002\nfunc double(x int) (result int) {\n  defer func() { fmt.Printf("double(%d) = %d\\n", x,result) }()\n  return x + x\n}\n_ = double(4)\n// Output:\n// "double(4) = 8"\n\n\n// \u88ab\u5ef6\u8fdf\u6267\u884c\u7684\u533f\u540d\u51fd\u6570\u751a\u81f3\u53ef\u4ee5\u4fee\u6539\u51fd\u6570\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u8fd4\u56de\u503c\uff1a\nfunc triple(x int) (result int) {\n  defer func() { result += x }()\n  return double(x)\n}\nfmt.Println(triple(4)) // "12"\n```\n'},"3rjj":function(n,t,e){"use strict";e.r(t),t.default='\u5b57\u7b26\u4e32 `slice`\uff08`string slice`\uff09\u662f `String` \u4e2d\u4e00\u90e8\u5206\u503c\u7684\u5f15\u7528\n\n```rust\nlet s = String::from("hello world");\n\nlet hello = &s[0..5];\nlet world = &s[6..11];\n\nlet slice = &s[0..2];\nlet slice = &s[..2];\n\nlet len = s.len();\nlet slice = &s[3..len];\nlet slice = &s[3..];\n\nlet len = s.len();\nlet slice = &s[0..len];\nlet slice = &s[..];\n```\n\n```rust\nfn first_word(s: &String) -> &str {\n    let bytes = s.as_bytes();\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b\' \' {\n            return &s[0..i];\n        }\n    }\n    &s[..]\n}\n```\n\n```rust\nfn first_word(s: &str) -> &str {\n    let bytes = s.as_bytes();\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b\' \' {\n            return &s[0..i];\n        }\n    }\n    &s[..]\n}\n\nfn main() {\n    let my_string = String::from("hello world");\n\n    // `first_word` \u63a5\u53d7 `String` \u7684\u5207\u7247\uff0c\u65e0\u8bba\u662f\u90e8\u5206\u8fd8\u662f\u5168\u90e8\n    let word = first_word(&my_string[0..6]);\n    let word = first_word(&my_string[..]);\n    // `first_word` \u4e5f\u63a5\u53d7 `String` \u7684\u5f15\u7528\uff0c\n    // \u8fd9\u7b49\u540c\u4e8e `String` \u7684\u5168\u90e8\u5207\u7247\n    let word = first_word(&my_string);\n\n    let my_string_literal = "hello world";\n\n    // `first_word` \u63a5\u53d7\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u7684\u5207\u7247\uff0c\u65e0\u8bba\u662f\u90e8\u5206\u8fd8\u662f\u5168\u90e8\n    let word = first_word(&my_string_literal[0..6]);\n    let word = first_word(&my_string_literal[..]);\n\n    // \u56e0\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u503c**\u5c31\u662f**\u5b57\u7b26\u4e32 slice\uff0c\n    // \u8fd9\u6837\u5199\u4e5f\u53ef\u4ee5\uff0c\u5373\u4e0d\u4f7f\u7528 slice \u8bed\u6cd5\uff01\n    let word = first_word(my_string_literal);\n}\n```\n'},"4Drs":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: 6.\u56de\u6587\u6570\n---\n"},"4H7R":function(n,t,e){"use strict";e.r(t),t.default="```go\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc removeNthFromEnd(head *ListNode, n int) *ListNode {\n    r := head\n    l := head\n    i := 0\n    for {\n        r = r.Next\n        if i > n {\n            l = l.Next\n        }\n        if r == nil {\n            if i == n-1 {\n                return l.Next\n            } else if n == 1 {\n                l.Next = nil\n            } else {\n                l.Next = l.Next.Next\n            }\n            break\n        }\n        i++\n    }\n    return head\n}\n```\n"},"59ZX":function(n,t,e){"use strict";e.r(t),t.default="```go\nfunc isPalindrome(x int) bool {\n    if x >= 0 && x < 10 {\n        return true\n    } else if x < 0 || x%10==0 {\n        return false\n    }\n\n    tmp := x\n    y := 0\n    for {\n        y = y*10 + tmp%10\n        tmp /= 10\n        if tmp == 0 {\n            break\n        }\n    }\n    return y == x\n}\n```\n\n```go\nfunc isPalindrome(x int) bool {\n    if x >= 0 && x < 10 {\n        return true\n    } else if x < 0 || x%10==0 {\n        return false\n    }\n\n    y := 0\n    for y < x {\n        y = y*10 + x%10\n        x /= 10\n    }\n\n    return x == y || x == y/10\n}\n```\n"},"5K+Z":function(n,t,e){"use strict";e.r(t),t.default='\u4e0d\u597d\u7684\u5b9e\u73b0\uff1a\n\n```go\n// \u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u6570\u636e\u7ed3\u6784\n// Add() \u3001Delete() \u548c Contains() \u4e09\u4e2a\u64cd\u4f5c\uff0c\n// \u524d\u4e24\u4e2a\u662f\u5199\u64cd\u4f5c\uff0c\u540e\u4e00\u4e2a\u662f\u8bfb\u64cd\u4f5c\ntype IntSet struct {\n    data map[int]bool\n}\nfunc NewIntSet() IntSet {\n    return IntSet{make(map[int]bool)}\n}\nfunc (set *IntSet) Add(x int) {\n    set.data[x] = true\n}\nfunc (set *IntSet) Delete(x int) {\n    delete(set.data, x)\n}\nfunc (set *IntSet) Contains(x int) bool {\n    return set.data[x]\n}\n\n// \u5b9e\u73b0Undo\u529f\u80fd\n// \u5d4c\u5957\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u589e\u52a0\u4e00\u4e2aundo\u7684\u51fd\u6570\u5217\u8868\n// \u7f3a\u70b9\u662f\u6570\u636e\u7ed3\u6784\u548cundo\u7684\u63a7\u5236\u903b\u8f91\u8026\u5408\u5728\u4e00\u8d77\u4e86\n// \u56e0\u4e3a Undo \u662f\u5c5e\u4e8e\u5d4c\u5957\u6570\u636e\u7ed3\u6784 UndoableIntSet \u7684\u65b9\u6cd5\ntype UndoableIntSet struct { // Poor style\n    IntSet    // Embedding (delegation)\n    functions []func()\n}\nfunc NewUndoableIntSet() UndoableIntSet {\n    return UndoableIntSet{NewIntSet(), nil}\n}\nfunc (set *UndoableIntSet) Add(x int) { // Override\n    if !set.Contains(x) {\n        set.data[x] = true\n        set.functions = append(set.functions, func() { set.Delete(x) })\n    } else {\n        set.functions = append(set.functions, nil)\n    }\n}\nfunc (set *UndoableIntSet) Delete(x int) { // Override\n    if set.Contains(x) {\n        delete(set.data, x)\n        set.functions = append(set.functions, func() { set.Add(x) })\n    } else {\n        set.functions = append(set.functions, nil)\n    }\n}\nfunc (set *UndoableIntSet) Undo() error {\n    if len(set.functions) == 0 {\n        return errors.New("No functions to undo")\n    }\n    index := len(set.functions) - 1\n    if function := set.functions[index]; function != nil {\n        function()\n        set.functions[index] = nil // For garbage collection\n    }\n    set.functions = set.functions[:index]\n    return nil\n}\n```\n\n\u66f4\u597d\u7684\u5b9e\u73b0\uff1a\n\n```go\n// \u589e\u52a0\u51fd\u6570\u5217\u8868\u7c7b\u578b\uff0c\u89e3\u85d5undo\ntype Undo []func()\nfunc (undo *Undo) Add(function func()) {\n  *undo = append(*undo, function)\n}\nfunc (undo *Undo) Undo() error {\n  functions := *undo\n  if len(functions) == 0 {\n    return errors.New("No functions to undo")\n  }\n  index := len(functions) - 1\n  if function := functions[index]; function != nil {\n    function()\n    functions[index] = nil // For garbage collection\n  }\n  *undo = functions[:index]\n  return nil\n}\n\n// \u6570\u636e\u7ed3\u6784\u589e\u52a0 Undo \u5b57\u6bb5\n// \u901a\u8fc7\u8c03\u7528\u8be5\u5b57\u6bb5\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0\u63a7\u5236\u529f\u80fd\ntype IntSet struct {\n    data map[int]bool\n    undo Undo\n}\n func NewIntSet() IntSet {\n    return IntSet{data: make(map[int]bool)}\n}\nfunc (set *IntSet) Undo() error {\n    return set.undo.Undo()\n}\nfunc (set *IntSet) Contains(x int) bool {\n    return set.data[x]\n}\nfunc (set *IntSet) Add(x int) {\n    if !set.Contains(x) {\n        set.data[x] = true\n        set.undo.Add(func() { set.Delete(x) })\n    } else {\n        set.undo.Add(nil)\n    }\n}\nfunc (set *IntSet) Delete(x int) {\n    if set.Contains(x) {\n        delete(set.data, x)\n        set.undo.Add(func() { set.Add(x) })\n    } else {\n        set.undo.Add(nil)\n    }\n}\n```\n'},"5NWX":function(n,t,e){"use strict";e.r(t),t.default='```go\n// helloword.go\npackage main\n\nimport "fmt"\n\nfunc main() {\n  fmt.Println("Hello, world")\n}\n```\n\n```sh\ngo build helloword.go\n./helloword\n# or\ngo run helloword.go\n```\n'},"5VGB":function(n,t,e){"use strict";e.r(t),t.default='## trait\n\n`trait` \u7c7b\u4f3c\u4e8e\u5176\u4ed6\u8bed\u8a00\u4e2d\u5e38\u88ab\u79f0\u4e3a \u63a5\u53e3\uff08`interfaces`\uff09\u7684\u529f\u80fd\uff0c\u867d\u7136\u6709\u4e00\u4e9b\u4e0d\u540c\u3002\n\n\u5b64\u513f\u89c4\u5219\uff08`orphan rule`\uff09\uff1a\n\n\u5b9e\u73b0 `trait` \u65f6\u9700\u8981\u6ce8\u610f\u7684\u4e00\u4e2a\u9650\u5236\u662f\uff0c\u53ea\u6709\u5f53 `trait` \u6216\u8005\u8981\u5b9e\u73b0 `trait` \u7684\u7c7b\u578b\u4f4d\u4e8e `crate` \u7684\u672c\u5730\u4f5c\u7528\u57df\u65f6\uff0c\u624d\u80fd\u4e3a\u8be5\u7c7b\u578b\u5b9e\u73b0 `trait`\u3002\n\n- \u4f8b\u5982\uff0c\u53ef\u4ee5\u4e3a `aggregator crate` \u7684\u81ea\u5b9a\u4e49\u7c7b\u578b `Tweet` \u5b9e\u73b0\u5982\u6807\u51c6\u5e93\u4e2d\u7684 `Display trait`\uff0c\u8fd9\u662f\u56e0\u4e3a `Tweet` \u7c7b\u578b\u4f4d\u4e8e `aggregator crate` \u672c\u5730\u7684\u4f5c\u7528\u57df\u4e2d\u3002\n- \u7c7b\u4f3c\u5730\uff0c\u4e5f\u53ef\u4ee5\u5728 `aggregator crate` \u4e2d\u4e3a`Vec<T>` \u5b9e\u73b0 `Summary`\uff0c\u8fd9\u662f\u56e0\u4e3a `Summary trait` \u4f4d\u4e8e `aggregator crate` \u672c\u5730\u4f5c\u7528\u57df\u4e2d\u3002\n- \u4e0d\u80fd\u5728 `aggregator crate` \u4e2d\u4e3a `Vec<T>` \u5b9e\u73b0 `Display trait`\u3002\u8fd9\u662f\u56e0\u4e3a `Display` \u548c `Vec<T>` \u90fd\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u4e2d\uff0c\u5b83\u4eec\u5e76\u4e0d\u4f4d\u4e8e `aggregator crate` \u672c\u5730\u4f5c\u7528\u57df\u4e2d\u3002\n\n```rust\n// \u5b9a\u4e49 trait\n// \u5982\u679c\u8fd9\u4e2a lib.rs \u662f\u5bf9\u5e94 aggregator crate \u7684\uff0c\n// \u522b\u4eba\u60f3\u8981\u5229\u7528\u6211\u4eec crate \u7684\u529f\u80fd\u4e3a\u5176\u81ea\u5df1\u7684\u5e93\u4f5c\u7528\u57df\u4e2d\u7684\u7ed3\u6784\u4f53\u5b9e\u73b0 Summary trait\u3002\n// \u9996\u5148\u4ed6\u4eec\u9700\u8981\u5c06 trait \u5f15\u5165\u4f5c\u7528\u57df\u3002\n// \u8fd9\u53ef\u4ee5\u901a\u8fc7\u6307\u5b9a use aggregator::Summary; \u5b9e\u73b0\n// Summary \u8fd8\u5fc5\u987b\u662f\u516c\u6709 trait \u4f7f\u5f97\u5176\u4ed6 crate \u53ef\u4ee5\u5b9e\u73b0\u5b83\npub trait Summary {\n    fn summarize(&self) -> String;\n}\n\n// \u4e3a\u7c7b\u578b\u5b9e\u73b0 trait\npub struct NewsArticle {\n    pub headline: String,\n    pub location: String,\n    pub author: String,\n    pub content: String,\n}\nimpl Summary for NewsArticle {\n    fn summarize(&self) -> String {\n        format!("{}, by {} ({})", self.headline, self.author, self.location)\n    }\n}\n\n// \u4e3a\u7c7b\u578b\u5b9e\u73b0 trait\npub struct Tweet {\n    pub username: String,\n    pub content: String,\n    pub reply: bool,\n    pub retweet: bool,\n}\nimpl Summary for Tweet {\n    fn summarize(&self) -> String {\n        format!("{}: {}", self.username, self.content)\n    }\n}\n\n// \u8c03\u7528 trait \u65b9\u6cd5\nlet tweet = Tweet {\n    username: String::from("horse_ebooks"),\n    content: String::from("of course, as you probably already know, people"),\n    reply: false,\n    retweet: false,\n};\nprintln!("1 new tweet: {}", tweet.summarize());\n```\n\n## \u9ed8\u8ba4\u5b9e\u73b0\n\n```rust\n// Summary trait \u7684\u5b9a\u4e49\uff0c\u5e26\u6709\u4e00\u4e2a summarize \u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\npub trait Summary {\n    fn summarize(&self) -> String {\n        String::from("(Read more...)")\n    }\n}\nimpl Summary for NewsArticle {}\n```\n\n```rust\npub trait Summary {\n    fn summarize_author(&self) -> String;\n    fn summarize(&self) -> String {\n        format!("(Read more from {}...)", self.summarize_author())\n    }\n}\nimpl Summary for Tweet {\n    // \u91cd\u8f7d\u9ed8\u8ba4\u5b9e\u73b0\n    fn summarize_author(&self) -> String {\n        format!("@{}", self.username)\n    }\n}\n```\n\n## trait \u4f5c\u4e3a\u53c2\u6570\n\n```rust\npub fn notify(item: impl Summary) {\n    println!("Breaking news! {}", item.summarize());\n}\n\n// Trait Bound \u8bed\u6cd5\npub fn notify<T: Summary>(item: T) {\n    println!("Breaking news! {}", item.summarize());\n}\n\n// \u53ea\u8981\u6c42\u5b9e\u73b0\u4e86Summary\npub fn notify(item1: impl Summary, item2: impl Summary) {}\n// \u5f3a\u5236\u90fd\u662f\u76f8\u540c\u7684\u5177\u4f53\u7c7b\u578b\uff0c\u5e76\u4e14\u90fd\u5b9e\u73b0\u4e86Summary\npub fn notify<T: Summary>(item1: T, item2: T) {}\n\n// \u901a\u8fc7 + \u6307\u5b9a\u591a\u4e2a trait bound\npub fn notify(item: impl Summary + Display) {}\npub fn notify<T: Summary + Display>(item: T) {}\n\n// \u901a\u8fc7 where \u7b80\u5316 trait bound\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: T, u: U) -> i32 {}\nfn some_function<T, U>(t: T, u: U) -> i32\n    where T: Display + Clone,\n          U: Clone + Debug\n{}\n```\n\n## \u8fd4\u56de\u5b9e\u73b0\u4e86 trait \u7684\u7c7b\u578b\n\n```rust\n// \u8fd9\u53ea\u9002\u7528\u4e8e\u8fd4\u56de\u5355\u4e00\u7c7b\u578b\u7684\u60c5\u51b5\u3002\nfn returns_summarizable() -> impl Summary {\n    Tweet {\n        username: String::from("horse_ebooks"),\n        content: String::from("of course, as you probably already know, people"),\n        reply: false,\n        retweet: false,\n    }\n}\n```\n\n## \u4f7f\u7528 trait bound \u6709\u6761\u4ef6\u5730\u5b9e\u73b0\u65b9\u6cd5\n\n```rust\nuse std::fmt::Display;\nstruct Pair<T> {\n    x: T,\n    y: T,\n}\n// \u7c7b\u578b Pair<T> \u603b\u662f\u5b9e\u73b0\u4e86 new \u65b9\u6cd5\nimpl<T> Pair<T> {\n    fn new(x: T, y: T) -> Self {\n        Self {\n            x,\n            y,\n        }\n    }\n}\n// \u4e0d\u8fc7\u53ea\u6709\u90a3\u4e9b\u4e3a T \u7c7b\u578b\u5b9e\u73b0\u4e86 PartialOrd trait \uff08\u6765\u5141\u8bb8\u6bd4\u8f83\uff09 \u548c Display trait \uff08\u6765\u542f\u7528\u6253\u5370\uff09\n// \u7684 Pair<T> \u624d\u4f1a\u5b9e\u73b0 cmp_display \u65b9\u6cd5\uff1a\n// \u6ee1\u8db3\u7279\u5b9a trait bound \u7684\u7c7b\u578b\u5b9e\u73b0 trait \u88ab\u79f0\u4e3a blanket implementations\nimpl<T: Display + PartialOrd> Pair<T> {\n    fn cmp_display(&self) {\n        if self.x >= self.y {\n            println!("The largest member is x = {}", self.x);\n        } else {\n            println!("The largest member is y = {}", self.y);\n        }\n    }\n}\n```\n\n## \u5173\u8054\u7c7b\u578b\u5728 trait \u5b9a\u4e49\u4e2d\u6307\u5b9a\u5360\u4f4d\u7b26\u7c7b\u578b\n\n\u5173\u8054\u7c7b\u578b\uff08associated types\uff09\u662f\u4e00\u4e2a\u5c06\u7c7b\u578b\u5360\u4f4d\u7b26\u4e0e trait \u76f8\u5173\u8054\u7684\u65b9\u5f0f\uff0c\u8fd9\u6837 trait \u7684\u65b9\u6cd5\u7b7e\u540d\u4e2d\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u5360\u4f4d\u7b26\u7c7b\u578b\u3002\n\n```rust\n// Iterator trait \u7684\u5b9a\u4e49\u4e2d\u5e26\u6709\u5173\u8054\u7c7b\u578b Item\n// \u8fd9\u91cc\u6ca1\u6709\u6cdb\u578b\u53c2\u6570 T\n// \u6211\u4eec\u53ea\u80fd\u9009\u62e9\u4e00\u6b21 Item \u4f1a\u662f\u4ec0\u4e48\u7c7b\u578b\npub trait Iterator {\n    type Item;\n    fn next(&mut self) -> Option<Self::Item>;\n}\nimpl Iterator for Counter {\n    // \u8fd9\u91cc\u6307\u5b9a trait \u5b9a\u4e49\u91cc\u9762\u7684 Item \u7684\u7c7b\u578b\n    type Item = u32;\n    fn next(&mut self) -> Option<Self::Item> {}\n}\n\n// \u4e00\u4e2a\u4f7f\u7528\u6cdb\u578b\u7684 Iterator trait \u5047\u60f3\u5b9a\u4e49\npub trait Iterator<T> {\n    fn next(&mut self) -> Option<T>;\n}\n```\n\n## \u9ed8\u8ba4\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u548c\u8fd0\u7b97\u7b26\u91cd\u8f7d\n\n```rust\n// \u5b9e\u73b0 Add trait \u91cd\u8f7d Point \u5b9e\u4f8b\u7684 + \u8fd0\u7b97\u7b26\nuse std::ops::Add;\n#[derive(Debug, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n// \u4f7f\u7528\u9ed8\u8ba4 RHS \u53c2\u6570\nimpl Add for Point {\n    // Add trait \u6709\u4e00\u4e2a\u53eb\u505a Output \u7684\u5173\u8054\u7c7b\u578b\uff0c\u5b83\u7528\u6765\u51b3\u5b9a add \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002\n    type Output = Point;\n    fn add(self, other: Point) -> Point {\n        Point {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\nfn main() {\n    assert_eq!(Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n               Point { x: 3, y: 3 });\n}\n```\n\n```rust\n// Add trait \u7684\u5b9a\u4e49\ntrait Add<RHS=Self> {\n    type Output;\n    fn add(self, rhs: RHS) -> Self::Output;\n}\n```\n\n```rust\n// \u5728 Millimeters \u4e0a\u5b9e\u73b0 Add\uff0c\u4ee5\u4fbf\u80fd\u591f\u5c06 Millimeters \u4e0e Meters \u76f8\u52a0\nuse std::ops::Add;\nstruct Millimeters(u32);\nstruct Meters(u32);\n// \u81ea\u5b9a\u4e49 RHS \u53c2\u6570\nimpl Add<Meters> for Millimeters {\n    type Output = Millimeters;\n    fn add(self, other: Meters) -> Millimeters {\n        Millimeters(self.0 + (other.0 * 1000))\n    }\n}\n```\n\n## \u5b8c\u5168\u9650\u5b9a\u8bed\u6cd5\u4e0e\u6d88\u6b67\u4e49\uff1a\u8c03\u7528\u76f8\u540c\u540d\u79f0\u7684\u65b9\u6cd5\n\n```rust\ntrait Pilot {\n    fn fly(&self);\n}\ntrait Wizard {\n    fn fly(&self);\n}\n\nstruct Human;\nimpl Pilot for Human {\n    fn fly(&self) {\n        println!("This is your captain speaking.");\n    }\n}\nimpl Wizard for Human {\n    fn fly(&self) {\n        println!("Up!");\n    }\n}\n\nimpl Human {\n    fn fly(&self) {\n        println!("*waving arms furiously*");\n    }\n}\nfn main() {\n    let person = Human;\n    Pilot::fly(&person);\n    Wizard::fly(&person);\n    person.fly();\n}\n// This is your captain speaking.\n// Up!\n// *waving arms furiously*\n```\n\n```rust\ntrait Animal {\n    fn baby_name() -> String;\n}\nstruct Dog;\nimpl Dog {\n    fn baby_name() -> String {\n        String::from("Spot")\n    }\n}\nimpl Animal for Dog {\n    fn baby_name() -> String {\n        String::from("puppy")\n    }\n}\nfn main() {\n    println!("A baby dog is called a {}", Dog::baby_name());\n    println!("A baby dog is called a {}", <Dog as Animal>::baby_name());\n}\n// A baby dog is called a Spot\n// A baby dog is called a puppy\n```\n\n## \u7236 trait \u7528\u4e8e\u5728\u53e6\u4e00\u4e2a trait \u4e2d\u4f7f\u7528\u67d0 trait \u7684\u529f\u80fd\n\n```rust\nuse std::fmt;\n// \u5b9e\u73b0 OutlinePrint trait\uff0c\u5b83\u8981\u6c42\u6765\u81ea Display \u7684\u529f\u80fd\n// \u56e0\u4e3a\u6307\u5b9a\u4e86 OutlinePrint \u9700\u8981 Display trait\uff0c\n// \u5219\u53ef\u4ee5\u5728 outline_print \u4e2d\u4f7f\u7528 to_string\uff0c \u5176\u4f1a\u4e3a\u4efb\u4f55\u5b9e\u73b0 Display \u7684\u7c7b\u578b\u81ea\u52a8\u5b9e\u73b0\u3002\ntrait OutlinePrint: fmt::Display {\n    fn outline_print(&self) {\n        let output = self.to_string();\n        let len = output.len();\n        println!("{}", "*".repeat(len + 4));\n        println!("*{}*", " ".repeat(len + 2));\n        println!("* {} *", output);\n        println!("*{}*", " ".repeat(len + 2));\n        println!("{}", "*".repeat(len + 4));\n    }\n}\n\n// \u5982\u679c\u5c1d\u8bd5\u5728\u4e00\u4e2a\u6ca1\u6709\u5b9e\u73b0 Display \u7684\u7c7b\u578b\u4e0a\u5b9e\u73b0 OutlinePrint \u4f1a\u53d1\u751f\u4ec0\u4e48\uff0c\n// \u6bd4\u5982 Point \u7ed3\u6784\u4f53\uff1a\n// \u8fd9\u6837\u4f1a\u5f97\u5230\u4e00\u4e2a\u9519\u8bef\u8bf4 Display \u662f\u5fc5\u987b\u7684\u800c\u672a\u88ab\u5b9e\u73b0\uff1a\nstruct Point {\n    x: i32,\n    y: i32,\n}\nimpl OutlinePrint for Point {}\n\n// \u4e00\u65e6\u5728 Point \u4e0a\u5b9e\u73b0 Display \u5e76\u6ee1\u8db3 OutlinePrint \u8981\u6c42\u7684\u9650\u5236\uff0c\n// \u6bd4\u5982\u8fd9\u6837\uff1a\u5c06\u80fd\u6210\u529f\u7f16\u8bd1\nuse std::fmt;\nimpl fmt::Display for Point {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "({}, {})", self.x, self.y)\n    }\n}\n```\n\n## newtype \u6a21\u5f0f\u7528\u4ee5\u5728\u5916\u90e8\u7c7b\u578b\u4e0a\u5b9e\u73b0\u5916\u90e8 trait\n\n\u5982\u679c\u60f3\u8981\u5728 `Vec<T>` \u4e0a\u5b9e\u73b0 `Display`\uff0c\u800c\u5b64\u513f\u89c4\u5219\u963b\u6b62\u6211\u4eec\u76f4\u63a5\u8fd9\u4e48\u505a\uff0c\n\u56e0\u4e3a `Display trait` \u548c `Vec<T>` \u90fd\u5b9a\u4e49\u4e8e\u6211\u4eec\u7684 `crate` \u4e4b\u5916\u3002\n\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u5305\u542b `Vec<T>` \u5b9e\u4f8b\u7684 `Wrapper` \u7ed3\u6784\u4f53\uff0c\n\u63a5\u7740\u53ef\u4ee5\u5982\u5217\u8868 19-31 \u90a3\u6837\u5728 `Wrapper` \u4e0a\u5b9e\u73b0 `Display` \u5e76\u4f7f\u7528 `Vec<T>` \u7684\u503c\uff1a\n\n```rust\nuse std::fmt;\nstruct Wrapper(Vec<String>);\nimpl fmt::Display for Wrapper {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "[{}]", self.0.join(", "))\n    }\n}\n\nfn main() {\n    let w = Wrapper(vec![String::from("hello"), String::from("world")]);\n    println!("w = {}", w);\n}\n```\n\n## \u6d3e\u751f\n\n\u4e0b\u9762\u662f\u53ef\u4ee5\u81ea\u52a8\u6d3e\u751f\u7684 trait\uff1a\n\n- \u6bd4\u8f83 trait: `Eq`, `PartialEq`, `Ord`, `PartialOrd`\n- `Clone`, \u7528\u6765\u4ece `&T` \u521b\u5efa\u526f\u672c `T`\u3002\n- `Copy`\uff0c\u4f7f\u7c7b\u578b\u5177\u6709 \u201c\u590d\u5236\u8bed\u4e49\u201d\uff08copy semantics\uff09\u800c\u975e \u201c\u79fb\u52a8\u8bed\u4e49\u201d\uff08move semantics\uff09\u3002\n- `Hash`\uff0c\u4ece `&T` \u8ba1\u7b97\u54c8\u5e0c\u503c\uff08hash\uff09\u3002\n- `Default`, \u521b\u5efa\u6570\u636e\u7c7b\u578b\u7684\u4e00\u4e2a\u7a7a\u5b9e\u4f8b\u3002\n- `Debug`\uff0c\u4f7f\u7528 `{:?}` formatter \u6765\u683c\u5f0f\u5316\u4e00\u4e2a\u503c\u3002\n\n## \u4f7f\u7528 dyn \u8fd4\u56de trait\n\n```rust\nstruct Sheep {}\nstruct Cow {}\n\ntrait Animal {\n    // \u5b9e\u4f8b\u65b9\u6cd5\u7b7e\u540d\n    fn noise(&self) -> &\'static str;\n}\n\n// \u5b9e\u73b0 `Sheep` \u7684 `Animal` trait\u3002\nimpl Animal for Sheep {\n    fn noise(&self) -> &\'static str {\n        "baaaaah!"\n    }\n}\n\n// \u5b9e\u73b0 `Cow` \u7684 `Animal` trait\u3002\nimpl Animal for Cow {\n    fn noise(&self) -> &\'static str {\n        "moooooo!"\n    }\n}\n\n// \u8fd4\u56de\u4e00\u4e9b\u5b9e\u73b0 Animal \u7684\u7ed3\u6784\u4f53\uff0c\u4f46\u662f\u5728\u7f16\u8bd1\u65f6\u6211\u4eec\u4e0d\u77e5\u9053\u54ea\u4e2a\u7ed3\u6784\u4f53\u3002\nfn random_animal(random_number: f64) -> Box<dyn Animal> {\n    if random_number < 0.5 {\n        Box::new(Sheep {})\n    } else {\n        Box::new(Cow {})\n    }\n}\n\nfn main() {\n    let random_number = 0.234;\n    let animal = random_animal(random_number);\n    println!("You\'ve randomly chosen an animal, and it says {}", animal.noise());\n}\n```\n\n## \u8fd0\u7b97\u7b26\u91cd\u8f7d\n\n```rust\nuse std::ops;\n\nstruct Foo;\nstruct Bar;\n\n#[derive(Debug)]\nstruct FooBar;\n\n#[derive(Debug)]\nstruct BarFoo;\n\n// `std::ops::Add` trait \u7528\u6765\u6307\u660e `+` \u7684\u529f\u80fd\uff0c\u8fd9\u91cc\u6211\u4eec\u5b9e\u73b0 `Add<Bar>`\uff0c\u5b83\u662f\u7528\u4e8e\n// \u628a\u5bf9\u8c61\u548c `Bar` \u7c7b\u578b\u7684\u53f3\u64cd\u4f5c\u6570\uff08RHS\uff09\u52a0\u8d77\u6765\u7684 `trait`\u3002\n// \u4e0b\u9762\u7684\u4ee3\u7801\u5757\u5b9e\u73b0\u4e86 `Foo + Bar = FooBar` \u8fd9\u6837\u7684\u8fd0\u7b97\u3002\nimpl ops::Add<Bar> for Foo {\n    type Output = FooBar;\n\n    fn add(self, _rhs: Bar) -> FooBar {\n        println!("> Foo.add(Bar) was called");\n\n        FooBar\n    }\n}\n\n// \u901a\u8fc7\u98a0\u5012\u7c7b\u578b\uff0c\u6211\u4eec\u5b9e\u73b0\u4e86\u4e0d\u670d\u4ece\u4ea4\u6362\u5f8b\u7684\u52a0\u6cd5\u3002\n// \u8fd9\u91cc\u6211\u4eec\u5b9e\u73b0 `Add<Foo>`\uff0c\u5b83\u662f\u7528\u4e8e\u628a\u5bf9\u8c61\u548c `Foo` \u7c7b\u578b\u7684\u53f3\u64cd\u4f5c\u6570\u52a0\u8d77\u6765\u7684 trait\u3002\n// \u4e0b\u9762\u7684\u4ee3\u7801\u5757\u5b9e\u73b0\u4e86 `Bar + Foo = BarFoo` \u8fd9\u6837\u7684\u8fd0\u7b97\u3002\nimpl ops::Add<Foo> for Bar {\n    type Output = BarFoo;\n\n    fn add(self, _rhs: Foo) -> BarFoo {\n        println!("> Bar.add(Foo) was called");\n\n        BarFoo\n    }\n}\n\nfn main() {\n    println!("Foo + Bar = {:?}", Foo + Bar);\n    println!("Bar + Foo = {:?}", Bar + Foo);\n}\n```\n\n## Drop\n\n```rust\nstruct Droppable {\n    name: &\'static str,\n}\n\n// \u8fd9\u4e2a\u7b80\u5355\u7684 `drop` \u5b9e\u73b0\u6dfb\u52a0\u4e86\u6253\u5370\u5230\u63a7\u5236\u53f0\u7684\u529f\u80fd\u3002\nimpl Drop for Droppable {\n    fn drop(&mut self) {\n        println!("> Dropping {}", self.name);\n    }\n}\n\nfn main() {\n    let _a = Droppable { name: "a" };\n\n    // \u4ee3\u7801\u5757 A\n    {\n        let _b = Droppable { name: "b" };\n\n        // \u4ee3\u7801\u5757 B\n        {\n            let _c = Droppable { name: "c" };\n            let _d = Droppable { name: "d" };\n\n            println!("Exiting block B");\n        }\n        println!("Just exited block B");\n\n        println!("Exiting block A");\n    }\n    println!("Just exited block A");\n\n    // \u53d8\u91cf\u53ef\u4ee5\u624b\u52a8\u4f7f\u7528 `drop` \u51fd\u6570\u6765\u9500\u6bc1\u3002\n    drop(_a);\n    // \u8bd5\u4e00\u8bd5 ^ \u5c06\u6b64\u884c\u6ce8\u91ca\u6389\u3002\n\n    println!("end of the main function");\n\n    // `_a` *\u4e0d\u4f1a*\u5728\u8fd9\u91cc\u518d\u6b21\u9500\u6bc1\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u88ab\uff08\u624b\u52a8\uff09\u9500\u6bc1\u3002\n}\n```\n\n## Iterator\n\n```rust\nstruct Fibonacci {\n    curr: u32,\n    next: u32,\n}\n\n// \u4e3a `Fibonacci`\uff08\u6590\u6ce2\u90a3\u5951\uff09\u5b9e\u73b0 `Iterator`\u3002\n// `Iterator` trait \u53ea\u9700\u5b9a\u4e49\u4e00\u4e2a\u80fd\u8fd4\u56de `next`\uff08\u4e0b\u4e00\u4e2a\uff09\u5143\u7d20\u7684\u65b9\u6cd5\u3002\nimpl Iterator for Fibonacci {\n    type Item = u32;\n\n    // \u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528 `.curr` \u548c `.next` \u6765\u5b9a\u4e49\u6570\u5217\uff08sequence\uff09\u3002\n    // \u8fd4\u56de\u7c7b\u578b\u4e3a `Option<T>`\uff1a\n    //     * \u5f53 `Iterator` \u7ed3\u675f\u65f6\uff0c\u8fd4\u56de `None`\u3002\n    //     * \u5176\u4ed6\u60c5\u51b5\uff0c\u8fd4\u56de\u88ab `Some` \u5305\u88f9\uff08wrap\uff09\u7684\u4e0b\u4e00\u4e2a\u503c\u3002\n    fn next(&mut self) -> Option<u32> {\n        let new_next = self.curr + self.next;\n\n        self.curr = self.next;\n        self.next = new_next;\n\n        // \u65e2\u7136\u6590\u6ce2\u90a3\u5951\u6570\u5217\u4e0d\u5b58\u5728\u7ec8\u70b9\uff0c\u90a3\u4e48 `Iterator` \u5c06\u4e0d\u53ef\u80fd\n        // \u8fd4\u56de `None`\uff0c\u800c\u603b\u662f\u8fd4\u56de `Some`\u3002\n        Some(self.curr)\n    }\n}\n\n// \u8fd4\u56de\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u751f\u6210\u5668\nfn fibonacci() -> Fibonacci {\n    Fibonacci { curr: 1, next: 1 }\n}\n\nfn main() {\n    // `0..3` \u662f\u4e00\u4e2a `Iterator`\uff0c\u4f1a\u4ea7\u751f\uff1a0\u30011 \u548c 2\u3002\n    let mut sequence = 0..3;\n\n    println!("Four consecutive `next` calls on 0..3");\n    println!("> {:?}", sequence.next());\n    println!("> {:?}", sequence.next());\n    println!("> {:?}", sequence.next());\n    println!("> {:?}", sequence.next());\n\n    // `for` \u904d\u5386 `Iterator` \u76f4\u5230\u8fd4\u56de `None`\uff0c\n    // \u5e76\u4e14\u6bcf\u4e2a `Some` \u503c\u90fd\u88ab\u89e3\u5305\uff08unwrap\uff09\uff0c\u7136\u540e\u7ed1\u5b9a\u7ed9\u4e00\u4e2a\u53d8\u91cf\uff08\u8fd9\u91cc\u662f `i`\uff09\u3002\n    println!("Iterate through 0..3 using `for`");\n    for i in 0..3 {\n        println!("> {}", i);\n    }\n\n    // `take(n)` \u65b9\u6cd5\u63d0\u53d6 `Iterator` \u7684\u524d `n` \u9879\u3002\n    println!("The first four terms of the Fibonacci sequence are: ");\n    for i in fibonacci().take(4) {\n        println!("> {}", i);\n    }\n\n    // `skip(n)` \u65b9\u6cd5\u79fb\u9664\u524d `n` \u9879\uff0c\u4ece\u800c\u7f29\u77ed\u4e86 `Iterator` \u3002\n    println!("The next four terms of the Fibonacci sequence are: ");\n    for i in fibonacci().skip(4).take(4) {\n        println!("> {}", i);\n    }\n\n    let array = [1u32, 3, 3, 7];\n\n    // `iter` \u65b9\u6cd5\u5bf9\u6570\u7ec4/slice \u4ea7\u751f\u4e00\u4e2a `Iterator`\u3002\n    println!("Iterate the following array {:?}", &array);\n    for i in array.iter() {\n        println!("> {}", i);\n    }\n}\n```\n\n## impl Trait\n\n\u5982\u679c\u51fd\u6570\u8fd4\u56de\u5b9e\u73b0\u4e86 `MyTrait` \u7684\u7c7b\u578b\uff0c\u53ef\u4ee5\u5c06\u5176\u8fd4\u56de\u7c7b\u578b\u7f16\u5199\u4e3a `-> impl MyTrait`\u3002\n\u8fd9\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u4f60\u7684\u7c7b\u578b\u7b7e\u540d\uff01\n\n```rust\nuse std::iter;\nuse std::vec::IntoIter;\n\n// \u8be5\u51fd\u6570\u7ec4\u5408\u4e86\u4e24\u4e2a `Vec <i32>` \u5e76\u5728\u5176\u4e0a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\n// \u770b\u770b\u5b83\u7684\u8fd4\u56de\u7c7b\u578b\u591a\u4e48\u590d\u6742\uff01\nfn combine_vecs_explicit_return_type(\n    v: Vec<i32>,\n    u: Vec<i32>,\n) -> iter::Cycle<iter::Chain<IntoIter<i32>, IntoIter<i32>>> {\n    v.into_iter().chain(u.into_iter()).cycle()\n}\n\n// \u8fd9\u662f\u5b8c\u5168\u76f8\u540c\u7684\u51fd\u6570\uff0c\u4f46\u5176\u8fd4\u56de\u7c7b\u578b\u4f7f\u7528 `impl Trait`\u3002\n// \u770b\u770b\u5b83\u591a\u4e48\u7b80\u5355\uff01\nfn combine_vecs(\n    v: Vec<i32>,\n    u: Vec<i32>,\n) -> impl Iterator<Item=i32> {\n    v.into_iter().chain(u.into_iter()).cycle()\n}\n\nfn main() {\n    let v1 = vec![1, 2, 3];\n    let v2 = vec![4, 5];\n    let mut v3 = combine_vecs(v1, v2);\n    assert_eq!(Some(1), v3.next());\n    assert_eq!(Some(2), v3.next());\n    assert_eq!(Some(3), v3.next());\n    assert_eq!(Some(4), v3.next());\n    assert_eq!(Some(5), v3.next());\n    println!("all done");\n}\n```\n\n```rust\n// \u8fd4\u56de\u4e00\u4e2a\u5c06\u8f93\u5165\u548c `y` \u76f8\u52a0\u7684\u51fd\u6570\nfn make_adder_function(y: i32) -> impl Fn(i32) -> i32 {\n    let closure = move |x: i32| { x + y };\n    closure\n}\n\nfn main() {\n    let plus_one = make_adder_function(1);\n    assert_eq!(plus_one(2), 3);\n}\n```\n\n```rust\nfn double_positives<\'a>(numbers: &\'a Vec<i32>) -> impl Iterator<Item = i32> + \'a {\n    numbers\n        .iter()\n        .filter(|x| x > &&0)\n        .map(|x| x * 2)\n}\n```\n\n## Clone\n\n```rust\n// \u4e0d\u542b\u8d44\u6e90\u7684\u5355\u5143\u7ed3\u6784\u4f53\n#[derive(Debug, Clone, Copy)]\nstruct Nil;\n\n// \u4e00\u4e2a\u5305\u542b\u8d44\u6e90\u7684\u7ed3\u6784\u4f53\uff0c\u5b83\u5b9e\u73b0\u4e86 `Clone` trait\n#[derive(Clone, Debug)]\nstruct Pair(Box<i32>, Box<i32>);\n\nfn main() {\n    // \u5b9e\u4f8b\u5316 `Nil`\n    let nil = Nil;\n    // \u590d\u5236 `Nil`\uff0c\u6ca1\u6709\u8d44\u6e90\u7528\u4e8e\u79fb\u52a8\uff08move\uff09\n    let copied_nil = nil;\n\n    // \u4e24\u4e2a `Nil` \u90fd\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528\n    println!("original: {:?}", nil);\n    println!("copy: {:?}", copied_nil);\n\n    // \u5b9e\u4f8b\u5316 `Pair`\n    let pair = Pair(Box::new(1), Box::new(2));\n    println!("original: {:?}", pair);\n\n    // \u5c06 `pair` \u7ed1\u5b9a\u5230 `moved_pair`\uff0c\u79fb\u52a8\uff08move\uff09\u4e86\u8d44\u6e90\n    let moved_pair = pair;\n    println!("copy: {:?}", moved_pair);\n\n    // \u62a5\u9519\uff01`pair` \u5df2\u5931\u53bb\u4e86\u5b83\u7684\u8d44\u6e90\u3002\n    //println!("original: {:?}", pair);\n    // \u8bd5\u4e00\u8bd5 ^ \u53d6\u6d88\u6b64\u884c\u6ce8\u91ca\u3002\n\n    // \u5c06 `moved_pair`\uff08\u5305\u62ec\u5176\u8d44\u6e90\uff09\u514b\u9686\u5230 `cloned_pair`\u3002\n    let cloned_pair = moved_pair.clone();\n    // \u4f7f\u7528 std::mem::drop \u6765\u9500\u6bc1\u539f\u59cb\u7684 pair\u3002\n    drop(moved_pair);\n\n    // \u62a5\u9519\uff01`moved_pair` \u5df2\u88ab\u9500\u6bc1\u3002\n    //println!("copy: {:?}", moved_pair);\n    // \u8bd5\u4e00\u8bd5 ^ \u5c06\u6b64\u884c\u6ce8\u91ca\u6389\u3002\n\n    // \u7531 .clone() \u5f97\u6765\u7684\u7ed3\u679c\u4ecd\u7136\u53ef\u7528\uff01\n    println!("clone: {:?}", cloned_pair);\n}\n```\n\n## \u7236 trait\n\n```rust\ntrait Person {\n    fn name(&self) -> String;\n}\n\n// Person \u662f Student \u7684\u7236 trait\u3002\n// \u5b9e\u73b0 Student \u9700\u8981\u4f60\u4e5f impl \u4e86 Person\u3002\ntrait Student: Person {\n    fn university(&self) -> String;\n}\n\ntrait Programmer {\n    fn fav_language(&self) -> String;\n}\n\n// CompSciStudent (computer science student\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5b66\u751f) \u662f Programmer \u548c Student \u4e24\u8005\u7684\u5b50\u7c7b\u3002\n// \u5b9e\u73b0 CompSciStudent \u9700\u8981\u4f60\u540c\u65f6 impl \u4e86\u4e24\u4e2a\u7236 trait\u3002\ntrait CompSciStudent: Programmer + Student {\n    fn git_username(&self) -> String;\n}\n\nfn comp_sci_student_greeting(student: &dyn CompSciStudent) -> String {\n    format!(\n        "My name is {} and I attend {}. My favorite language is {}. My Git username is {}",\n        student.name(),\n        student.university(),\n        student.fav_language(),\n        student.git_username()\n    )\n}\n\nfn main() {}\n```\n\n## \u6d88\u9664\u91cd\u53e0 trait\n\n```rust\ntrait UsernameWidget {\n    // \u4ece\u8fd9\u4e2a widget \u4e2d\u83b7\u53d6\u9009\u5b9a\u7684\u7528\u6237\u540d\n    fn get(&self) -> String;\n}\n\ntrait AgeWidget {\n    // \u4ece\u8fd9\u4e2a widget \u4e2d\u83b7\u53d6\u9009\u5b9a\u7684\u5e74\u9f84\n    fn get(&self) -> u8;\n}\n\n// \u540c\u65f6\u5177\u6709 UsernameWidget \u548c AgeWidget \u7684\u8868\u5355\nstruct Form {\n    username: String,\n    age: u8,\n}\n\nimpl UsernameWidget for Form {\n    fn get(&self) -> String {\n        self.username.clone()\n    }\n}\n\nimpl AgeWidget for Form {\n    fn get(&self) -> u8 {\n        self.age\n    }\n}\n\nfn main() {\n    let form = Form{\n        username: "rustacean".to_owned(),\n        age: 28,\n    };\n\n    // \u5982\u679c\u53d6\u6d88\u6ce8\u91ca\u6b64\u884c\uff0c\u5219\u4f1a\u6536\u5230\u4e00\u6761\u9519\u8bef\u6d88\u606f\uff0c\u63d0\u793a \u201cmultiple `get` found\u201d\uff08\u627e\u5230\u4e86\u591a\u4e2a`get`\uff09\u3002\n    // \u56e0\u4e3a\u6bd5\u7adf\u6709\u591a\u4e2a\u540d\u4e3a `get` \u7684\u65b9\u6cd5\u3002\n    // println!("{}", form.get());\n\n    let username = <Form as UsernameWidget>::get(&form);\n    assert_eq!("rustacean".to_owned(), username);\n    let age = <Form as AgeWidget>::get(&form);\n    assert_eq!(28, age);\n}\n```\n'},"5Z1q":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: Symbol\n---\n"},"5a5a":function(n,t,e){"use strict";e.r(t),t.default='- \u6307\u9488 \uff08`pointer`\uff09\u662f\u4e00\u4e2a\u5305\u542b\u5185\u5b58\u5730\u5740\u7684\u53d8\u91cf\u7684\u901a\u7528\u6982\u5ff5\u3002\n  - \u8fd9\u4e2a\u5730\u5740\u5f15\u7528\uff0c\u6216 \u201c\u6307\u5411\u201d\uff08points at\uff09\u4e00\u4e9b\u5176\u4ed6\u6570\u636e\u3002\n- \u667a\u80fd\u6307\u9488\uff08`smart pointers`\uff09\u662f\u4e00\u7c7b\u6570\u636e\u7ed3\u6784\uff0c\u5b83\u4eec\u7684\u8868\u73b0\u7c7b\u4f3c\u6307\u9488\uff0c\u4f46\u662f\u4e5f\u62e5\u6709\u989d\u5916\u7684\u5143\u6570\u636e\u548c\u529f\u80fd\u3002\n  - Rust \u6807\u51c6\u5e93\u4e2d\u4e0d\u540c\u7684\u667a\u80fd\u6307\u9488\u63d0\u4f9b\u4e86\u591a\u4e8e\u5f15\u7528\u7684\u989d\u5916\u529f\u80fd\u3002\n  - \u4e00\u4e2a\u4f8b\u5b50\u4fbf\u662f \u5f15\u7528\u8ba1\u6570 \uff08reference counting\uff09\u667a\u80fd\u6307\u9488\u7c7b\u578b\uff0c\u5176\u5141\u8bb8\u6570\u636e\u6709\u591a\u4e2a\u6240\u6709\u8005\u3002\n    - \u5f15\u7528\u8ba1\u6570\u667a\u80fd\u6307\u9488\u8bb0\u5f55\u603b\u5171\u6709\u591a\u5c11\u4e2a\u6240\u6709\u8005\uff0c\u5e76\u5f53\u6ca1\u6709\u4efb\u4f55\u6240\u6709\u8005\u65f6\u8d1f\u8d23\u6e05\u7406\u6570\u636e\u3002\n  - `String` \u548c `Vec<T>` \u8fd9\u4e9b\u7c7b\u578b\u90fd\u5c5e\u4e8e\u667a\u80fd\u6307\u9488\u56e0\u4e3a\u5b83\u4eec\u62e5\u6709\u4e00\u4e9b\u6570\u636e\u5e76\u5141\u8bb8\u4f60\u4fee\u6539\u5b83\u4eec\n  - \u667a\u80fd\u6307\u9488\u901a\u5e38\u4f7f\u7528\u7ed3\u6784\u4f53\u5b9e\u73b0\u3002\n  - \u667a\u80fd\u6307\u9488\u533a\u522b\u4e8e\u5e38\u89c4\u7ed3\u6784\u4f53\u7684\u663e\u8457\u7279\u6027\u5728\u4e8e\u5176\u5b9e\u73b0\u4e86 `Deref` \u548c `Drop trait`\u3002\n    - `Deref trait` \u5141\u8bb8\u667a\u80fd\u6307\u9488\u7ed3\u6784\u4f53\u5b9e\u4f8b\u8868\u73b0\u7684\u50cf\u5f15\u7528\u4e00\u6837\n    - `Drop trait` \u5141\u8bb8\u6211\u4eec\u81ea\u5b9a\u4e49\u5f53\u667a\u80fd\u6307\u9488\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u8fd0\u884c\u7684\u4ee3\u7801\n  - \u5e38\u7528\u667a\u80fd\u6307\u9488\n    - `Box<T>`\uff0c\u7528\u4e8e\u5728\u5806\u4e0a\u5206\u914d\u503c\n    - `Rc<T>`\uff0c\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u7c7b\u578b\uff0c\u5176\u6570\u636e\u53ef\u4ee5\u6709\u591a\u4e2a\u6240\u6709\u8005\n    - `Ref<T>` \u548c `RefMut<T>`\uff0c\u901a\u8fc7 `RefCell<T>` \u8bbf\u95ee\n- \u666e\u901a\u5f15\u7528\u548c\u667a\u80fd\u6307\u9488\u7684\u4e00\u4e2a\u989d\u5916\u7684\u533a\u522b\u662f\u5f15\u7528\u662f\u4e00\u7c7b\u53ea\u501f\u7528\u6570\u636e\u7684\u6307\u9488\uff1b\n  - \u76f8\u53cd\uff0c\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u667a\u80fd\u6307\u9488 \u62e5\u6709 \u5b83\u4eec\u6307\u5411\u7684\u6570\u636e\u3002\n\n## \u4f7f\u7528 `Box<T>` \u6307\u5411\u5806\u4e0a\u7684\u6570\u636e\n\nbox \u5141\u8bb8\u4f60\u5c06\u4e00\u4e2a\u503c\u653e\u5728\u5806\u4e0a\u800c\u4e0d\u662f\u6808\u4e0a\u3002\n\u7559\u5728\u6808\u4e0a\u7684\u5219\u662f\u6307\u5411\u5806\u6570\u636e\u7684\u6307\u9488\u3002\n\n- \u5f53\u6709\u4e00\u4e2a\u5728\u7f16\u8bd1\u65f6\u672a\u77e5\u5927\u5c0f\u7684\u7c7b\u578b\uff0c\u800c\u53c8\u60f3\u8981\u5728\u9700\u8981\u786e\u5207\u5927\u5c0f\u7684\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u578b\u503c\u7684\u65f6\u5019\n- \u5f53\u6709\u5927\u91cf\u6570\u636e\u5e76\u5e0c\u671b\u5728\u786e\u4fdd\u6570\u636e\u4e0d\u88ab\u62f7\u8d1d\u7684\u60c5\u51b5\u4e0b\u8f6c\u79fb\u6240\u6709\u6743\u7684\u65f6\u5019\n- \u5f53\u5e0c\u671b\u62e5\u6709\u4e00\u4e2a\u503c\u5e76\u53ea\u5173\u5fc3\u5b83\u7684\u7c7b\u578b\u662f\u5426\u5b9e\u73b0\u4e86\u7279\u5b9a trait \u800c\u4e0d\u662f\u5176\u5177\u4f53\u7c7b\u578b\u7684\u65f6\u5019\n\n```rust\nfn main() {\n    let x = 5;\n    let y = Box::new(x);\n\n    assert_eq!(5, x);\n    assert_eq!(5, *y); // \u50cf\u5f15\u7528\u4e00\u6837\u4f7f\u7528 Box<T>\n}\n```\n\n```rust\n// \u6ca1\u6709\u4f7f\u7528\u667a\u80fd\u6307\u9488\uff0c\u7f16\u8bd1\u9519\u8bef\n// \u7f16\u8bd1\u5668\u65e0\u6cd5\u77e5\u9053 List \u5360\u7528\u5185\u5b58\u5927\u5c0f\nenum List {\n    Cons(i32, List),\n    Nil,\n}\nuse crate::List::{Cons, Nil};\nfn main() {\n    let list = Cons(1, Cons(2, Cons(3, Nil)));\n}\n```\n\n```rust\n// \u4f7f\u7528\u667a\u80fd\u6307\u9488\nenum List {\n    Cons(i32, Box<List>),\n    Nil,\n}\nuse crate::List::{Cons, Nil};\nfn main() {\n    let list = Cons(1,\n        Box::new(Cons(2,\n            Box::new(Cons(3,\n                Box::new(Nil))))));\n}\n```\n\n## \u81ea\u5b9a\u4e49\u667a\u80fd\u6307\u9488\n\n```rust\nuse std::ops::Deref;\n\nstruct MyBox<T>(T); // \u5143\u7ec4\u7ed3\u6784\u4f53\nimpl<T> MyBox<T> {\n    fn new(x: T) -> MyBox<T> {\n        MyBox(x)\n    }\n}\n// \u5b9e\u73b0 Deref trait \u7684 deref \u65b9\u6cd5\nimpl<T> Deref for MyBox<T> {\n    // \u8bed\u6cd5\u5b9a\u4e49\u4e86\u7528\u4e8e\u6b64 trait \u7684\u5173\u8054\u7c7b\u578b\u3002\n    type Target = T;\n    // \u8f93\u5165 *y \u65f6\uff0cRust \u4e8b\u5b9e\u4e0a\u5728\u5e95\u5c42\u8fd0\u884c\u4e86\u5982\u4e0b\u4ee3\u7801\n    // *(y.deref())\n    // * \u89e3\u5f15\u7528\u7684\u64cd\u4f5c\uff0c\u4e14\u53ea\u4f1a\u53d1\u751f\u4e00\u6b21\uff0c\u4e0d\u4f1a\u5bf9 * \u64cd\u4f5c\u7b26\u65e0\u9650\u9012\u5f52\u66ff\u6362\n    fn deref(&self) -> &T {\n        &self.0\n    }\n}\n// \u53c2\u6570\u53ef\u4ee5\u662f &i32 \u6216 &MyBox<i32>\nfn use_deref(n: &i32) -> &i32 {\n    n\n}\n\n// \u53c2\u6570\u53ef\u4ee5\u662f &str \u6216 &String \u6216 &MyBox<String>\nfn hello(name: &str) {\n    println!("Hello, {}!", name);\n}\n\nfn main() {\n    let x = 5;\n    let y = MyBox::new(x);\n    assert_eq!(5, x);\n\n    assert_eq!(5, *use_deref(&x));\n    // \u53c2\u6570\u9700\u8981 &i32 \u7c7b\u578b\uff0c\u4f20\u5165 &MyBox<i32> \u4f1a\u5f3a\u5236\u8f6c\u6362\n    assert_eq!(5, *use_deref(&y));\n\n    let m = &String::from("Rust");\n    hello(&m);\n\n    // \u5982\u679c Rust \u6ca1\u6709\u89e3\u5f15\u7528\u5f3a\u5236\u8f6c\u6362\n    let m = MyBox::new(String::from("Rust"));\n    hello(&(*m)[..]);\n\n    // \u5f53\u6240\u6d89\u53ca\u5230\u7684\u7c7b\u578b\u5b9a\u4e49\u4e86 `Deref trait`\uff0c\n    // Rust \u4f1a\u5206\u6790\u8fd9\u4e9b\u7c7b\u578b\u5e76\u4f7f\u7528\u4efb\u610f\u591a\u6b21 `Deref::deref` \u8c03\u7528\u4ee5\u83b7\u5f97\u5339\u914d\u53c2\u6570\u7684\u7c7b\u578b\u3002\n    // \u8fd9\u91cc\u8fdb\u884c\u4e86\u4e24\u6b21\u8f6c\u6362\n    // &MyBox<String> -> &String\n    // &String -> &str\n    let m = MyBox::new(String::from("Rust"));\n    hello(&m);\n}\n```\n\n## \u51fd\u6570\u548c\u65b9\u6cd5\u7684\u9690\u5f0f\u89e3\u5f15\u7528\u5f3a\u5236\u8f6c\u6362\uff08deref coercions\uff09\n\n- \u89e3\u5f15\u7528\u5f3a\u5236\u8f6c\u6362\uff08deref coercions\uff09\u662f Rust \u5728\u51fd\u6570\u6216\u65b9\u6cd5\u4f20\u53c2\u4e0a\u7684\u4e00\u79cd\u4fbf\u5229\u3002\n- \u89e3\u5f15\u7528\u5f3a\u5236\u8f6c\u6362\u53ea\u80fd\u5de5\u4f5c\u5728\u5b9e\u73b0\u4e86 `Deref trait` \u7684\u7c7b\u578b\u4e0a\u3002\n- \u89e3\u5f15\u7528\u5f3a\u5236\u8f6c\u6362\u5c06\u4e00\u79cd\u7c7b\u578b\uff08A\uff09\u9690\u5f0f\u8f6c\u6362\u4e3a\u53e6\u5916\u4e00\u79cd\u7c7b\u578b\uff08B\uff09\u7684\u5f15\u7528\uff0c\n  \u56e0\u4e3a A \u7c7b\u578b\u5b9e\u73b0\u4e86 Deref trait\uff0c\n  \u5e76\u4e14\u5176\u5173\u8054\u7c7b\u578b\u662f B \u7c7b\u578b\u3002\n- \u6bd4\u5982\uff0c\u89e3\u5f15\u7528\u5f3a\u5236\u8f6c\u6362\u53ef\u4ee5\u5c06 `&String` \u8f6c\u6362\u4e3a `&str`\uff0c\n  \u56e0\u4e3a\u7c7b\u578b `String` \u5b9e\u73b0\u4e86 `Deref trait` \u5e76\u4e14\u5176\u5173\u8054\u7c7b\u578b\u662f `str`\u3002\n- \u5f53\u6240\u6d89\u53ca\u5230\u7684\u7c7b\u578b\u5b9a\u4e49\u4e86 `Deref trait`\uff0cRust \u4f1a\u5206\u6790\u8fd9\u4e9b\u7c7b\u578b\u5e76\u4f7f\u7528\u4efb\u610f\u591a\u6b21 `Deref::deref` \u8c03\u7528\u4ee5\u83b7\u5f97\u5339\u914d\u53c2\u6570\u7684\u7c7b\u578b\u3002\n\nRust \u5728\u53d1\u73b0\u7c7b\u578b\u548c trait \u5b9e\u73b0\u6ee1\u8db3\u4e09\u79cd\u60c5\u51b5\u65f6\u4f1a\u8fdb\u884c\u89e3\u5f15\u7528\u5f3a\u5236\u8f6c\u6362\uff1a\n\n- \u5f53 `T: Deref<Target=U>` \u65f6\u4ece `&T` \u5230 `&U`\u3002\n- \u5f53 `T: DerefMut<Target=U>` \u65f6\u4ece `&mut T` \u5230 `&mut U`\u3002\n- \u5f53 `T: Deref<Target=U>` \u65f6\u4ece `&mut T` \u5230 `&U`\u3002\n\n```rust\n#[stable(feature = "rust1", since = "1.0.0")]\nimpl ops::Deref for String {\n    type Target = str; // \u5173\u8054\u7c7b\u578b\u662f `str`\n    #[inline]\n    fn deref(&self) -> &str {\n        unsafe { str::from_utf8_unchecked(&self.vec) }\n    }\n}\n```\n\n## \u4f7f\u7528 Drop Trait \u8fd0\u884c\u6e05\u7406\u4ee3\u7801\n\n```rust\nstruct CustomSmartPointer {\n    data: String,\n}\n\nimpl Drop for CustomSmartPointer {\n    fn drop(&mut self) {\n        println!("Dropping CustomSmartPointer with data `{}`!", self.data);\n    }\n}\n\nfn main() {\n    let c = CustomSmartPointer { data: String::from("my stuff") };\n    let d = CustomSmartPointer { data: String::from("other stuff") };\n    println!("CustomSmartPointers created.");\n}\n```\n\n```rust\nfn main() {\n    let c = CustomSmartPointer { data: String::from("some data") };\n    println!("CustomSmartPointer created.");\n    // \u901a\u8fc7 std::mem::drop \u63d0\u65e9\u4e22\u5f03\u503c\n    drop(c);\n    println!("CustomSmartPointer dropped before the end of main.");\n}\n```\n\n## `Rc<T>` \u5f15\u7528\u8ba1\u6570\u667a\u80fd\u6307\u9488\n\n- Rust \u6709\u4e00\u4e2a\u53eb\u505a `Rc<T>` \u7684\u7c7b\u578b\u3002\u5176\u540d\u79f0\u4e3a \u5f15\u7528\u8ba1\u6570\uff08reference counting\uff09\u7684\u7f29\u5199\u3002\n- `Rc<T>` \u53ea\u80fd\u7528\u4e8e\u5355\u7ebf\u7a0b\u573a\u666f\n\n- \u4fee\u6539 `List` \u7684\u5b9a\u4e49\u4e3a\u4f7f\u7528 `Rc<T>` \u4ee3\u66ff `Box<T>`\n- \u6bcf\u6b21\u8c03\u7528 `Rc::clone`\uff0c`Rc<List>` \u4e2d\u6570\u636e\u7684\u5f15\u7528\u8ba1\u6570\u90fd\u4f1a\u589e\u52a0\uff0c\u76f4\u5230\u6709\u96f6\u4e2a\u5f15\u7528\u4e4b\u524d\u5176\u6570\u636e\u90fd\u4e0d\u4f1a\u88ab\u6e05\u7406\u3002\n- \u4e5f\u53ef\u4ee5\u8c03\u7528 `a.clone()` \u800c\u4e0d\u662f `Rc::clone(&a)`\n- `Rc::clone` \u7684\u5b9e\u73b0\u5e76\u4e0d\u50cf\u5927\u90e8\u5206\u7c7b\u578b\u7684 clone \u5b9e\u73b0\u90a3\u6837\u5bf9\u6240\u6709\u6570\u636e\u8fdb\u884c\u6df1\u62f7\u8d1d\u3002\n  `Rc::clone` \u53ea\u4f1a\u589e\u52a0\u5f15\u7528\u8ba1\u6570\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u82b1\u8d39\u591a\u5c11\u65f6\u95f4\u3002\n\n```rust\nenum List {\n    Cons(i32, Rc<List>),\n    Nil,\n}\nuse crate::List::{Cons, Nil};\nuse std::rc::Rc\nfn main() {\n    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));\n    // \u8c03\u7528 Rc::clone \u51fd\u6570\u5e76\u4f20\u9012 a \u4e2d Rc<List> \u7684\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\u3002\n    let b = Cons(3, Rc::clone(&a));\n    let c = Cons(4, Rc::clone(&a));\n}\n```\n\n```rust\n// \u6253\u5370\u51fa\u5f15\u7528\u8ba1\u6570\n// count after creating a = 1\n// count after creating b = 2\n// count after creating c = 3\n// count after c goes out of scope = 2\nfn main() {\n    let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));\n    println!("count after creating a = {}", Rc::strong_count(&a));\n    let b = Cons(3, Rc::clone(&a));\n    println!("count after creating b = {}", Rc::strong_count(&a));\n    {\n        let c = Cons(4, Rc::clone(&a));\n        println!("count after creating c = {}", Rc::strong_count(&a));\n    }\n    println!("count after c goes out of scope = {}", Rc::strong_count(&a));\n}\n```\n\n## `RefCell<T>` \u548c\u5185\u90e8\u53ef\u53d8\u6027\u6a21\u5f0f\n\n- `RefCell<T>` \u8bb0\u5f55\u5f53\u524d\u6709\u591a\u5c11\u4e2a\u6d3b\u52a8\u7684 `Ref<T>` \u548c `RefMut<T>` \u667a\u80fd\u6307\u9488\u3002\n- \u6bcf\u6b21\u8c03\u7528 `borrow`\uff0c`RefCell<T>` \u5c06\u6d3b\u52a8\u7684\u4e0d\u53ef\u53d8\u501f\u7528\u8ba1\u6570\u52a0\u4e00\u3002\n- \u5f53 `Ref<T>` \u503c\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\uff0c\u4e0d\u53ef\u53d8\u501f\u7528\u8ba1\u6570\u51cf\u4e00\u3002\n- `RefCell<T>` \u5728\u4efb\u4f55\u65f6\u5019\u53ea\u5141\u8bb8\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u501f\u7528\u6216\u4e00\u4e2a\u53ef\u53d8\u501f\u7528\u3002\n\n```rust\npub trait Messenger {\n    fn send(&self, msg: &str);\n}\npub struct LimitTracker<\'a, T: Messenger> {\n    messenger: &\'a T,\n    value: usize,\n    max: usize,\n}\nimpl<\'a, T> LimitTracker<\'a, T>\n    where T: Messenger {\n    pub fn new(messenger: &T, max: usize) -> LimitTracker<T> {\n        LimitTracker {\n            messenger,\n            value: 0,\n            max,\n        }\n    }\n    pub fn set_value(&mut self, value: usize) {\n        self.value = value;\n\n        let percentage_of_max = self.value as f64 / self.max as f64;\n\n        if percentage_of_max >= 1.0 {\n            self.messenger.send("Error: You are over your quota!");\n        } else if percentage_of_max >= 0.9 {\n             self.messenger.send("Urgent warning: You\'ve used up over 90% of your quota!");\n        } else if percentage_of_max >= 0.75 {\n            self.messenger.send("Warning: You\'ve used up over 75% of your quota!");\n        }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use std::cell::RefCell;\n    struct MockMessenger {\n        sent_messages: RefCell<Vec<String>>,\n    }\n    impl MockMessenger {\n        fn new() -> MockMessenger {\n            MockMessenger { sent_messages: RefCell::new(vec![]) }\n        }\n    }\n    impl Messenger for MockMessenger {\n        fn send(&self, message: &str) {\n            // borrow_mut \u65b9\u6cd5\u8fd4\u56de RefMut<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\n            self.sent_messages.borrow_mut().push(String::from(message));\n        }\n    }\n    #[test]\n    fn it_sends_an_over_75_percent_warning_message() {\n        let mock_messenger = MockMessenger::new();\n        let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);\n        limit_tracker.set_value(80);\n        // borrow \u65b9\u6cd5\u8fd4\u56de Ref<T> \u7c7b\u578b\u7684\u667a\u80fd\u6307\u9488\n        assert_eq!(mock_messenger.sent_messages.borrow().len(), 1);\n    }\n}\n```\n\n## \u7ed3\u5408 `Rc<T>` \u548c `RefCell<T>` \u6765\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u6570\u636e\u6240\u6709\u8005\n\n```rust\n#[derive(Debug)]\nenum List {\n    Cons(Rc<RefCell<i32>>, Rc<List>),\n    Nil,\n}\n\nuse crate::List::{Cons, Nil};\nuse std::rc::Rc;\nuse std::cell::RefCell;\n\nfn main() {\n    let value = Rc::new(RefCell::new(5));\n    let a = Rc::new(Cons(Rc::clone(&value), Rc::new(Nil)));\n    let b = Cons(Rc::new(RefCell::new(6)), Rc::clone(&a));\n    let c = Cons(Rc::new(RefCell::new(10)), Rc::clone(&a));\n    // borrow_mut \u65b9\u6cd5\u8fd4\u56de RefMut<T> \u667a\u80fd\u6307\u9488\uff0c\u53ef\u4ee5\u5bf9\u5176\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\u5e76\u4fee\u6539\u5176\u5185\u90e8\u503c\u3002\n    *value.borrow_mut() += 10;\n    println!("a after = {:?}", a);\n    println!("b after = {:?}", b);\n    println!("c after = {:?}", c);\n}\n// a after = Cons(RefCell { value: 15 }, Nil)\n// b after = Cons(RefCell { value: 6 }, Cons(RefCell { value: 15 }, Nil))\n// c after = Cons(RefCell { value: 10 }, Cons(RefCell { value: 15 }, Nil))\n```\n\n## \u5f15\u7528\u5faa\u73af\u4e0e\u5185\u5b58\u6cc4\u6f0f\n\n```rust\nuse crate::List::{Cons, Nil};\nuse std::rc::Rc;\nuse std::cell::RefCell;\n#[derive(Debug)]\nenum List {\n    Cons(i32, RefCell<Rc<List>>),\n    Nil,\n}\n\nimpl List {\n    fn tail(&self) -> Option<&RefCell<Rc<List>>> {\n        match self {\n            Cons(_, item) => Some(item),\n            Nil => None,\n        }\n    }\n}\n\nfn main() {\n    let a = Rc::new(Cons(5, RefCell::new(Rc::new(Nil))));\n\n    println!("a initial rc count = {}", Rc::strong_count(&a));\n    println!("a next item = {:?}", a.tail());\n\n    let b = Rc::new(Cons(10, RefCell::new(Rc::clone(&a))));\n\n    println!("a rc count after b creation = {}", Rc::strong_count(&a));\n    println!("b initial rc count = {}", Rc::strong_count(&b));\n    println!("b next item = {:?}", b.tail());\n\n    if let Some(link) = a.tail() {\n        // \u521b\u5efa\u5f15\u7528\u5faa\u73af\n        *link.borrow_mut() = Rc::clone(&b);\n    }\n\n    println!("b rc count after changing a = {}", Rc::strong_count(&b));\n    println!("a rc count after changing a = {}", Rc::strong_count(&a));\n\n    // Uncomment the next line to see that we have a cycle;\n    // it will overflow the stack\n    // println!("a next item = {:?}", a.tail());\n}\n```\n\n## \u907f\u514d\u5f15\u7528\u5faa\u73af\uff1a\u5c06 `Rc<T>` \u53d8\u4e3a `Weak<T>`\n\n```rust\nuse std::rc::{Rc, Weak};\nuse std::cell::RefCell;\n\n#[derive(Debug)]\nstruct Node {\n    value: i32,\n    parent: RefCell<Weak<Node>>,\n    children: RefCell<Vec<Rc<Node>>>,\n}\n\nfn main() {\n    // leaf \u5f00\u59cb\u65f6\u6ca1\u6709\u7236\u8282\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u65b0\u5efa\u4e86\u4e00\u4e2a\u7a7a\u7684 Weak \u5f15\u7528\u5b9e\u4f8b\u3002\n    let leaf = Rc::new(Node {\n        value: 3,\n        parent: RefCell::new(Weak::new()),\n        children: RefCell::new(vec![]),\n    });\n\n    println!(\n        "leaf strong = {}, weak = {}",\n        Rc::strong_count(&leaf),\n        Rc::weak_count(&leaf),\n    );\n\n    {\n        let branch = Rc::new(Node {\n            value: 5,\n            parent: RefCell::new(Weak::new()),\n            children: RefCell::new(vec![Rc::clone(&leaf)]),\n        });\n\n        // \u4fee\u6539 leaf \u4f7f\u5176\u62e5\u6709\u6307\u5411\u7236\u8282\u70b9\u7684 Weak<Node> \u5f15\u7528\u3002\n        // \u4f7f\u7528\u4e86 Rc::downgrade \u51fd\u6570\u521b\u5efa\u4e86\u4e00\u4e2a\u6307\u5411 branch \u7684 Weak<Node> \u5f15\u7528\u3002\n        *leaf.parent.borrow_mut() = Rc::downgrade(&branch);\n\n        println!(\n            "branch strong = {}, weak = {}",\n            Rc::strong_count(&branch),\n            Rc::weak_count(&branch),\n        );\n\n        println!(\n            "leaf strong = {}, weak = {}",\n            Rc::strong_count(&leaf),\n            Rc::weak_count(&leaf),\n        );\n    }\n\n    println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());\n    println!(\n        "leaf strong = {}, weak = {}",\n        Rc::strong_count(&leaf),\n        Rc::weak_count(&leaf),\n    );\n}\n```\n'},"5lXH":function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport "fmt"\n\nfunc add(x int, y int) int {\n\treturn x + y\n}\n\nfunc main() {\n\tfmt.Println(add(42, 13))\n}\n```\n\n\u5f53\u8fde\u7eed\u4e24\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u7684\u5df2\u547d\u540d\u5f62\u53c2\u7c7b\u578b\u76f8\u540c\u65f6\uff0c\u9664\u6700\u540e\u4e00\u4e2a\u7c7b\u578b\u4ee5\u5916\uff0c\u5176\u5b83\u90fd\u53ef\u4ee5\u7701\u7565\u3002\n\n```go\npackage main\n\nimport "fmt"\n\nfunc add(x, y int) int {\n\treturn x + y\n}\n\nfunc main() {\n\tfmt.Println(add(42, 13))\n}\n```\n\n\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f\u6570\u91cf\u7684\u8fd4\u56de\u503c\u3002\n\n```go\npackage main\n\nimport "fmt"\n\nfunc swap(x, y string) (string, string) {\n\treturn y, x\n}\n\nfunc main() {\n\ta, b := swap("hello", "world")\n\tfmt.Println(a, b)\n}\n```\n\n### \u547d\u540d\u8fd4\u56de\u503c\n\nGo \u7684\u8fd4\u56de\u503c\u53ef\u88ab\u547d\u540d\uff0c\u5b83\u4eec\u4f1a\u88ab\u89c6\u4f5c\u5b9a\u4e49\u5728\u51fd\u6570\u9876\u90e8\u7684\u53d8\u91cf\u3002\n\n\u8fd4\u56de\u503c\u7684\u540d\u79f0\u5e94\u5f53\u5177\u6709\u4e00\u5b9a\u7684\u610f\u4e49\uff0c\u5b83\u53ef\u4ee5\u4f5c\u4e3a\u6587\u6863\u4f7f\u7528\u3002\n\n\u6ca1\u6709\u53c2\u6570\u7684 return \u8bed\u53e5\u8fd4\u56de\u5df2\u547d\u540d\u7684\u8fd4\u56de\u503c\u3002\u4e5f\u5c31\u662f \u76f4\u63a5 \u8fd4\u56de\u3002\n\n\u76f4\u63a5\u8fd4\u56de\u8bed\u53e5\u5e94\u5f53\u4ec5\u7528\u5728\u4e0b\u9762\u8fd9\u6837\u7684\u77ed\u51fd\u6570\u4e2d\u3002\u5728\u957f\u7684\u51fd\u6570\u4e2d\u5b83\u4eec\u4f1a\u5f71\u54cd\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u3002\n\n```go\npackage main\n\nimport "fmt"\n\nfunc split(sum int) (x, y int) {\n\tx = sum * 4 / 9\n\ty = sum - x\n\treturn\n}\n\nfunc main() {\n\tfmt.Println(split(17))\n}\n```\n'},"5zGp":function(n,t,e){"use strict";e.r(t),t.default='```python\nstring_1 = "1"\nnumber_1 = int(string_1)\n# 3\nprint(number_1 + 2)\n```\n\n```python\nimport math\n\n# 2\nprint(math.ceil(1.5))\n# 1\nprint(math.floor(1.5))\n# 2\nprint(round(1.5))\n```\n'},"5zx0":function(n,t,e){"use strict";e.r(t),t.default="```b\nmain(){\n  extrn a,b,c;\n  putchar(a); putchar(b); putchar(c); putchar('!*n');\n  }\n\na 'hell';\nb 'o, w';\nc 'orld';\n```\n\n\u4e8e 1972 \u5e74\uff0c\u8d1d\u5c14\u5b9e\u9a8c\u5ba4\u6210\u5458\u5e03\u83b1\u6069\xb7\u67ef\u6797\u6c49\u64b0\u5199\u7684\u5185\u90e8\u6280\u672f\u6587\u4ef6\u300aA Tutorial Introduction to the Language B\u300b\n\u9996\u6b21\u63d0\u5230\u4e86`Hello World`\u8fd9\u5b57\u7b26\u4e32\u3002\n\u5f53\u65f6\uff0c\u4ed6\u4f7f\u7528 B \u8bed\u8a00\u64b0\u5199\u4e86\u7b2c\u4e00\u4e2a\u4f7f\u7528\u53c2\u6570\u7684`Hello World`\u76f8\u5173\u7a0b\u5e8f\uff1a\n"},"623g":function(n,t,e){"use strict";e.r(t),t.default="mirror \u7cfb\u7edf\u4f7f\u7528 Symbol \u7c7b\u5bf9\u8c61 \u6765\u8868\u8fbe\u5b9a\u4e49\u7684 Dart \u6807\u8bc6\u7b26\u540d\u5b57\u3002\nSymbols \u5728\u6df7\u6dc6\u540e\u7684\u4ee3\u7801\u4e5f\u53ef\u4ee5 \u4f7f\u7528\u3002\n\n\u5982\u679c\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\uff0c\u5df2\u7ecf\u77e5\u9053 symbol \u7684\u540d\u5b57\u4e86\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 #\u7b26\u53f7\u540d\u5b57 \u7684\u65b9\u5f0f\u76f4\u63a5\u4f7f\u7528\u3002\n\u76f4\u63a5\u4f7f\u7528\u7684 symbol \u5bf9\u8c61\u662f\u7f16\u8bd1\u65f6\u5e38\u91cf\uff0c\u591a\u6b21\u5b9a\u4e49\u5f15\u7528\u7684\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\u3002\n\u5982\u679c\u540d\u5b57\u4e0d\u77e5\u9053\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7 Symbol \u6784\u9020\u51fd\u6570\u6765 \u521b\u5efa\n\n```dart\nimport 'dart:mirrors';\n\n// If the symbol name is known at compile time.\nconst className = #MyClass;\n\n// If the symbol name is dynamically determined.\nvar userInput = askUserForNameOfFunction();\nvar functionName = new Symbol(userInput);\n\n// \u8981\u83b7\u53d6\u539f\u6765\u7684 symbol \u540d\u5b57\uff0c\u4f7f\u7528 MirrorSystem.getName() \u51fd\u6570\u3002\nimport 'dart:mirrors';\nconst className = #MyClass;\nassert('MyClass' == MirrorSystem.getName(className));\n```\n"},"64IH":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u8ba1\u6570\u6392\u5e8f\n---\n"},"6O9g":function(n,t,e){"use strict";e.r(t),t.default="```rust\n// \u65e0\u6cdb\u578b\nfn largest_i32(list: &[i32]) -> i32 {\n    let mut largest = list[0];\n    for &item in list.iter() {\n        if item > largest {\n            largest = item;\n        }\n    }\n    largest\n}\n\nfn largest_char(list: &[char]) -> char {\n    let mut largest = list[0];\n    for &item in list.iter() {\n        if item > largest {\n            largest = item;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n    let result = largest_i32(&number_list);\n    println!(\"The largest number is {}\", result);\n\n    let char_list = vec!['y', 'm', 'a', 'q'];\n    let result = largest_char(&char_list);\n    println!(\"The largest char is {}\", result);\n}\n```\n\n```rust\n// \u4f7f\u7528\u6cdb\u578b\n// fn largest<T>(list: &[T]) -> T {\n//     let mut largest = list[0];\n//     for &item in list.iter() {\n//         if item > largest {\n//             largest = item;\n//         }\n//     }\n//     largest\n// }\nfn largest<T: PartialOrd + Copy>(list: &[T]) -> T {\n    let mut largest = list[0];\n    for &item in list.iter() {\n        if item > largest {\n            largest = item;\n        }\n    }\n    largest\n}\n\nfn main() {\n    let number_list = vec![34, 50, 25, 100, 65];\n    let result = largest(&number_list);\n    println!(\"The largest number is {}\", result);\n\n    let char_list = vec!['y', 'm', 'a', 'q'];\n    let result = largest(&char_list);\n    println!(\"The largest char is {}\", result);\n}\n```\n\n## \u51fd\u6570\u4e2d\u7684\u6cdb\u578b\n\n```rust\nstruct SGen<T>(T); // \u6cdb\u578b\u7c7b\u578b `SGen`\u3002\n// \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570 `generic`\uff0c\u63a5\u53d7\u4e00\u4e2a `SGen<T>` \u7c7b\u578b\u7684\u53c2\u6570 `_s`\u3002\n// \u56e0\u4e3a `SGen<T>` \u4e4b\u524d\u6709 `<T>`\uff0c\u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u662f\u5173\u4e8e `T` \u7684\u6cdb\u578b\u51fd\u6570\u3002\nfn generic<T>(_s: SGen<T>) {}\nfn main() {\n    // \u4e3a `generic()` \u663e\u5f0f\u5730\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 `char`\u3002\n    generic::<char>(SGen('a'));\n\n    // \u4e3a `generic()` \u9690\u5f0f\u5730\u6307\u5b9a\u7c7b\u578b\u53c2\u6570 `char`\u3002\n    generic(SGen('c'));\n}\n```\n\n## \u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u7684\u6cdb\u578b\n\n```rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\nfn main() {\n    let integer = Point { x: 5, y: 10 };\n    let float = Point { x: 1.0, y: 4.0 };\n}\n```\n\n```rust\nstruct Point<T, U> {\n    x: T,\n    y: U,\n}\nfn main() {\n    let both_integer = Point { x: 5, y: 10 };\n    let both_float = Point { x: 1.0, y: 4.0 };\n    let integer_and_float = Point { x: 5, y: 4.0 };\n}\n```\n\n## \u679a\u4e3e\u5b9a\u4e49\u4e2d\u7684\u6cdb\u578b\n\n```rust\nenum Option<T> {\n    Some(T),\n    None,\n}\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\n## \u65b9\u6cd5\u5b9a\u4e49\u4e2d\u7684\u6cdb\u578b\n\n```rust\nstruct Point<T> {\n    x: T,\n    y: T,\n}\n// \u5728 impl \u4e4b\u540e\u58f0\u660e\u6cdb\u578b T \uff0c\u8fd9\u6837 Rust \u5c31\u77e5\u9053 Point \u7684\u5c16\u62ec\u53f7\u4e2d\u7684\u7c7b\u578b\u662f\u6cdb\u578b\u800c\u4e0d\u662f\u5177\u4f53\u7c7b\u578b\u3002\nimpl<T> Point<T> {\n    fn x(&self) -> &T {\n        &self.x\n    }\n}\n// \u53ef\u4ee5\u9009\u62e9\u4e3a Point<f32> \u5b9e\u4f8b\u5b9e\u73b0\u65b9\u6cd5\uff0c\u800c\u4e0d\u662f\u4e3a\u6cdb\u578b Point \u5b9e\u4f8b\u3002\n// \u610f\u5473\u7740 Point<f32> \u7c7b\u578b\u4f1a\u6709\u4e00\u4e2a\u65b9\u6cd5 distance_from_origin\uff0c\n// \u800c\u5176\u4ed6 T \u4e0d\u662f f32 \u7c7b\u578b\u7684 Point<T> \u5b9e\u4f8b\u5219\u6ca1\u6709\u5b9a\u4e49\u6b64\u65b9\u6cd5\u3002\nimpl Point<f32> {\n    fn distance_from_origin(&self) -> f32 {\n        (self.x.powi(2) + self.y.powi(2)).sqrt()\n    }\n}\nfn main() {\n    let p = Point { x: 5, y: 10 };\n    println!(\"p.x = {}\", p.x());\n}\n```\n\n```rust\nstruct Point<T, U> {\n    x: T,\n    y: U,\n}\nimpl<T, U> Point<T, U> {\n    // \u65b9\u6cd5\u4f7f\u7528\u4e86\u4e0e\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u4e0d\u540c\u7c7b\u578b\u7684\u6cdb\u578b\n    fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {\n        Point {\n            x: self.x,\n            y: other.y,\n        }\n    }\n}\nfn main() {\n    let p1 = Point { x: 5, y: 10.4 };\n    let p2 = Point { x: \"Hello\", y: 'c'};\n    let p3 = p1.mixup(p2);\n    println!(\"p3.x = {}, p3.y = {}\", p3.x, p3.y);\n}\n```\n"},"6kmC":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6253\u70b9\u5668\n---\n"},"6riT":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5bf9\u8c61\n---\n"},"6wBI":function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// ShellSort \u5e0c\u5c14\u6392\u5e8f\n// \u5206\u7ec4\u505a\u63d2\u5165\u6392\u5e8f\uff0c\u5206\u7ec4\u8d8a\u6765\u8d8a\u5c11\n// \u6700\u540e\u662f\u4e00\u7ec4\u505a\u63d2\u5165\u6392\u5e8f\nfunc ShellSort(arr []int) []int {\n\t// \u6bcf\u6b21\u5206\u7ec4\u90fd\u51cf\u534a\n\tfor step := len(arr) / 2; step > 0; step /= 2 {\n\t\t// \u5bf9\u6bcf\u4e00\u7ec4\u505a\u63d2\u5165\u6392\u5e8f\n\t\tfor i := 0; i < len(arr); i += step {\n\t\t\tfor j := i; j > 0; j -= step {\n\t\t\t\tif j-step >= 0 && arr[j] < arr[j-step] {\n\t\t\t\t\tarr[j], arr[j-step] = arr[j-step], arr[j]\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\treturn arr\n}\n\nfunc main() {\n\ta := []int{3, 6, 7, 4, 5, 1, 2}\n\tfmt.Println(ShellSort(a))\n}\n```\n\n\n```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// ShellSort \u5e0c\u5c14\u6392\u5e8f\nfunc ShellSort(arr []int) {\n\tfor step := len(arr) / 2; step > 0; step /= 2 {\n\t\tfor i := step; i < len(arr); i++ {\n\t\t\tj := i\n\t\t\tfor j >= step && arr[j] < arr[j-step] {\n\t\t\t\tarr[j], arr[j-step] = arr[j-step], arr[j]\n\t\t\t\tj = j - step\n\t\t\t}\n\t\t}\n\n\t}\n}\n\nfunc main() {\n\ta := []int{3, 6, 7, 4, 5, 1, 2}\n\tfmt.Println(ShellSort(a))\n}\n```'},"72+s":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u53cd\u8f6c\u63a7\u5236\n---\n"},"7JRX":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u56fe\n---\n"},"7K4Q":function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport "fmt"\n\nfunc fact(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * fact(n-1)\n}\n\nfunc main() {\n    fmt.Println(fact(7))\n\n    // \u95ed\u5305\u4e5f\u53ef\u4ee5\u662f\u9012\u5f52\u7684\uff0c\u4f46\u8fd9\u8981\u6c42\u5728\u5b9a\u4e49\u95ed\u5305\u4e4b\u524d\u7528\u7c7b\u578b\u5316\u7684 `var` \u663e\u5f0f\u58f0\u660e\u95ed\u5305\u3002\n    var fib func(n int) int\n    fib = func(n int) int {\n        if n < 2 {\n            return n\n        }\n        return fib(n-1) + fib(n-2)\n    }\n    fmt.Println(fib(7))\n}\n```\n'},"7OSX":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5b9a\u65f6\u5668\n---\n"},"7Wet":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6761\u4ef6\u9009\u62e9\n---"},"7mH5":function(n,t,e){"use strict";e.r(t),t.default='```js\nlet l = [1, 2, 3];\n\nvar arr = [1, 2, 3];\ntypeof arr; // "object"\nArray.isArray(arr); // true\n\nvar arr = [1, 2, 3];\narr.valueOf(); // [1, 2, 3]\n\nvar arr = [1, 2, 3];\narr.toString(); // "1,2,3"\nvar arr = [1, 2, 3, [4, 5, 6]];\narr.toString(); // "1,2,3,4,5,6"\n\nvar arr = [];\narr.push(1, 2);\narr.push(3);\narr.pop();\narr; // [1, 2]\n\nvar a = ["a", "b", "c"];\na.shift(); // \'a\'\na; // [\'b\', \'c\']\n\nvar a = ["a", "b", "c"];\na.unshift("x"); // 4\na; // [\'x\', \'a\', \'b\', \'c\']\n\nvar a = [1, 2, 3, 4];\na.join(" "); // \'1 2 3 4\'\na.join(" | "); // "1 | 2 | 3 | 4"\na.join() // "1,2,3,4"\n\n  ["hello"].concat(["world"])\n  [\n    // ["hello", "world"]\n    "hello"\n  ].concat(["world"], ["!"])\n  [\n    // ["hello", "world", "!"]\n    (1, 2, 3)\n  ].concat(4, 5, 6);\n// [1, 2, 3, 4, 5, 6]\n\nvar a = ["a", "b", "c"];\na.reverse(); // ["c", "b", "a"]\na; // ["c", "b", "a"]\n\n// arr.slice(start, end);\nvar a = ["a", "b", "c"];\na.slice(0); // ["a", "b", "c"]\na.slice(1); // ["b", "c"]\na.slice(1, 2); // ["b"]\na.slice(2, 6); // ["c"]\na.slice(); // ["a", "b", "c"]\n\nvar a = ["a", "b", "c"];\na.slice(-2); // ["b", "c"]\na.slice(-2, -1); // ["b"]\n\nvar a = ["a", "b", "c"];\na.slice(4); // []\na.slice(2, 1); // []\n\n// arr.splice(start, count, addElement1, addElement2, ...);\nvar a = ["a", "b", "c", "d", "e", "f"];\na.splice(4, 2); // ["e", "f"]\na[ // ["a", "b", "c", "d"]\n  // sort\u65b9\u6cd5\u5bf9\u6570\u7ec4\u6210\u5458\u8fdb\u884c\u6392\u5e8f\uff0c\u9ed8\u8ba4\u662f\u6309\u7167\u5b57\u5178\u987a\u5e8f\u6392\u5e8f\n  // \u6392\u5e8f\u540e\uff0c\u539f\u6570\u7ec4\u5c06\u88ab\u6539\u53d8\u3002\n  ("d", "c", "b", "a")\n]\n  .sort()\n  [\n    // [\'a\', \'b\', \'c\', \'d\']\n    (11, 101)\n  ].sort()\n  [\n    // [101, 11]\n\n    (10111, 1101, 111)\n  ].sort(function(a, b) {\n    return a - b;\n  })\n  [\n    // [111, 1101, 10111]\n\n    ({ name: "\u5f20\u4e09", age: 30 },\n    { name: "\u674e\u56db", age: 24 },\n    { name: "\u738b\u4e94", age: 28 })\n  ].sort(function(o1, o2) {\n    return o1.age - o2.age;\n  });\n// [\n//   { name: "\u674e\u56db", age: 24 },\n//   { name: "\u738b\u4e94", age: 28  },\n//   { name: "\u5f20\u4e09", age: 30 }\n// ]\n\nvar a = ["a", "b", "c"];\na.indexOf("b"); // 1\na.indexOf("y"); // -1\n\nvar users = [\n  { name: "tom", email: "tom@example.com" },\n  { name: "peter", email: "peter@example.com" },\n];\nusers\n  .map(function(user) {\n    return user.email;\n  })\n  .filter(function(email) {\n    return /^t/.test(email);\n  })\n  .forEach(function(email) {\n    console.log(email);\n  });\n// "tom@example.com"\n\nconst someList = ["a", "b", "c"];\n// a,b,c\nconsole.log(someList.join(","));\n\nconst someList = [6, 3, 5];\nconsole.log(someList.length);\n// 6\n// 3\n// 5\nsomeList.forEach((element) => {\n  console.log(element);\n});\n\n// 2 is in the list\nif ([1, 2, 3].includes(2)) {\n  console.log("2 is in the list");\n}\n\n// 2 is not in the list\nif (![4, 5, 6].includes(2)) {\n  console.log("2 is not in the list");\n}\n\nconst someList = [1, 2, 3, 4];\nsomeList.reverse();\n\n// 4\n// 3\n// 2\n// 1\nsomeList.forEach((element) => {\n  console.log(element);\n});\n\nconst someList = [1];\nsomeList.push(...[2, 3]);\n// 1\n// 2\n// 3\nsomeList.forEach((element) => {\n  console.log(element);\n});\n\nconst originalList = [1];\nconst newList = originalList.concat([2, 3]);\noriginalList[0] = 5;\n// 1\n// 2\n// 3\nnewList.forEach((element) => {\n  console.log(element);\n});\n\nconst someList = [4, 5];\nsomeList.unshift(3);\n// 3\n// 4\n// 5\nsomeList.forEach((element) => {\n  console.log(element);\n});\n\nconst someList = ["a", "b", "c"];\nsomeList.splice(1, 1);\n// a\n// c\nsomeList.forEach((element) => {\n  console.log(element);\n});\n\nconst someList = [1, 2, 3, 4];\n// 4\nconsole.log(someList.pop());\n// 1\nconsole.log(someList.shift());\n// 2\n// 3\nsomeList.forEach((element) => {\n  console.log(element);\n});\n\nconst someList = ["a", "b", "c", "d", "e"];\n// 2\nconsole.log(someList.indexOf("c"));\n\nconst originalList = [1, 2, 3];\nconst newList = [...originalList];\noriginalList[2] = 4;\n\n// 1\n// 2\n// 3\nnewList.forEach((element) => {\n  console.log(element);\n});\n\nconst someList = [1, 2, 3];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n// 6\nconsole.log(someList.reduce(reducer));\n```\n\n```js\nconst originalList = [1, 2, 3];\n// You can also do this:\n// const newList = originalList.map(x => { return x * 2 })\nconst newList = originalList.map((x) => x * 2);\n// 2\n// 4\n// 6\nnewList.forEach((element) => {\n  console.log(element);\n});\n\nconst firstList = [1, 3];\nconst secondList = [3, 4];\n// const conbinedList = firstList.map(x => {\n//   return secondList.map(y => {\n//     return x + y\n//   })\n// })\nconst conbinedList = firstList.map((x) => secondList.map((y) => x + y));\n// 4\nconsole.log(conbinedList[0][0]);\n// 5\nconsole.log(conbinedList[0][1]);\n// 6\nconsole.log(conbinedList[1][0]);\n// 7\nconsole.log(conbinedList[1][1]);\n\nconst originalList = [1, 2, 3, 4, 5, 6];\nconst newList = originalList.filter((x) => x % 2 == 0);\n// 2\n// 4\n// 6\nnewList.forEach((element) => {\n  console.log(element);\n});\n```\n\n## \u5217\u8868\u9ad8\u9636\u51fd\u6570\n\n```js\nvar numbers = [1, 2, 3];\nnumbers.map(function (n) {\n  return n + 1;\n});\n// [2, 3, 4]\n\nfunction log(element, index, array) {\n  console.log(\'[\' + index + \'] = \' + element);\n}\n[2, 5, 9].forEach(log);\n// [0] = 2\n// [1] = 5\n// [2] = 9\n\nvar out = [];\n[1, 2, 3].forEach(function(elem) {\n  this.push(elem * elem);\n}, out);\nout // [1, 4, 9]\n\n[1, 2, 3, 4, 5].filter(function (elem) {\n  return (elem > 3);\n})\n// [4, 5]\n\nvar arr = [0, 1, \'a\', false];\narr.filter(Boolean)\n// [1, "a"]\n\nvar arr = [1, 2, 3, 4, 5];\narr.some(function (elem, index, arr) {\n  return elem >= 3;\n});\n// true\n\nvar arr = [1, 2, 3, 4, 5];\narr.every(function (elem, index, arr) {\n  return elem >= 3;\n});\n// false\n\n// \u6ce8\u610f\uff0c\u5bf9\u4e8e\u7a7a\u6570\u7ec4\uff0csome\u65b9\u6cd5\u8fd4\u56defalse\uff0cevery\u65b9\u6cd5\u8fd4\u56detrue\uff0c\u56de\u8c03\u51fd\u6570\u90fd\u4e0d\u4f1a\u6267\u884c\u3002\nfunction isEven(x) { return x % 2 === 0 }\n[].some(isEven) // false\n[].every(isEven) // true\n\n[1, 2, 3, 4, 5].reduce(function (a, b) {\n  console.log(a, b);\n  return a + b;\n})\n// 1 2\n// 3 3\n// 6 4\n// 10 5\n//\u6700\u540e\u7ed3\u679c\uff1a15\n\nfunction subtract(prev, cur) {\n  return prev - cur;\n}\n[3, 2, 1].reduce(subtract) // 0\n[3, 2, 1].reduceRight(subtract) // -4\n```\n'},"7zPo":function(n,t,e){"use strict";e.r(t),t.default='- \u6bcf\u4e2a Go \u7a0b\u5e8f\u90fd\u662f\u7531\u5305\u6784\u6210\u7684\u3002\n- \u7a0b\u5e8f\u4ece `main` \u5305\u5f00\u59cb\u8fd0\u884c\u3002\n- \u6309\u7167\u7ea6\u5b9a\uff0c\u5305\u540d\u4e0e\u5bfc\u5165\u8def\u5f84\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e00\u81f4\u3002\n  \u4f8b\u5982\uff0c"math/rand" \u5305\u4e2d\u7684\u6e90\u7801\u5747\u4ee5 `package rand` \u8bed\u53e5\u5f00\u59cb\u3002\n- \u4f20\u6307\u9488\u6bd4\u8f83\u8f7b\u91cf\u7ea7 (8bytes),\u53ea\u662f\u4f20\u5185\u5b58\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6307\u9488\u4f20\u9012\u4f53\u79ef\u5927\u7684\u7ed3\u6784\u4f53\u3002\n  \u5982\u679c\u7528\u53c2\u6570\u503c\u4f20\u9012\u7684\u8bdd, \u5728\u6bcf\u6b21 copy \u4e0a\u9762\u5c31\u4f1a\u82b1\u8d39\u76f8\u5bf9\u8f83\u591a\u7684\u7cfb\u7edf\u5f00\u9500\uff08\u5185\u5b58\u548c\u65f6\u95f4\uff09\u3002\n  \u6240\u4ee5\u5f53\u4f60\u8981\u4f20\u9012\u5927\u7684\u7ed3\u6784\u4f53\u7684\u65f6\u5019\uff0c\u7528\u6307\u9488\u662f\u4e00\u4e2a\u660e\u667a\u7684\u9009\u62e9\u3002\n- Go \u8bed\u8a00\u4e2d channel\uff0cslice\uff0cmap \u8fd9\u4e09\u79cd\u7c7b\u578b\u7684\u5b9e\u73b0\u673a\u5236\u7c7b\u4f3c\u6307\u9488\uff0c\n  \u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f20\u9012\uff0c\u800c\u4e0d\u7528\u53d6\u5730\u5740\u540e\u4f20\u9012\u6307\u9488\u3002\n  \uff08\u6ce8\uff1a\u82e5\u51fd\u6570\u9700\u6539\u53d8 slice \u7684\u957f\u5ea6\uff0c\u5219\u4ecd\u9700\u8981\u53d6\u5730\u5740\u4f20\u9012\u6307\u9488\uff09\n\n```go\n// helloword.2.go\npackage main\nimport (\n  "fmt"\n  "time"\n)\nfunc main() {\n  fmt.Println("Welcome to the playground!")\n  fmt.Println("The time is", time.Now())\n}\n```\n\n\u4e00\u4e2a\u53d8\u91cf\u5c31\u662f\u4e00\u4e2a\u53ef\u5bfb\u5740\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u91cc\u9762\u5b58\u50a8\u4e86\u4e00\u4e2a\u503c\uff0c\n\u5e76\u4e14\u5b58\u50a8\u7684\u503c\u53ef\u4ee5\u901a\u8fc7\u5185\u5b58\u5730\u5740\u6765\u66f4\u65b0\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 reflect.ValueOf(&x).Elem()\uff0c\n\u6765\u83b7\u53d6\u4efb\u610f\u53d8\u91cf x \u5bf9\u5e94\u7684\u53ef\u53d6\u5730\u5740\u7684 Value\u3002\n\n```go\nx := 2                   // value   type    variable?\na := reflect.ValueOf(2)  // 2       int     no\nb := reflect.ValueOf(x)  // 2       int     no\nc := reflect.ValueOf(&x) // &x      *int    no\nd := c.Elem()            // 2       int     yes (x)\n\n// \u8c03\u7528reflect.Value\u7684CanAddr\u65b9\u6cd5\u6765\u5224\u65ad\u5176\u662f\u5426\u53ef\u4ee5\u88ab\u53d6\u5730\u5740\nfmt.Println(a.CanAddr()) // "false"\nfmt.Println(b.CanAddr()) // "false"\nfmt.Println(c.CanAddr()) // "false"\nfmt.Println(d.CanAddr()) // "true"\n\n// \u53e6\u4e00\u4e2a\u76f8\u5173\u7684\u65b9\u6cd5CanSet\u662f\u7528\u4e8e\u68c0\u67e5\u5bf9\u5e94\u7684reflect.Value\u662f\u5426\u662f\u53ef\u53d6\u5730\u5740\u5e76\u53ef\u88ab\u4fee\u6539\u7684\uff1a\nfmt.Println(fd.CanAddr(), fd.CanSet()) // "true false"\n```\n\n- \u5982\u679c\u9700\u8981\u628a\u6570\u5b57\u8f6c\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 `strconv.Itoa()` \u4f1a\u6bd4 `fmt.Sprintf()` \u8981\u5feb\u4e00\u500d\u5de6\u53f3\n- \u5c3d\u53ef\u80fd\u5730\u907f\u514d\u628a `String` \u8f6c\u6210`[]Byte` \u3002\u8fd9\u4e2a\u8f6c\u6362\u4f1a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\u3002\n- \u5982\u679c\u5728 for-loop \u91cc\u5bf9\u67d0\u4e2a slice \u4f7f\u7528 `append()`\u8bf7\u5148\u628a slice \u7684\u5bb9\u91cf\u5f88\u6269\u5145\u5230\u4f4d\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u5185\u5b58\u91cd\u65b0\u5206\u4eab\u4ee5\u53ca\u7cfb\u7edf- \u81ea\u52a8\u6309 2 \u7684 N \u6b21\u65b9\u5e42\u8fdb\u884c\u6269\u5c55\u4f46\u53c8\u7528\u4e0d\u5230\uff0c\u4ece\u800c\u6d6a\u8d39\u5185\u5b58\u3002\n- \u4f7f\u7528 `StringBuffer` \u6216\u662f `StringBuild` \u6765\u62fc\u63a5\u5b57\u7b26\u4e32\uff0c\u4f1a\u6bd4\u4f7f\u7528 `+` \u6216 `+=` \u6027\u80fd\u9ad8\u4e09\u5230\u56db\u4e2a\u6570\u91cf\u7ea7\u3002\n- \u5c3d\u53ef\u80fd\u7684\u4f7f\u7528\u5e76\u53d1\u7684 go routine\uff0c\u7136\u540e\u4f7f\u7528 sync.WaitGroup \u6765\u540c\u6b65\u5206\u7247\u64cd\u4f5c\n- \u907f\u514d\u5728\u70ed\u4ee3\u7801\u4e2d\u8fdb\u884c\u5185\u5b58\u5206\u914d\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4 gc \u5f88\u5fd9\u3002\u5c3d\u53ef\u80fd\u7684\u4f7f\u7528 sync.Pool \u6765\u91cd\u7528\u5bf9\u8c61\u3002\n- \u4f7f\u7528 l`ock-free` \u7684\u64cd\u4f5c\uff0c\u907f\u514d\u4f7f\u7528 `mutex`\uff0c\u5c3d\u53ef\u80fd\u4f7f\u7528 `sync/Atomic` \u5305\u3002 \uff08\u5173\u4e8e\u65e0\u9501\u7f16\u7a0b\u7684\u76f8\u5173\u8bdd\u9898\uff0c\u53ef\u53c2\u770b\u300a\u65e0\u9501- \u961f\u5217\u5b9e\u73b0\u300b\u6216\u300a\u65e0\u9501 Hashmap \u5b9e\u73b0\u300b\uff09\n- \u4f7f\u7528 `I/O` \u7f13\u51b2\uff0cI/O \u662f\u4e2a\u975e\u5e38\u975e\u5e38\u6162\u7684\u64cd\u4f5c\uff0c\u4f7f\u7528 `bufio.NewWrite()` \u548c `bufio.NewReader()` \u53ef\u4ee5\u5e26\u6765\u66f4\u9ad8\u7684\u6027- \u80fd\u3002\n- \u5bf9\u4e8e\u5728 for-loop \u91cc\u7684\u56fa\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u4e00\u5b9a\u8981\u4f7f\u7528 `regexp.Compile()` \u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6027\u80fd\u4f1a\u5f97\u5347\u4e24\u4e2a\u6570\u91cf\u7ea7\u3002\n- \u5982\u679c\u4f60\u9700\u8981\u66f4\u9ad8\u6027\u80fd\u7684\u534f\u8bae\uff0c\u4f60\u8981\u8003\u8651\u4f7f\u7528 protobuf \u6216 msgp \u800c\u4e0d\u662f JSON\uff0c\u56e0\u4e3a JSON \u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u91cc\u4f7f\u7528\u4e86\u53cd- \u5c04\u3002\n- \u4f60\u5728\u4f7f\u7528 map \u7684\u65f6\u5019\uff0c\u4f7f\u7528\u6574\u578b\u7684 key \u4f1a\u6bd4\u5b57\u7b26\u4e32\u7684\u8981\u5feb\uff0c\u56e0\u4e3a\u6574\u578b\u6bd4\u8f83\u6bd4\u5b57\u7b26\u4e32\u6bd4\u8f83\u8981\u5feb\u3002\n'},"836I":function(n,t,e){"use strict";e.r(t),t.default='\u7f16\u7a0b\u4e2d\u7684\u901a\u9053\u6709\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u4e2a\u53d1\u9001\u8005\uff08transmitter\uff09\u548c\u4e00\u4e2a\u63a5\u6536\u8005\uff08receiver\uff09\u3002\n\n```rust\nuse std::thread;\n// mpsc \u662f \u591a\u4e2a\u751f\u4ea7\u8005\uff0c\u5355\u4e2a\u6d88\u8d39\u8005\uff08multiple producer, single consumer\uff09\u7684\u7f29\u5199\u3002\nuse std::sync::mpsc;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let val = String::from("hi");\n        // send \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a Result<T, E> \u7c7b\u578b\n        tx.send(val).unwrap();\n\n        // \u53d1\u9001 val \u540e\uff0c\u6240\u6709\u6743\u8f6c\u79fb\u4e0d\u80fd\u518d\u4f7f\u7528\n        // println!("val is {}", val);\n    });\n\n    // \u901a\u9053\u7684\u63a5\u6536\u7aef\u6709\u4e24\u4e2a\u6709\u7528\u7684\u65b9\u6cd5\uff1arecv \u548c try_recv\u3002\n    // recv \u4f1a\u5728\u4e00\u4e2a Result<T, E> \u4e2d\u8fd4\u56de\u5b83\u3002\n    // try_recv \u4e0d\u4f1a\u963b\u585e\uff0c\u76f8\u53cd\u5b83\u7acb\u523b\u8fd4\u56de\u4e00\u4e2a Result<T, E>\n    // Ok \u503c\u5305\u542b\u53ef\u7528\u7684\u4fe1\u606f\uff0c\u800c Err \u503c\u4ee3\u8868\u6b64\u65f6\u6ca1\u6709\u4efb\u4f55\u6d88\u606f\u3002\n    // \u5982\u679c\u7ebf\u7a0b\u5728\u7b49\u5f85\u6d88\u606f\u8fc7\u7a0b\u4e2d\u8fd8\u6709\u5176\u4ed6\u5de5\u4f5c\u65f6\u4f7f\u7528 try_recv \u5f88\u6709\u7528\uff1a\n    // \u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u5faa\u73af\u6765\u9891\u7e41\u8c03\u7528 try_recv\uff0c\u5728\u6709\u53ef\u7528\u6d88\u606f\u65f6\u8fdb\u884c\u5904\u7406\uff0c\n    // \u5176\u4f59\u65f6\u5019\u5219\u5904\u7406\u4e00\u4f1a\u5176\u4ed6\u5de5\u4f5c\u76f4\u5230\u518d\u6b21\u68c0\u67e5\u3002\n    let received = rx.recv().unwrap();\n    println!("Got: {}", received);\n}\n```\n\n```rust\nuse std::thread;\nuse std::sync::mpsc;\nuse std::time::Duration;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    thread::spawn(move || {\n        let vals = vec![\n            String::from("hi"),\n            String::from("from"),\n            String::from("the"),\n            String::from("thread"),\n        ];\n\n        for val in vals {\n            tx.send(val).unwrap();\n            thread::sleep(Duration::from_secs(1));\n        }\n    });\n\n    // \u5f53\u901a\u9053\u88ab\u5173\u95ed\u65f6\uff0c\u8fed\u4ee3\u5668\u4e5f\u5c06\u7ed3\u675f\u3002\n    for received in rx {\n        println!("Got: {}", received);\n    }\n}\n```\n\n```rust\n// \u901a\u8fc7\u514b\u9686\u53d1\u9001\u8005\u6765\u521b\u5efa\u591a\u4e2a\u751f\u4ea7\u8005\nlet (tx, rx) = mpsc::channel();\n\nlet tx1 = tx.clone();\nthread::spawn(move || {\n    let vals = vec![\n        String::from("hi"),\n        String::from("from"),\n        String::from("the"),\n        String::from("thread"),\n    ];\n\n    for val in vals {\n        tx1.send(val).unwrap();\n        thread::sleep(Duration::from_secs(1));\n    }\n});\n\nthread::spawn(move || {\n    let vals = vec![\n        String::from("more"),\n        String::from("messages"),\n        String::from("for"),\n        String::from("you"),\n    ];\n\n    for val in vals {\n        tx.send(val).unwrap();\n        thread::sleep(Duration::from_secs(1));\n    }\n});\n\nfor received in rx {\n    println!("Got: {}", received);\n}\n```\n'},"8Lk6":function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n    "fmt"\n    "sort"\n)\n\nfunc main() {\n\n    strs := []string{"c", "a", "b"}\n    sort.Strings(strs)\n    fmt.Println("Strings:", strs)\n\n    ints := []int{7, 2, 4}\n    sort.Ints(ints)\n    fmt.Println("Ints:   ", ints)\n\n    s := sort.IntsAreSorted(ints)\n    fmt.Println("Sorted: ", s)\n}\n```\n\n## \u4f7f\u7528\u51fd\u6570\u81ea\u5b9a\u4e49\u6392\u5e8f\n\n```go\npackage main\n\nimport (\n    "fmt"\n    "sort"\n)\n\ntype byLength []string\n\nfunc (s byLength) Len() int {\n    return len(s)\n}\nfunc (s byLength) Swap(i, j int) {\n    s[i], s[j] = s[j], s[i]\n}\nfunc (s byLength) Less(i, j int) bool {\n    return len(s[i]) < len(s[j])\n}\n\nfunc main() {\n    fruits := []string{"peach", "banana", "kiwi"}\n    sort.Sort(byLength(fruits))\n    fmt.Println(fruits)\n}\n```\n'},"8X6M":function(n,t,e){"use strict";e.r(t),t.default='```java\n// HelloWorld.java\npublic class HelloWorld {\n    public static void main(String []args) {\n       System.out.println("Hello World");\n    }\n}\n```\n\n```sh\njavac HelloWorld.java\njava HelloWorld\n```\n'},"8hHH":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: Pipeline \u6d41\u5f0f\u5904\u7406\n---\n"},"8yWj":function(n,t,e){"use strict";e.r(t),t.default="You can use `pub` to manage Dart packages.\n\n```yaml\n# pubspec.yaml\nname: my_app\ndependencies:\n  js: ^0.3.0\n  intl: ^0.12.4\n```\n\n```sh\n# Installing packages\ncd <path-to-my_app>\npub get\n\n# Upgrading a dependency\npub upgrade\n# \u5347\u7ea7\u7279\u5b9a\u7684\u4f9d\u8d56\npub upgrade transmogrify\n```\n"},"92Wm":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u679a\u4e3e\n---\n"},"96IO":function(n,t){throw new Error("Module parse failed: Unexpected character '\ufffd' (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n(Source code omitted for this binary file)")},"9BUu":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: break\u5faa\u73af\n---"},"9M22":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u4e13\u9898\n---\n"},"9NAe":function(n,t,e){"use strict";e.r(t),t.default="```go\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    l := new(ListNode)  // \u521b\u5efa\u4e00\u4e2a\u94fe\u8868\n    c := l              // \u5f53\u524d\u6307\u9488\n    x := 0\n    for l1 != nil || l2 != nil || x != 0 {\n        if l1 != nil {\n            x += l1.Val\n            l1 = l1.Next\n        }\n        if l2 != nil {\n            x += l2.Val\n            l2 = l2.Next\n        }\n        c.Next = new(ListNode)  // \u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9\n        c = c.Next              // \u79fb\u52a8\u5f53\u524d\u6307\u9488\n        c.Val =  x % 10         // \u6539\u53d8\u5f53\u524d\u7684\u503c\n        x = x / 10              // \u8ba1\u7b97\u8fdb\u5236\u6570\n    }\n    return l.Next\n}\n```\n\n```go\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    l := new(ListNode)\n    c := l\n    x := 0\n    for l1 != nil || l2 != nil || x != 0 {\n        c.Next = new(ListNode)\n        c = c.Next\n        if l1 != nil && l2 != nil {\n            x = x + l1.Val + l2.Val\n            l1 = l1.Next\n            l2 = l2.Next\n        } else if l1 != nil {\n            x += l1.Val\n            if x < 10 && l1.Next != nil {\n                c.Next = l1.Next\n                l1 = nil\n            } else {\n                l1 = l1.Next\n            }\n        } else if l2 != nil {\n            x += l2.Val\n            if x < 10 && l2.Next != nil {\n                c.Next = l2.Next\n                l2 = nil\n            } else {\n                l2 = l2.Next\n            }\n        }\n        c.Val =  x % 10\n        x = x / 10\n    }\n    return l.Next\n}\n```\n\n```go\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    l := l1\n    c := l1\n    x := 0\n    for l1 != nil || l2 != nil || x != 0 {\n        if l1 != nil {\n            x += l1.Val\n            l1 = l1.Next\n        }\n        if l2 != nil {\n            x += l2.Val\n            l2 = l2.Next\n        }\n        c.Val =  x % 10\n        x = x / 10\n\n        if l1 != nil {\n            c.Next = l1\n            c = c.Next\n        } else if l2 != nil {\n            c.Next = l2\n            c = c.Next\n        } else if x > 0 {\n            c.Next = new(ListNode)\n            c = c.Next\n        }\n    }\n    return l\n}\n```\n\n```go\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    l := l1\n    c := l1\n    x := 0\n    for l1 != nil || l2 != nil || x != 0 {\n        if l1 != nil {\n            x += l1.Val\n            l1 = l1.Next\n        }\n        if l2 != nil {\n            x += l2.Val\n            l2 = l2.Next\n        }\n        c.Val =  x % 10\n        x = x / 10\n\n        if l1 != nil {\n            c = c.Next\n            if l2 == nil && x == 0 {\n                l1 = nil\n            }\n        } else if l2 != nil {\n            c.Next = l2\n            c = c.Next\n            if x == 0 {\n                l2 = nil\n            }\n        } else if x > 0 {\n            c.Next = new(ListNode)\n            c = c.Next\n        }\n    }\n    return l\n}\n```\n"},"9btF":function(n,t,e){"use strict";e.r(t),t.default='```js\nconst x = "Hello";\n// Hello World\nconsole.log(`${x} World`);\n```\n'},"9mmv":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5faa\u73af\n---"},"9tcs":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6570\u503c\u5e38\u91cf\n---"},A7WP:function(n,t,e){"use strict";e.r(t),t.default='\u6bcf\u4e2a\u6e90\u6587\u4ef6\u90fd\u662f\u4ee5\u5305\u7684\u58f0\u660e\u8bed\u53e5\u5f00\u59cb\uff0c\u7528\u6765\u6307\u660e\u5305\u7684\u540d\u5b57\u3002\n\u5f53\u5305\u88ab\u5bfc\u5165\u7684\u65f6\u5019\uff0c\u5305\u5185\u7684\u6210\u5458\u5c06\u901a\u8fc7\u7c7b\u4f3c tempconv.CToF \u7684\u5f62\u5f0f\u8bbf\u95ee\u3002\n\u800c\u5305\u7ea7\u522b\u7684\u540d\u5b57\uff0c\u4f8b\u5982\u5728\u4e00\u4e2a\u6587\u4ef6\u58f0\u660e\u7684\u7c7b\u578b\u548c\u5e38\u91cf\uff0c\n\u5728\u540c\u4e00\u4e2a\u5305\u7684\u5176\u4ed6\u6e90\u6587\u4ef6\u4e5f\u662f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7684\uff0c\u5c31\u597d\u50cf\u6240\u6709\u4ee3\u7801\u90fd\u5728\u4e00\u4e2a\u6587\u4ef6\u4e00\u6837\u3002\n\nGo \u8bed\u8a00\u7684\u4ee3\u7801\u901a\u8fc7\u5305\uff08package\uff09\u7ec4\u7ec7\uff0c\n\u5305\u7c7b\u4f3c\u4e8e\u5176\u5b83\u8bed\u8a00\u91cc\u7684\u5e93\uff08libraries\uff09\u6216\u8005\u6a21\u5757\uff08modules\uff09\u3002\n\u4e00\u4e2a\u5305\u7531\u4f4d\u4e8e\u5355\u4e2a\u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a\u6216\u591a\u4e2a.go \u6e90\u4ee3\u7801\u6587\u4ef6\u7ec4\u6210, \u76ee\u5f55\u5b9a\u4e49\u5305\u7684\u4f5c\u7528\u3002\n\u6bcf\u4e2a\u6e90\u6587\u4ef6\u90fd\u4ee5\u4e00\u6761 package \u58f0\u660e\u8bed\u53e5\u5f00\u59cb\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u91cc\u5c31\u662f package main,\n\u8868\u793a\u8be5\u6587\u4ef6\u5c5e\u4e8e\u54ea\u4e2a\u5305\uff0c\u7d27\u8ddf\u7740\u4e00\u7cfb\u5217\u5bfc\u5165\uff08import\uff09\u7684\u5305\uff0c\u4e4b\u540e\u662f\u5b58\u50a8\u5728\u8fd9\u4e2a\u6587\u4ef6\u91cc\u7684\u7a0b\u5e8f\u8bed\u53e5\u3002\n\n\u5728 Go \u8bed\u8a00\u7a0b\u5e8f\u4e2d\uff0c\u6bcf\u4e2a\u5305\u90fd\u6709\u4e00\u4e2a\u5168\u5c40\u552f\u4e00\u7684\u5bfc\u5165\u8def\u5f84\u3002\n\u4e00\u4e2a\u5bfc\u5165\u8def\u5f84\u4ee3\u8868\u4e00\u4e2a\u76ee\u5f55\u4e2d\u7684\u4e00\u4e2a\u6216\u591a\u4e2a Go \u6e90\u6587\u4ef6\u3002\n\nGo \u7684\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 100 \u591a\u4e2a\u5305\uff0c\u4ee5\u652f\u6301\u5e38\u89c1\u529f\u80fd\uff0c\u5982\u8f93\u5165\u3001\u8f93\u51fa\u3001\u6392\u5e8f\u4ee5\u53ca\u6587\u672c\u5904\u7406\u3002\n\nmain \u5305\u6bd4\u8f83\u7279\u6b8a\u3002\u5b83\u5b9a\u4e49\u4e86\u4e00\u4e2a\u72ec\u7acb\u53ef\u6267\u884c\u7684\u7a0b\u5e8f\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5e93\u3002\n\n\u6b64\u4ee3\u7801\u7528\u5706\u62ec\u53f7\u7ec4\u5408\u4e86\u5bfc\u5165\uff0c\u8fd9\u662f\u201c\u5206\u7ec4\u201d\u5f62\u5f0f\u7684\u5bfc\u5165\u8bed\u53e5\u3002\n\u4e0d\u8fc7\u4f7f\u7528\u5206\u7ec4\u5bfc\u5165\u8bed\u53e5\u662f\u66f4\u597d\u7684\u5f62\u5f0f\u3002\n\n\u5728 Go \u4e2d\uff0c\u5982\u679c\u4e00\u4e2a\u540d\u5b57\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u5df2\u5bfc\u51fa\u7684\u3002\n\u4f8b\u5982\uff0cPizza \u5c31\u662f\u4e2a\u5df2\u5bfc\u51fa\u540d\uff0cPi \u4e5f\u540c\u6837\uff0c\u5b83\u5bfc\u51fa\u81ea math \u5305\u3002\npizza \u548c pi \u5e76\u672a\u4ee5\u5927\u5199\u5b57\u6bcd\u5f00\u5934\uff0c\u6240\u4ee5\u5b83\u4eec\u662f\u672a\u5bfc\u51fa\u7684\u3002\n\u5728\u5bfc\u5165\u4e00\u4e2a\u5305\u65f6\uff0c\u4f60\u53ea\u80fd\u5f15\u7528\u5176\u4e2d\u5df2\u5bfc\u51fa\u7684\u540d\u5b57\u3002\n\u4efb\u4f55\u201c\u672a\u5bfc\u51fa\u201d\u7684\u540d\u5b57\u5728\u8be5\u5305\u5916\u5747\u65e0\u6cd5\u8bbf\u95ee\u3002\n\n\u8a00\u5916\u4e4b\u610f\uff0c\n\n- \u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u53d8\u91cf\u4f1a\u5bfc\u51fa\u7ed9\u5176\u4ed6\u5305\u4f7f\u7528\uff0c\n- \u5c0f\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u53d8\u91cf\u4e3a\u5305\u5185\u79c1\u6709\uff0c\u4e0d\u4f1a\u5bfc\u51fa\n\n- Go \u6e90\u6587\u4ef6\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8bed\u53e5\u5fc5\u987b\u662f `package \u540d\u79f0`\n- \u8fd9\u91cc\u7684 \u540d\u79f0 \u5373\u4e3a\u5bfc\u5165\u8be5\u5305\u65f6\u4f7f\u7528\u7684\u9ed8\u8ba4\u540d\u79f0\u3002 \uff08\u4e00\u4e2a\u5305\u4e2d\u7684\u6240\u6709\u6587\u4ef6\u90fd\u5fc5\u987b\u4f7f\u7528\u76f8\u540c\u7684 \u540d\u79f0\u3002\uff09\n- Go \u7684\u7ea6\u5b9a\u662f\u5305\u540d\u4e3a\u5bfc\u5165\u8def\u5f84\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff1a\u4f5c\u4e3a \u201ccrypto/rot13\u201d \u5bfc\u5165\u7684\u5305\u5e94\u547d\u540d\u4e3a rot13\u3002\n- \u53ef\u6267\u884c\u547d\u4ee4\u5fc5\u987b\u4f7f\u7528 `package main`\u3002\n- \u94fe\u63a5\u6210\u5355\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u7684\u6240\u6709\u5305\uff0c\u5176\u5305\u540d\u65e0\u9700\u662f\u552f\u4e00\u7684\uff0c\u53ea\u6709\u5bfc\u5165\u8def\u5f84\uff08\u5b83\u4eec\u7684\u5b8c\u6574\u6587\u4ef6\u540d\uff09 \u624d\u662f\u552f\u4e00\u7684\u3002\n\n\u5728 `src/pkg/encoding/base64` \u4e2d\u7684\u5305\u5e94\u4f5c\u4e3a `encoding/base64` \u5bfc\u5165\uff0c\n\n```go\nimport (\n  "fmt"\n  "math"\n)\n// \u7b49\u540c\u4e8e\nimport "fmt"\nimport "math"\n\n// \u522b\u540d\u64cd\u4f5c\nimport(\n  f "fmt"\n)\n\n// math\u5305\u5185\u7684Pi\u5373\u4e3a\u5bfc\u51fa\u7684\nfunc main() {\n  fmt.Println(math.Pi)\n}\n```\n\n```sh\n# \u82e5\u4f60\u5728\u5305\u7684\u5bfc\u5165\u8def\u5f84\u4e2d\u5305\u542b\u4e86\u4ee3\u7801\u4ed3\u5e93\u7684URL\uff0cgo get \u5c31\u4f1a\u81ea\u52a8\u5730\u83b7\u53d6\u3001 \u6784\u5efa\u5e76\u5b89\u88c5\u5b83\uff1a\n$ go get github.com/golang/example/hello\n$ $GOPATH/bin/hello\nHello, Go examples!\n\n# \u5728\u6267\u884c\u5b8c\u4e0a\u9762\u7684go get \u547d\u4ee4\u540e\uff0c\u5de5\u4f5c\u7a7a\u95f4\u7684\u76ee\u5f55\u6811\u770b\u8d77\u6765\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a\nbin/\n    hello                           # command executable\nsrc/\n    github.com/golang/example/\n        .git/                       # Git repository metadata\n        hello/\n            hello.go                # command source\n        stringutil/\n            reverse.go              # package source\n            reverse_test.go         # test source\n    github.com/user/\n        hello/\n            hello.go                # command source\n        stringutil/\n            reverse.go              # package source\n            reverse_test.go         # test source\n```\n'},AUMq:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6590\u6ce2\u90a3\u5951\u6570\u5217\n---\n\n\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5c31\u662f\u7531\u4e4b\u524d\u7684\u4e24\u6570\u76f8\u52a0\u800c\u5f97\u51fa\u3002\n\n\u9996\u51e0\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u662f\uff1a 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233\u2026\u2026\n"},AdUV:function(n,t,e){"use strict";e.r(t),t.default='`debug.go`\n\n```go\n// +build debug\npackage main\nconst debug = true\n```\n\n`release.go`\n\n```go\n// +build !debug\npackage main\nconst debug = false\n```\n\n`main.go`\n\n```go\npackage main\nimport "log"\nfunc main() {\n\tif debug {\n\t\tlog.Println("debug mode is enabled")\n\t}\n}\n```\n\n- `// +build debug` \u8868\u793a `build tags` \u4e2d\u5305\u542b `debug` \u65f6\uff0c\u8be5\u6e90\u6587\u4ef6\u53c2\u4e0e\u7f16\u8bd1\u3002\n- `// +build !debug` \u8868\u793a `build tags` \u4e2d\u4e0d\u5305\u542b `debug` \u65f6\uff0c\u8be5\u6e90\u6587\u4ef6\u53c2\u4e0e\u7f16\u8bd1\u3002\n\n\u4f8b\u5982\u4e0b\u9762\u7684\u5199\u6cd5\u8868\u793a\uff1a\u6b64\u6e90\u6587\u4ef6\u53ea\u80fd\u5728 `linux/386` \u6216\u8005 `darwin/386` \u5e73\u53f0\u4e0b\u7f16\u8bd1\u3002\n\n```go\n// +build linux darwin\n// +build 386\n```\n\n```sh\n# \u7f16\u8bd1\u4e00\u4e2a debug \u7248\u672c\ngo build -tags debug -o debug .\n# \u7f16\u8bd1 release \u7248\u672c\ngo build -o release .\n```\n'},"At/O":function(n,t,e){"use strict";e.r(t),t.default="```js\nconst a = [10, 5, 11, 7, 8, 9];\nMath.max(...a) - Math.min(...a);\n```\n"},B0R4:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5b89\u88c5\n---\n"},B7Op:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u63d2\u5165\u6392\u5e8f\n---\n"},BCvU:function(n,t,e){"use strict";e.r(t),t.default='\u6bcf\u4e2a\u6570\u7ec4\u7684\u5927\u5c0f\u90fd\u662f\u56fa\u5b9a\u7684\u3002\n\u800c\u5207\u7247\u5219\u4e3a\u6570\u7ec4\u5143\u7d20\u63d0\u4f9b\u52a8\u6001\u5927\u5c0f\u7684\u3001\u7075\u6d3b\u7684\u89c6\u89d2\u3002\n\u5728\u5b9e\u8df5\u4e2d\uff0c\u5207\u7247\u6bd4\u6570\u7ec4\u66f4\u5e38\u7528\u3002\n\u7c7b\u578b `[]T` \u8868\u793a\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u4e3a T \u7684\u5207\u7247\u3002\n\n`a[low : high]`\n\u5b83\u4f1a\u9009\u62e9\u4e00\u4e2a\u534a\u5f00\u533a\u95f4\uff0c\u5305\u62ec\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u4f46\u6392\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002\n\n![\u5207\u7247\u4e0e\u6570\u7ec4\u793a\u610f\u56fe](images/slice.png)\n\n```go\n// \u4ee5\u4e0b\u8868\u8fbe\u5f0f\u521b\u5efa\u4e86\u4e00\u4e2a\u5207\u7247\uff0c\n// \u5b83\u5305\u542b a \u4e2d\u4e0b\u6807\u4ece 1 \u5230 3 \u7684\u5143\u7d20\uff1a\npackage main\nimport "fmt"\nfunc main() {\n  primes := [6]int{2, 3, 5, 7, 11, 13}\n  fmt.Println(primes)\n  var s []int = primes[1:4]\n  fmt.Println(s)\n}\n// [2 3 5 7 11 13]\n// [3 5 7]\n\n\n// \u5207\u7247\u5c31\u50cf\u6570\u7ec4\u7684\u5f15\u7528\n// - \u5207\u7247\u5e76\u4e0d\u5b58\u50a8\u4efb\u4f55\u6570\u636e\uff0c\u5b83\u53ea\u662f\u63cf\u8ff0\u4e86\u5e95\u5c42\u6570\u7ec4\u4e2d\u7684\u4e00\u6bb5\u3002\n// - \u66f4\u6539\u5207\u7247\u7684\u5143\u7d20\u4f1a\u4fee\u6539\u5176\u5e95\u5c42\u6570\u7ec4\u4e2d\u5bf9\u5e94\u7684\u5143\u7d20\u3002\n// - \u4e0e\u5b83\u5171\u4eab\u5e95\u5c42\u6570\u7ec4\u7684\u5207\u7247\u90fd\u4f1a\u89c2\u6d4b\u5230\u8fd9\u4e9b\u4fee\u6539\u3002\npackage main\nimport "fmt"\nfunc main() {\n  names := [4]string{\n    "John",\n    "Paul",\n    "George",\n    "Ringo",\n  }\n  fmt.Println(names)\n  a := names[0:2]\n  b := names[1:3]\n  fmt.Println(a, b)\n  b[0] = "XXX"\n  fmt.Println(a, b)\n  fmt.Println(names)\n}\n// [John Paul George Ringo]\n// [John Paul] [Paul George]\n// [John XXX] [XXX George]\n// [John XXX George Ringo]\n\n\n// \u8fd9\u662f\u4e00\u4e2a\u6570\u7ec4\u6587\u6cd5\uff1a\n[3]bool{true, true, false}\n\n// \u5207\u7247\u6587\u6cd5\u7c7b\u4f3c\u4e8e\u6ca1\u6709\u957f\u5ea6\u7684\u6570\u7ec4\u6587\u6cd5\u3002\n// \u4e0b\u9762\u8fd9\u6837\u5219\u4f1a\u521b\u5efa\u4e00\u4e2a\u548c\u4e0a\u9762\u76f8\u540c\u7684\u6570\u7ec4\uff0c\n// \u7136\u540e\u6784\u5efa\u4e00\u4e2a\u5f15\u7528\u4e86\u5b83\u7684\u5207\u7247\uff1a\n[]bool{true, true, false}\n\n\npackage main\nimport "fmt"\nfunc main() {\n  q := []int{2, 3, 5, 7, 11, 13}\n  fmt.Println(q)\n  r := []bool{true, false, true, true, false, true}\n  fmt.Println(r)\n  s := []struct {\n    i int\n    b bool\n  }{\n    {2, true},\n    {3, false},\n    {5, true},\n    {7, true},\n    {11, false},\n    {13, true},\n  }\n  fmt.Println(s)\n}\n// [2 3 5 7 11 13]\n// [true false true true false true]\n// [{2 true} {3 false} {5 true} {7 true} {11 false} {13 true}]\n\n\n// \u5728\u8fdb\u884c\u5207\u7247\u65f6\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u5b83\u7684\u9ed8\u8ba4\u884c\u4e3a\u6765\u5ffd\u7565\u4e0a\u4e0b\u754c\u3002\n// \u5207\u7247\u4e0b\u754c\u7684\u9ed8\u8ba4\u503c\u4e3a 0\uff0c\u4e0a\u754c\u5219\u662f\u8be5\u5207\u7247\u7684\u957f\u5ea6\u3002\nvar a [10]int\n// \u4ee5\u4e0b\u5207\u7247\u662f\u7b49\u4ef7\u7684\uff1a\na[0:10]\na[:10]\na[0:]\na[:]\n\npackage main\nimport "fmt"\nfunc main() {\n  s := []int{2, 3, 5, 7, 11, 13}\n  s = s[1:4]\n  fmt.Println(s)\n  s = s[:2]\n  fmt.Println(s)\n  s = s[1:]\n  fmt.Println(s)\n}\n// [3 5 7]\n// [3 5]\n// [5]\n\n\n// \u5207\u7247\u62e5\u6709 \u957f\u5ea6 \u548c \u5bb9\u91cf\u3002\n// \u5207\u7247\u7684\u957f\u5ea6\u5c31\u662f\u5b83\u6240\u5305\u542b\u7684\u5143\u7d20\u4e2a\u6570\u3002\n// \u5207\u7247\u7684\u5bb9\u91cf\u662f\u4ece\u5b83\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u6570\uff0c\u5230\u5176\u5e95\u5c42\u6570\u7ec4\u5143\u7d20\u672b\u5c3e\u7684\u4e2a\u6570\u3002\n// \u5207\u7247 s \u7684\u957f\u5ea6\u548c\u5bb9\u91cf\u53ef\u901a\u8fc7\u8868\u8fbe\u5f0f len(s) \u548c cap(s) \u6765\u83b7\u53d6\u3002\n// \u4f60\u53ef\u4ee5\u901a\u8fc7\u91cd\u65b0\u5207\u7247\u6765\u6269\u5c55\u4e00\u4e2a\u5207\u7247\uff0c\u7ed9\u5b83\u63d0\u4f9b\u8db3\u591f\u7684\u5bb9\u91cf\u3002\npackage main\n\nimport "fmt"\n\nfunc main() {\n  s := []int{2, 3, 5, 7, 11, 13}\n  printSlice(s)\n\n  // \u622a\u53d6\u5207\u7247\u4f7f\u5176\u957f\u5ea6\u4e3a 0\n  s = s[:0]\n  printSlice(s)\n\n  // \u62d3\u5c55\u5176\u957f\u5ea6\n  s = s[:4]\n  printSlice(s)\n\n  // \u820d\u5f03\u524d\u4e24\u4e2a\u503c\n  s = s[2:]\n  printSlice(s)\n\n  s = s[0:4]\n  printSlice(s)\n\n  s = s[0:6]\n  printSlice(s)\n}\nfunc printSlice(s []int) {\n  fmt.Printf("len=%d cap=%d %v\\n", len(s), cap(s), s)\n}\n// len=6 cap=6 [2 3 5 7 11 13]\n// len=0 cap=6 []\n// len=4 cap=6 [2 3 5 7]\n// len=2 cap=4 [5 7]\n// len=4 cap=4 [5 7 11 13]\n// panic: runtime error: slice bounds out of range\n\n\n// \u5207\u7247\u7684\u96f6\u503c\u662f nil\u3002\n// nil \u5207\u7247\u7684\u957f\u5ea6\u548c\u5bb9\u91cf\u4e3a 0 \u4e14\u6ca1\u6709\u5e95\u5c42\u6570\u7ec4\u3002\npackage main\nimport "fmt"\nfunc main() {\n  var s []int\n  fmt.Println(s, len(s), cap(s))\n  if s == nil {\n    fmt.Println("nil!")\n  }\n}\n// [] 0 0\n// nil!\n\n\n// \u5207\u7247\u53ef\u4ee5\u7528\u5185\u5efa\u51fd\u6570 make \u6765\u521b\u5efa\uff0c\u8fd9\u4e5f\u662f\u4f60\u521b\u5efa\u52a8\u6001\u6570\u7ec4\u7684\u65b9\u5f0f\u3002\n// make \u51fd\u6570\u4f1a\u5206\u914d\u4e00\u4e2a\u5143\u7d20\u4e3a\u96f6\u503c\u7684\u6570\u7ec4\u5e76\u8fd4\u56de\u4e00\u4e2a\u5f15\u7528\u4e86\u5b83\u7684\u5207\u7247\uff1a\n// \u8981\u6307\u5b9a\u5b83\u7684\u5bb9\u91cf\uff0c\u9700\u5411 make \u4f20\u5165\u7b2c\u4e09\u4e2a\u53c2\u6570\uff1a\npackage main\nimport "fmt"\nfunc main() {\n  a := make([]int, 5)\n  printSlice("a", a)\n\n  b := make([]int, 0, 5)\n  printSlice("b", b)\n\n  c := b[:2]\n  printSlice("c", c)\n\n  d := c[2:5]\n  printSlice("d", d)\n}\nfunc printSlice(s string, x []int) {\n  fmt.Printf("%s len=%d cap=%d %v\\n",\n    s, len(x), cap(x), x)\n}\n// a len=5 cap=5 [0 0 0 0 0]\n// b len=0 cap=5 []\n// c len=2 cap=5 [0 0]\n// d len=3 cap=3 [0 0 0]\n\n\n// \u5207\u7247\u53ef\u5305\u542b\u4efb\u4f55\u7c7b\u578b\uff0c\u751a\u81f3\u5305\u62ec\u5176\u5b83\u7684\u5207\u7247\u3002\npackage main\nimport (\n  "fmt"\n  "strings"\n)\nfunc main() {\n  // \u521b\u5efa\u4e00\u4e2a\u4e95\u5b57\u677f\uff08\u7ecf\u5178\u6e38\u620f\uff09\n  board := [][]string{\n    []string{"_", "_", "_"},\n    []string{"_", "_", "_"},\n    []string{"_", "_", "_"},\n  }\n  // \u4e24\u4e2a\u73a9\u5bb6\u8f6e\u6d41\u6253\u4e0a X \u548c O\n  board[0][0] = "X"\n  board[2][2] = "O"\n  board[1][2] = "X"\n  board[1][0] = "O"\n  board[0][2] = "X"\n  for i := 0; i < len(board); i++ {\n    fmt.Printf("%s\\n", strings.Join(board[i], " "))\n  }\n}\n// X _ X\n// O _ X\n// _ _ O\n\n\n// \u4e3a\u5207\u7247\u8ffd\u52a0\u65b0\u7684\u5143\u7d20\u662f\u79cd\u5e38\u7528\u7684\u64cd\u4f5c\uff0c\u4e3a\u6b64 Go \u63d0\u4f9b\u4e86\u5185\u5efa\u7684 append \u51fd\u6570\u3002\n// append \u7684\u7ed3\u679c\u662f\u4e00\u4e2a\u5305\u542b\u539f\u5207\u7247\u6240\u6709\u5143\u7d20\u52a0\u4e0a\u65b0\u6dfb\u52a0\u5143\u7d20\u7684\u5207\u7247\u3002\n// \u5f53 s \u7684\u5e95\u5c42\u6570\u7ec4\u592a\u5c0f\uff0c\u4e0d\u8db3\u4ee5\u5bb9\u7eb3\u6240\u6709\u7ed9\u5b9a\u7684\u503c\u65f6\uff0c\u5b83\u5c31\u4f1a\u5206\u914d\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u7ec4\u3002\n// \u8fd4\u56de\u7684\u5207\u7247\u4f1a\u6307\u5411\u8fd9\u4e2a\u65b0\u5206\u914d\u7684\u6570\u7ec4\u3002\npackage main\nimport "fmt"\nfunc main() {\n  var s []int\n  printSlice(s)\n  // \u6dfb\u52a0\u4e00\u4e2a\u7a7a\u5207\u7247\n  s = append(s, 0)\n  printSlice(s)\n  // \u8fd9\u4e2a\u5207\u7247\u4f1a\u6309\u9700\u589e\u957f\n  s = append(s, 1)\n  printSlice(s)\n  // \u53ef\u4ee5\u4e00\u6b21\u6027\u6dfb\u52a0\u591a\u4e2a\u5143\u7d20\n  s = append(s, 2, 3, 4)\n  printSlice(s)\n}\nfunc printSlice(s []int) {\n  fmt.Printf("len=%d cap=%d %v\\n", len(s), cap(s), s)\n}\n// len=0 cap=0 []\n// len=1 cap=2 [0]\n// len=2 cap=2 [0 1]\n// len=5 cap=8 [0 1 2 3 4]\n\n\n// \u5b9e\u73b0 Pic\u3002\n// \u5b83\u5e94\u5f53\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a dy \u7684\u5207\u7247\uff0c\n// \u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a dx\uff0c\u5143\u7d20\u7c7b\u578b\u4e3a uint8 \u7684\u5207\u7247\u3002\n// \u5f53\u4f60\u8fd0\u884c\u6b64\u7a0b\u5e8f\u65f6\uff0c\u5b83\u4f1a\u5c06\u6bcf\u4e2a\u6574\u6570\u89e3\u91ca\u4e3a\u7070\u5ea6\u503c\uff08\u597d\u5427\uff0c\u5176\u5b9e\u662f\u84dd\u5ea6\u503c\uff09\u5e76\u663e\u793a\u5b83\u6240\u5bf9\u5e94\u7684\u56fe\u50cf\u3002\npackage main\nimport "golang.org/x/tour/pic"\n//import "fmt"\nfunc Pic(dx, dy int) [][]uint8 {\n  //fmt.Println(dx, dy)\n  qie := make([][]uint8, dy)\n  // fmt.Println(qie)\n  for i := 0; i < dy; i++ {\n    qie[i] = make([]uint8, dx)\n    for j := 0; j < dx; j++ {\n      qie[i][j] = uint8(i-j)\n    }\n  }\n  return qie\n}\nfunc main() {\n  pic.Show(Pic)\n}\n\n\n// \u5c06\u4e00\u4e2a\u5207\u7247\u8ffd\u52a0\u5230\u53e6\u4e00\u4e2a\u5207\u7247\u4e2d\nx := []int{1,2,3}\ny := []int{4,5,6}\nx = append(x, y...)\nfmt.Println(x)\n\n\n// \u5b57\u7b26\u4e32\u5207\u7247\u62fc\u63a5\nstrings.Join(os.Args[1:], " ")\n// \u5b57\u7b26\u4e32\u5207\u7247\nstrings.Split(string(data), "\\n")\n```\n\n\u7ffb\u8f6c\u5207\u7247\n\n```go\n// \u590d\u5236\u4e00\u4e2aslice\u53ea\u662f\u5bf9\u5e95\u5c42\u7684\u6570\u7ec4\u521b\u5efa\u4e86\u4e00\u4e2a\u65b0\u7684slice\u522b\u540d\n// \u5411\u51fd\u6570\u4f20\u9012slice\u5c06\u5141\u8bb8\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u5e95\u5c42\u6570\u7ec4\nfunc reverse(s []int) {\n    for i, j := 0, len(s)-1; i < j; i, j = i+1, j-1 {\n        s[i], s[j] = s[j], s[i]\n    }\n}\n\na := [...]int{0, 1, 2, 3, 4, 5}\nreverse(a[:])\nfmt.Println(a) // "[5 4 3 2 1 0]"\n\n// \u4e00\u79cd\u5c06slice\u5143\u7d20\u5faa\u73af\u5411\u5de6\u65cb\u8f6cn\u4e2a\u5143\u7d20\u7684\u65b9\u6cd5\u662f\u4e09\u6b21\u8c03\u7528reverse\u53cd\u8f6c\u51fd\u6570\n// \u7b2c\u4e00\u6b21\u662f\u53cd\u8f6c\u5f00\u5934\u7684n\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u662f\u53cd\u8f6c\u5269\u4e0b\u7684\u5143\u7d20\uff0c\u6700\u540e\u662f\u53cd\u8f6c\u6574\u4e2aslice\u7684\u5143\u7d20\u3002\n// \u5982\u679c\u662f\u5411\u53f3\u5faa\u73af\u65cb\u8f6c\uff0c\u5219\u5c06\u7b2c\u4e09\u4e2a\u51fd\u6570\u8c03\u7528\u79fb\u5230\u7b2c\u4e00\u4e2a\u8c03\u7528\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u4e86\u3002\ns := []int{0, 1, 2, 3, 4, 5}\nreverse(s[:2])\nreverse(s[2:])\nreverse(s)\nfmt.Println(s) // "[2 3 4 5 0 1]"\n```\n\n\u8fc7\u6ee4\u7a7a\u5b57\u7b26\u4e32\n\n```go\nfunc nonempty(strings []string) []string {\n    i := 0\n    for _, s := range strings {\n        if s != "" {\n            strings[i] = s\n            i++\n        }\n    }\n    return strings[:i]\n}\n\ndata := []string{"one", "", "three"}\nfmt.Printf("%q\\n", nonempty(data)) // `["one" "three"]`\nfmt.Printf("%q\\n", data)           // `["one" "three" "three"]`\n\nfunc nonempty2(strings []string) []string {\n    out := strings[:0] // zero-length slice of original\n    for _, s := range strings {\n        if s != "" {\n            out = append(out, s)\n        }\n    }\n    return out\n}\n```\n\n\u6a21\u62df\u6808\uff08stack\uff09\n\n```go\nstack = append(stack, v) // push v\ntop := stack[len(stack)-1] // top of stack\nstack = stack[:len(stack)-1] // pop\n```\n\n\u5220\u9664 slice \u4e2d\u95f4\u7684\u67d0\u4e2a\u5143\u7d20\u5e76\u4fdd\u5b58\u539f\u6709\u7684\u5143\u7d20\u987a\u5e8f\n\n```go\nfunc remove(slice []int, i int) []int {\n    copy(slice[i:], slice[i+1:])\n    return slice[:len(slice)-1]\n}\nfunc main() {\n    s := []int{5, 6, 7, 8, 9}\n    fmt.Println(remove(s, 2)) // "[5 6 8 9]"\n}\n```\n\n\u5982\u679c\u5220\u9664\u5143\u7d20\u540e\u4e0d\u7528\u4fdd\u6301\u539f\u6765\u987a\u5e8f\n\n```go\nfunc remove(slice []int, i int) []int {\n    slice[i] = slice[len(slice)-1]\n    return slice[:len(slice)-1]\n}\nfunc main() {\n    s := []int{5, 6, 7, 8, 9}\n    fmt.Println(remove(s, 2)) // "[5 6 9 8]\n}\n```\n'},"BKY+":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6570\u636e\u7c7b\u578b\n---\n\n## \u5185\u7f6e\u7c7b\u578b\u5217\u8868\n\n| name         | dart             | go         | js                   | python           |\n| ------------ | ---------------- | ---------- | -------------------- | ---------------- |\n| numbers      | num              |            | Number               | Numbers          |\n| numbers      | int              | int        |                      | -int             |\n| numbers      |                  | int8       |                      |                  |\n| numbers      |                  | int16      |                      |                  |\n| numbers      |                  | int32/rune |                      |                  |\n| numbers      |                  | int64      |                      |                  |\n| numbers      |                  | uint       |                      |                  |\n| numbers      |                  | uint8/byte |                      |                  |\n| numbers      |                  | uint16     |                      |                  |\n| numbers      |                  | uint32     |                      |                  |\n| numbers      |                  | uint64     |                      |                  |\n| numbers      |                  | uintptr    |                      |                  |\n| numbers      | double           | float32    |                      | -float           |\n| numbers      |                  | float64    |                      |                  |\n| numbers      |                  | complex64  |                      |                  |\n| numbers      |                  | complex128 |                      |                  |\n| complex      |                  |            |                      | complex          |\n| strings      | String           | string     | String               | str              |\n| booleans     | bool(true/false) | bool       | Boolean(true/false)  | bool(True/False) |\n| lists/arrays | List             |            | -Array               | list             |\n| maps         | map              |            | -Map                 | dict             |\n| runes        | runes            |            |                      |                  |\n| symbols      | symbol           |            | Symbol               |                  |\n| Null         | -null            |            | Null(null)           |                  |\n| Undefined    |                  |            | Undefined(undefined) |                  |\n| Object       | Object           |            | Object               |                  |\n| Set          | Set              |            | -Set                 | set              |\n| ArrayBuffer  |                  |            | -ArrayBuffer         | bytearray        |\n| Tuples       |                  |            |                      | tuple            |\n| range        |                  |            |                      | range            |\n| Function     | -Function        |            |                      |                  |\n| dynamic      | dynamic          |            |                      |                  |\n| error        |                  | error      |                      |                  |\n"},BgzH:function(n,t,e){"use strict";e.r(t),t.default='## \u5c01\u88c5\uff08encapsulation\n\n```rust\npub struct AveragedCollection {\n    list: Vec<i32>,\n    average: f64,\n}\nimpl AveragedCollection {\n    pub fn add(&mut self, value: i32) {\n        self.list.push(value);\n        self.update_average();\n    }\n\n    pub fn remove(&mut self) -> Option<i32> {\n        let result = self.list.pop();\n        match result {\n            Some(value) => {\n                self.update_average();\n                Some(value)\n            },\n            None => None,\n        }\n    }\n\n    pub fn average(&self) -> f64 {\n        self.average\n    }\n\n    fn update_average(&mut self) {\n        let total: i32 = self.list.iter().sum();\n        self.average = total as f64 / self.list.len() as f64;\n    }\n}\n```\n\n## \u7ee7\u627f\uff08Inheritance\uff09\n\n\u9009\u62e9\u7ee7\u627f\u6709\u4e24\u4e2a\u4e3b\u8981\u7684\u539f\u56e0\u3002\n\n- \u7b2c\u4e00\u4e2a\u662f\u4e3a\u4e86\u91cd\u7528\u4ee3\u7801\uff1a\u4e00\u65e6\u4e3a\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86\u7279\u5b9a\u884c\u4e3a\uff0c\u7ee7\u627f\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u4e0d\u540c\u7684\u7c7b\u578b\u91cd\u7528\u8fd9\u4e2a\u5b9e\u73b0\u3002\n  - \u8fd9\u7c7b\u4f3c\u4e8e\u7236\u7c7b\u6709\u4e00\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\uff0c\u800c\u901a\u8fc7\u7ee7\u627f\u5b50\u7c7b\u4e5f\u62e5\u6709\u8fd9\u4e2a\u65b9\u6cd5\u7684\u5b9e\u73b0\u3002\n  - \u5f53\u5b9e\u73b0 Summary trait \u65f6\u4e5f\u53ef\u4ee5\u9009\u62e9\u8986\u76d6 summarize \u7684\u9ed8\u8ba4\u5b9e\u73b0\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u5b50\u7c7b\u8986\u76d6\u4ece\u7236\u7c7b\u7ee7\u627f\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002\n- \u7b2c\u4e8c\u4e2a\u4f7f\u7528\u7ee7\u627f\u7684\u539f\u56e0\u4e0e\u7c7b\u578b\u7cfb\u7edf\u6709\u5173\uff1a\u8868\u73b0\u4e3a\u5b50\u7c7b\u578b\u53ef\u4ee5\u7528\u4e8e\u7236\u7c7b\u578b\u88ab\u4f7f\u7528\u7684\u5730\u65b9\u3002\n  - \u8fd9\u4e5f\u88ab\u79f0\u4e3a \u591a\u6001\uff08polymorphism\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5982\u679c\u591a\u79cd\u5bf9\u8c61\u5171\u4eab\u7279\u5b9a\u7684\u5c5e\u6027\uff0c\u5219\u53ef\u4ee5\u76f8\u4e92\u66ff\u4ee3\u4f7f\u7528\u3002\n\n## \u5b9a\u4e49\u901a\u7528\u884c\u4e3a\u7684 trait\n\n\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u4e00\u6b21\u53ea\u80fd\u66ff\u4ee3\u4e00\u4e2a\u5177\u4f53\u7c7b\u578b\uff0c\u800c trait \u5bf9\u8c61\u5219\u5141\u8bb8\u5728\u8fd0\u884c\u65f6\u66ff\u4ee3\u591a\u79cd\u5177\u4f53\u7c7b\u578b\u3002\n\n```rust\n// \u4e00\u79cd Screen \u7ed3\u6784\u4f53\u7684\u66ff\u4ee3\u5b9e\u73b0\uff0c\u5176 run \u65b9\u6cd5\u4f7f\u7528\u6cdb\u578b\u548c trait bound\n// \u8fd9\u9650\u5236\u4e86 Screen \u5b9e\u4f8b\u5fc5\u987b\u62e5\u6709\u4e00\u4e2a\u5168\u662f Button \u7c7b\u578b\u6216\u8005\u5168\u662f TextField \u7c7b\u578b\u7684\u7ec4\u4ef6\u5217\u8868\u3002\npub struct Screen<T: Draw> {\n    pub components: Vec<T>,\n}\nimpl<T> Screen<T>\n    where T: Draw {\n    pub fn run(&self) {\n        for component in self.components.iter() {\n            component.draw();\n        }\n    }\n}\n```\n\n\u901a\u8fc7\u4f7f\u7528 `trait` \u5bf9\u8c61\u7684\u65b9\u6cd5\uff0c\n\u4e00\u4e2a `Screen` \u5b9e\u4f8b\u53ef\u4ee5\u5b58\u653e\u4e00\u4e2a\u65e2\u80fd\u5305\u542b `Box<Button>`\uff0c\n\u4e5f\u80fd\u5305\u542b `Box<TextField>` \u7684 `Vec<T>`\n\n```rust\n// src/lib.rs\npub trait Draw {\n    fn draw(&self);\n}\n\npub struct Screen {\n    // \u8fd9\u4e2a vector \u7684\u7c7b\u578b\u662f Box<dyn Draw>\uff0c\n    // \u6b64\u4e3a\u4e00\u4e2a trait \u5bf9\u8c61\uff1a\u5b83\u662f Box \u4e2d\u4efb\u4f55\u5b9e\u73b0\u4e86 Draw trait \u7684\u7c7b\u578b\u7684\u66ff\u8eab\u3002\n    pub components: Vec<Box<dyn Draw>>,\n}\nimpl Screen {\n    pub fn run(&self) {\n        for component in self.components.iter() {\n            component.draw();\n        }\n    }\n}\n\npub struct Button {\n    pub width: u32,\n    pub height: u32,\n    pub label: String,\n}\nimpl Draw for Button {\n    fn draw(&self) {\n        // \u5b9e\u9645\u7ed8\u5236\u6309\u94ae\u7684\u4ee3\u7801\n    }\n}\n```\n\n```rust\n// src/main.rs\nuse gui::Draw;\nuse gui::{Screen, Button};\n\n// \u4f7f\u7528\u8005\u51b3\u5b9a\u5b9e\u73b0\u4e00\u4e2a\u5305\u542b width\u3001height \u548c options \u5b57\u6bb5\u7684\u7ed3\u6784\u4f53 SelectBox\nstruct SelectBox {\n    width: u32,\n    height: u32,\n    options: Vec<String>,\n}\nimpl Draw for SelectBox {\n    fn draw(&self) {\n        // code to actually draw a select box\n    }\n}\n\nfn main() {\n    let screen = Screen {\n        components: vec![\n            Box::new(SelectBox {\n                width: 75,\n                height: 10,\n                options: vec![\n                    String::from("Yes"),\n                    String::from("Maybe"),\n                    String::from("No")\n                ],\n            }),\n            Box::new(Button {\n                width: 50,\n                height: 10,\n                label: String::from("OK"),\n            }),\n        ],\n    };\n\n    screen.run();\n}\n```\n\n## Trait \u5bf9\u8c61\u8981\u6c42\u5bf9\u8c61\u5b89\u5168\n\n\u53ea\u6709 \u5bf9\u8c61\u5b89\u5168\uff08object safe\uff09\u7684 trait \u624d\u53ef\u4ee5\u7ec4\u6210 trait \u5bf9\u8c61\u3002\n\n\u5982\u679c\u4e00\u4e2a trait \u4e2d\u6240\u6709\u7684\u65b9\u6cd5\u6709\u5982\u4e0b\u5c5e\u6027\u65f6\uff0c\u5219\u8be5 trait \u662f\u5bf9\u8c61\u5b89\u5168\u7684\uff1a\n\n- \u8fd4\u56de\u503c\u7c7b\u578b\u4e0d\u4e3a Self\n- \u65b9\u6cd5\u6ca1\u6709\u4efb\u4f55\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\n\n\u4e00\u4e2a trait \u7684\u65b9\u6cd5\u4e0d\u662f\u5bf9\u8c61\u5b89\u5168\u7684\u4f8b\u5b50\u662f\u6807\u51c6\u5e93\u4e2d\u7684 Clone trait\u3002\n\n```rust\npub trait Clone {\n    fn clone(&self) -> Self;\n}\n\npub struct Screen {\n    pub components: Vec<Box<dyn Clone>>, // \u9519\u8bef\n}\n```\n\n## \u8bbe\u8ba1\u6a21\u5f0f\n\n### \u72b6\u6001\u6a21\u5f0f\uff08state pattern\uff09\n\n```rust\n// src/main.rs\nuse blog::Post;\n\nfn main() {\n    let mut post = Post::new();\n\n    post.add_text("I ate a salad for lunch today");\n    assert_eq!("", post.content()); // \u65ad\u8a00\u8349\u6848\u535a\u6587\u7684 content \u65b9\u6cd5\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\n\n    post.request_review();\n    assert_eq!("", post.content()); // \u7b49\u5f85\u5ba1\u6838\u7684\u9636\u6bb5 content \u5e94\u8be5\u4ecd\u7136\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002\n\n    post.approve();\n    assert_eq!("I ate a salad for lunch today", post.content());\n}\n```\n\n```rust\n// src/lib.rs\npub struct Post {\n    state: Option<Box<dyn State>>,\n    content: String,\n}\n\nimpl Post {\n    pub fn new() -> Post {\n        Post {\n            state: Some(Box::new(Draft {})),\n            content: String::new(),\n        }\n    }\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n    pub fn content(&self) -> &str {\n        // \u8c03\u7528 Option \u7684 as_ref \u65b9\u6cd5\u662f\u56e0\u4e3a\u9700\u8981 Option \u4e2d\u503c\u7684\u5f15\u7528\u800c\u4e0d\u662f\u83b7\u53d6\u5176\u6240\u6709\u6743\u3002\n        self.state.as_ref().unwrap().content(self)\n    }\n    pub fn request_review(&mut self) {\n        // \u8c03\u7528 take \u65b9\u6cd5\u5c06 state \u5b57\u6bb5\u4e2d\u7684 Some \u503c\u53d6\u51fa\u5e76\u7559\u4e0b\u4e00\u4e2a None\uff0c\n        // \u56e0\u4e3a Rust \u4e0d\u5141\u8bb8\u7ed3\u6784\u4f53\u5b9e\u4f8b\u4e2d\u5b58\u5728\u503c\u4e3a\u7a7a\u7684\u5b57\u6bb5\u3002\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.request_review())\n        }\n    }\n    pub fn approve(&mut self) {\n        if let Some(s) = self.state.take() {\n            self.state = Some(s.approve())\n        }\n    }\n}\n\n// State trait \u5b9a\u4e49\u4e86\u6240\u6709\u4e0d\u540c\u72b6\u6001\u7684\u535a\u6587\u6240\u5171\u4eab\u7684\u884c\u4e3a\n// \u540c\u65f6 Draft\u3001PendingReview \u548c Published \u72b6\u6001\u90fd\u4f1a\u5b9e\u73b0 State \u72b6\u6001\u3002\n// \u589e\u52a0\u65b0\u72b6\u6001\u53ea\u6d89\u53ca\u5230\u589e\u52a0\u4e00\u4e2a\u65b0 struct \u548c\u4e3a\u5176\u5b9e\u73b0 trait \u7684\u65b9\u6cd5\u3002\ntrait State {\n    // \u8fd9\u91cc\u4f7f\u7528\u4e86 self: Box<Self>\u3002\n    // \u8fd9\u4e2a\u8bed\u6cd5\u610f\u5473\u7740\u8be5\u65b9\u6cd5\u53ea\u53ef\u5728\u6301\u6709\u8fd9\u4e2a\u7c7b\u578b\u7684 Box \u4e0a\u88ab\u8c03\u7528\n    // \u8fd9\u4e2a\u8bed\u6cd5\u83b7\u53d6\u4e86 Box<Self> \u7684\u6240\u6709\u6743\u4f7f\u8001\u72b6\u6001\u65e0\u6548\u5316\uff0c\u4ee5\u4fbf Post \u7684\u72b6\u6001\u503c\u53ef\u8f6c\u6362\u4e3a\u4e00\u4e2a\u65b0\u72b6\u6001\u3002\n    fn request_review(self: Box<Self>) -> Box<dyn State>;\n    fn approve(self: Box<Self>) -> Box<dyn State>;\n    fn content<\'a>(&self, post: &\'a Post) -> &\'a str {\n        ""\n    }\n}\n\nstruct Draft {}\nimpl State for Draft {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        Box::new(PendingReview {})\n    }\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n}\n\nstruct PendingReview {}\nimpl State for PendingReview {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        Box::new(Published {})\n    }\n}\n\nstruct Published {}\nimpl State for Published {\n    fn request_review(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n    fn approve(self: Box<Self>) -> Box<dyn State> {\n        self\n    }\n    fn content<\'a>(&self, post: &\'a Post) -> &\'a str {\n        &post.content\n    }\n}\n```\n\n\u53e6\u4e00\u4e2a\u4f8b\u5b50\n\n```rust\n// src/main.rs\nuse blog2::Post;\nfn main() {\n    let mut post = Post::new();\n    post.add_text("I ate a salad for lunch today");\n    let post = post.request_review();\n    let post = post.approve();\n    assert_eq!("I ate a salad for lunch today", post.content());\n}\n```\n\n```rust\n// src/lib.rs\npub struct Post {\n    content: String,\n}\nimpl Post {\n    pub fn new() -> DraftPost {\n        DraftPost {\n            content: String::new(),\n        }\n    }\n    pub fn content(&self) -> &str {\n        &self.content\n    }\n}\n\npub struct DraftPost {\n    content: String,\n}\nimpl DraftPost {\n    pub fn add_text(&mut self, text: &str) {\n        self.content.push_str(text);\n    }\n    pub fn request_review(self) -> PendingReviewPost {\n        PendingReviewPost {\n            content: self.content,\n        }\n    }\n}\n\npub struct PendingReviewPost {\n    content: String,\n}\nimpl PendingReviewPost {\n    pub fn approve(self) -> Post {\n        Post {\n            content: self.content,\n        }\n    }\n}\n```\n'},C9J2:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// SelectionSort \u9009\u62e9\u6392\u5e8f\n// \u6bcf\u6b21\u8fed\u4ee3\u9009\u51fa\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u653e\u5230\u6700\u524d\u9762\nfunc SelectionSort(arr []int) []int {\n\tfor i := 0; i < len(arr); i++ {\n\t\tmin := i // \u6700\u5c0f\u5143\u7d20\u7684\u5e8f\u53f7\n\t\t// \u8fd9\u91cc\u7684j\u4e0d\u80fd\u4ece0\u5f00\u59cb\n\t\tfor j := i; j < len(arr); j++ {\n\t\t\tif arr[j] < arr[min] {\n\t\t\t\tmin = j\n\t\t\t}\n\t\t}\n\t\tarr[i], arr[min] = arr[min], arr[i] // \u6700\u5c0f\u5143\u7d20\u653e\u5230\u6700\u524d\u9762\n\t}\n\treturn arr\n}\n\nfunc main() {\n\ta := []int{3, 6, 7, 4, 5, 1, 2}\n\tfmt.Println(SelectionSort(a))\n}\n\n```'},Ci1R:function(n,t,e){"use strict";e.r(t),t.default='\u53c2\u8003\uff1a https://developer.mozilla.org/zh-CN/docs/WebAssembly/Rust_to_wasm\n\n## \u73af\u5883\n\n### \u5b89\u88c5 rust\n\n### wasm-pack\n\n```sh\ncargo install wasm-pack\n```\n\n### \u5b89\u88c5 npm\n\n## \u6784\u5efa\n\n```sh\n# \u521b\u5efa\u4e00\u4e2alib\u9879\u76ee\ncargo new --lib hello-wasm\n\n# \u4fee\u6539\u5bf9\u5e94\u6587\u4ef6\n\n# \u6784\u5efa\u5305\n# --target bundler - for bundlers like Webpack, Parcel, or Rollup.\n# --target web - for the web as ECMAScript module.\n# --target no-modules - for the web without ECMAScript module.\n# --target nodejs - for Node.js\n# wasm-pack build --scope mynpmusername\nwasm-pack build --target bundler\n\n# \u53d1\u5e03\u5305\uff08\u53ef\u9009\uff09\ncd pkg\nnpm publish --access=public\n```\n\n```rust\n// src/lib.rs\nextern crate wasm_bindgen;\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\nextern {\n    pub fn alert(s: &str);\n}\n\n#[wasm_bindgen]\npub fn greet(name: &str) {\n    alert(&format!("Hello, {}!", name));\n}\n```\n\n```toml\n# Cargo.toml\n[package]\nname = "hello-wasm"\nversion = "0.1.0"\nauthors = ["Your Name <you@example.com>"]\ndescription = "A sample project with wasm-pack"\nlicense = "MIT/Apache-2.0"\nrepository = "https://github.com/yourgithubusername/hello-wasm"\n\n[lib]\ncrate-type = ["cdylib"]\n\n[dependencies]\nwasm-bindgen = "0.2"\n```\n\n## \u4f7f\u7528\u6784\u5efa\u751f\u6210\u7684 wasm\n\n### \u65b0\u5efa site \u9879\u76ee\n\n```json\n// package.json\n{\n  "scripts": {\n    "serve": "webpack-dev-server"\n  },\n  //   "dependencies": {\n  //     "@mynpmusername/hello-wasm": "^0.1.0"\n  //   },\n  "devDependencies": {\n    "webpack": "^4.25.1",\n    "webpack-cli": "^3.1.2",\n    "webpack-dev-server": "^3.1.10"\n  }\n}\n```\n\n```js\n// webpack.config.js\nconst path = require("path");\nmodule.exports = {\n  entry: "./index.js",\n  output: {\n    path: path.resolve(__dirname, "dist"),\n    filename: "index.js",\n  },\n  mode: "development",\n};\n```\n\n```html\n\x3c!-- index.html --\x3e\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <title>hello-wasm example</title>\n  </head>\n  <body>\n    <script src="./index.js"><\/script>\n  </body>\n</html>\n```\n\n```js\n// index.js\nconst js = import("../pkg/hello_wasm.js");\njs.then((js) => {\n  js.greet("WebAssembly");\n});\n```\n\n### \u6d4b\u8bd5\n\n```sh\nnpm install\nnpm run serve\n```\n\n### \u9519\u8bef\n\n```sh\n  opensslErrorStack: [ \'error:03000086:digital envelope routines::initialization error\' ],\n  library: \'digital envelope routines\',\n  reason: \'unsupported\',\n  code: \'ERR_OSSL_EVP_UNSUPPORTED\'\n```\n\n```sh\n#For Windows, use the below command in cmd:\nset NODE_OPTIONS=--openssl-legacy-provider\n#For Unix, use:\nexport NODE_OPTIONS=--openssl-legacy-provider\n```\n\n## \u66f4\u591a\u4f8b\u5b50\n\n\u53c2\u8003\uff1a https://rustwasm.github.io/wasm-bindgen/examples/index.html\n\n```sh\nwasm-pack build --target web --debug\n\n# npm install --global http-server\n# http-server\nnpx serve .\n```\n\n### Execute Rust code from JavaScript\n\n```rust\n// src/lib.rs\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn helloworld() -> String {\n    String::from("Hello world from Rust!")\n}\n```\n\n```html\n\x3c!-- index.html --\x3e\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8" />\n    <title>"Hello world" in Rust + Webassembly</title>\n    <script type="module">\n      import init, { helloworld } from "./pkg/hello_wasm.js";\n\n      async function run() {\n        await init();\n        document.body.textContent = helloworld();\n      }\n\n      run();\n    <\/script>\n  </head>\n\n  <body></body>\n</html>\n```\n\n### Execute JavaScript code from Rust\n\n```rust\n// use the function console.log inside Rust\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\nextern "C" {\n    #[wasm_bindgen(js_namespace = console)]\n    fn log(s: &str);\n}\n\n#[wasm_bindgen]\npub fn example() {\n    log("Log from rust");\n}\n```\n\n```js\nimport init, { example } from "./pkg/helloworld.js";\n\nasync function run() {\n  await init();\n  example(); // This will log "Log from rust" to the console\n}\n\nrun();\n```\n\n### Performance - JavaScript vs Rust\n\n```rust\nuse wasm_bindgen::prelude::*;\n\n#[wasm_bindgen]\npub fn fibonacci(n: u32) -> u32 {\n    match n {\n        0 | 1 => n,\n        _ => fibonacci(n - 1) + fibonacci(n - 2),\n    }\n}\n```\n\n```js\nimport init, { fibonacci } from "./pkg/helloworld.js";\n\nfunction fibonacciInJs(n) {\n  if (n <= 1) return n;\n  return fibonacciInJs(n - 1) + fibonacciInJs(n - 2);\n}\n\nasync function run() {\n  await init();\n  const num = 20;\n\n  console.time("Fibonnaci in rust");\n  const fibRust = fibonacci(num);\n  console.timeEnd("Fibonnaci in rust");\n\n  console.time("Fibonnaci in JS");\n  const fibJS = fibonacciInJs(num);\n  console.timeEnd("Fibonnaci in JS");\n\n  document.body.textContent = `Fib ${num}: Rust ${fibRust} - JS ${fibJS}`;\n}\n\nrun();\n```\n\n### Publishing to NPM\n\n```sh\n# They work the same way as with npm pack and npm publish\nwasm-pack pack myproject/pkg\nwasm-pack publish\n```\n\n### run\n\n```rust\nuse wasm_bindgen::prelude::*;\n\n// Called by our JS entry point to run the example\n#[wasm_bindgen(start)]\npub fn run() -> Result<(), JsValue> {\n    // Use `web_sys`\'s global `window` function to get a handle on the global\n    // window object.\n    let window = web_sys::window().expect("no global `window` exists");\n    let document = window.document().expect("should have a document on window");\n    let body = document.body().expect("document should have a body");\n\n    // Manufacture the element we\'re gonna append\n    let val = document.create_element("p")?;\n    val.set_text_content(Some("Hello from Rust!"));\n\n    body.append_child(&val)?;\n\n    Ok(())\n}\n```\n\n```toml\n[lib]\ncrate-type = ["cdylib"]\n\n[dependencies]\nwasm-bindgen = "0.2"\n\n[dependencies.web-sys]\nversion = "0.3.4"\nfeatures = [\n  \'Document\',\n  \'Element\',\n  \'HtmlElement\',\n  \'Node\',\n  \'Window\',\n]\n```\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="UTF-8" />\n    <title>"Hello world" in Rust + Webassembly</title>\n    <script type="module">\n      import init from "./pkg/helloworld.js";\n\n      async function run() {\n        await init();\n      }\n\n      run();\n    <\/script>\n  </head>\n\n  <body></body>\n</html>\n```\n'},CodQ:function(n,t,e){"use strict";e.r(t),t.default='```js\nparseInt("v8", 32); // 1000\n\nconst string1 = "1";\nconst number1 = parseInt(string1);\nconsole.log(number1 + 2); // 3\n```\n\n```js\n// \u5c0f\u6570\u70b9\u622a\u53d6\n(10).toFixed(2); // "10.00"\n(10.005).toFixed(2); // "10.01"\n\n// 2\nconsole.log(Math.ceil(1.5));\n// 1\nconsole.log(Math.floor(1.5));\n// 2\nconsole.log(Math.round(1.5));\n```\n\n```js\n// 10\u8fdb\u5236\u8f6c\u4e3a32\u8fdb\u5236\n(1000).toString(32); // \'v8\'\n// 32\u8fdb\u5236\u8f6c\u4e3a10\u8fdb\u5236\nparseInt("v8", 32); // 1000\n```\n'},"Cz/D":function(n,t,e){"use strict";e.r(t),t.default="\u53d6\u540d\u4e3a container.tmp.go \u653e\u5728 ./template/\u4e0b\n\n- PACKAGE_NAME \u2013 \u5305\u540d\n- GENERIC_NAME \u2013 \u540d\u5b57\n- GENERIC_TYPE \u2013 \u5b9e\u9645\u7684\u7c7b\u578b\n\n```go\npackage PACKAGE_NAME\ntype GENERIC_NAMEContainer struct {\n    s []GENERIC_TYPE\n}\nfunc NewGENERIC_NAMEContainer() *GENERIC_NAMEContainer {\n    return &GENERIC_NAMEContainer{s: []GENERIC_TYPE{}}\n}\nfunc (c *GENERIC_NAMEContainer) Put(val GENERIC_TYPE) {\n    c.s = append(c.s, val)\n}\nfunc (c *GENERIC_NAMEContainer) Get() GENERIC_TYPE {\n    r := c.s[0]\n    c.s = c.s[1:]\n    return r\n}\n```\n\n\u4e00\u4e2a\u53eb gen.sh \u7684\u751f\u6210\u811a\u672c\n\n```sh\n#!/bin/bash\n\nset -e\n\nSRC_FILE=${1}\nPACKAGE=${2}\nTYPE=${3}\nDES=${4}\n#uppcase the first char\nPREFIX=\"$(tr '[:lower:]' '[:upper:]' <<< ${TYPE:0:1})${TYPE:1}\"\n\nDES_FILE=$(echo ${TYPE}| tr '[:upper:]' '[:lower:]')_${DES}.go\n\nsed 's/PACKAGE_NAME/'\"${PACKAGE}\"'/g' ${SRC_FILE} | \\\n    sed 's/GENERIC_TYPE/'\"${TYPE}\"'/g' | \\\n    sed 's/GENERIC_NAME/'\"${PREFIX}\"'/g' > ${DES_FILE}\n```\n\n\u5728\u4ee3\u7801\u4e2d\u6253\u4e00\u4e2a\u7279\u6b8a\u7684\u6ce8\u91ca\n\n- \u7b2c\u4e00\u4e2a\u6ce8\u91ca\u662f\u751f\u6210\u5305\u540d\u4e3a gen \u7c7b\u578b\u4e3a uint32 \u76ee\u6807\u6587\u4ef6\u540d\u4ee5 container \u4e3a\u540e\u7f00\n- \u7b2c\u4e8c\u4e2a\u6ce8\u91ca\u662f\u751f\u6210\u5305\u540d\u4e3a gen \u7c7b\u578b\u4e3a string \u76ee\u6807\u6587\u4ef6\u540d\u4ee5 container \u4e3a\u540e\u7f00\n\n```go\n//go:generate ./gen.sh ./template/container.tmp.go gen uint32 container\nfunc generateUint32Example() {\n    var u uint32 = 42\n    c := NewUint32Container()\n    c.Put(u)\n    v := c.Get()\n    fmt.Printf(\"generateExample: %d (%T)\\n\", v, v)\n}\n\n//go:generate ./gen.sh ./template/container.tmp.go gen string container\nfunc generateStringExample() {\n    var s string = \"Hello\"\n    c := NewStringContainer()\n    c.Put(s)\n    v := c.Get()\n    fmt.Printf(\"generateExample: %s (%T)\\n\", v, v)\n}\n```\n\n\u5728\u5de5\u7a0b\u76ee\u5f55\u4e2d\u76f4\u63a5\u6267\u884c `go generate` \u547d\u4ee4\uff0c\u5c31\u4f1a\u751f\u6210\u5982\u4e0b\u4e24\u4efd\u4ee3\u7801\n\n```go\n// uint32_container.go\npackage gen\n\ntype Uint32Container struct {\n    s []uint32\n}\nfunc NewUint32Container() *Uint32Container {\n    return &Uint32Container{s: []uint32{}}\n}\nfunc (c *Uint32Container) Put(val uint32) {\n    c.s = append(c.s, val)\n}\nfunc (c *Uint32Container) Get() uint32 {\n    r := c.s[0]\n    c.s = c.s[1:]\n    return r\n}\n```\n\n```go\n// string_container.go\npackage gen\n\ntype StringContainer struct {\n    s []string\n}\nfunc NewStringContainer() *StringContainer {\n    return &StringContainer{s: []string{}}\n}\nfunc (c *StringContainer) Put(val string) {\n    c.s = append(c.s, val)\n}\nfunc (c *StringContainer) Get() string {\n    r := c.s[0]\n    c.s = c.s[1:]\n    return r\n}\n```\n"},D6wV:function(n,t,e){"use strict";e.r(t),t.default='```go\nages := make(map[string]int)\nages["alice"] = 31\nages["charlie"] = 34\n// \u6216\nages := map[string]int{\n    "alice":   31,\n    "charlie": 34,\n}\n\n// \u5220\u9664\u5143\u7d20\ndelete(ages, "alice") // remove element ages["alice"]\n\n// \u4e0d\u80fd\u5bf9map\u7684\u5143\u7d20\u8fdb\u884c\u53d6\u5740\u64cd\u4f5c\n// \u539f\u56e0\u662fmap\u53ef\u80fd\u968f\u7740\u5143\u7d20\u6570\u91cf\u7684\u589e\u957f\u800c\u91cd\u65b0\u5206\u914d\u66f4\u5927\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u4ece\u800c\u53ef\u80fd\u5bfc\u81f4\u4e4b\u524d\u7684\u5730\u5740\u65e0\u6548\n_ = &ages["bob"] // compile error: cannot take address of map element\n\n// \u5411\u4e00\u4e2anil\u503c\u7684map\u5b58\u5165\u5143\u7d20\u5c06\u5bfc\u81f4\u4e00\u4e2apanic\u5f02\u5e38\nages["carol"] = 21 // panic: assignment to entry in nil map\n\nage, ok := ages["bob"]\nif !ok { /* "bob" is not a key in this map; age == 0. */ }\n\nif age, ok := ages["bob"]; !ok { /* ... */ }\n```\n\n\u904d\u5386 map\n\n```go\n// \u8fed\u4ee3\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\nfor name, age := range ages {\n    fmt.Printf("%s\\t%d\\n", name, age)\n}\n\n// \u6392\u5e8f\u904d\u5386\nimport "sort"\n\nvar names []string\n// names := make([]string, 0, len(ages))\nfor name := range ages {\n    names = append(names, name)\n}\nsort.Strings(names)\nfor _, name := range names {\n    fmt.Printf("%s\\t%d\\n", name, ages[name])\n}\n```\n\n\u6620\u5c04\u5c06\u952e\u6620\u5c04\u5230\u503c\u3002\n\u6620\u5c04\u7684\u96f6\u503c\u4e3a nil \u3002nil \u6620\u5c04\u65e2\u6ca1\u6709\u952e\uff0c\u4e5f\u4e0d\u80fd\u6dfb\u52a0\u952e\u3002\n`make` \u51fd\u6570\u4f1a\u8fd4\u56de\u7ed9\u5b9a\u7c7b\u578b\u7684\u6620\u5c04\uff0c\u5e76\u5c06\u5176\u521d\u59cb\u5316\u5907\u7528\u3002\n\nmap \u7c7b\u578b\u53ef\u4ee5\u5199\u4e3a map[K]V\uff0c\u5176\u4e2d K \u548c V \u5206\u522b\u5bf9\u5e94 key \u548c value\u3002\n\u5176\u4e2d K \u5bf9\u5e94\u7684 key \u5fc5\u987b\u662f\u652f\u6301==\u6bd4\u8f83\u8fd0\u7b97\u7b26\u7684\u6570\u636e\u7c7b\u578b\uff0c\n\u6240\u4ee5 map \u53ef\u4ee5\u901a\u8fc7\u6d4b\u8bd5 key \u662f\u5426\u76f8\u7b49\u6765\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u3002\n\u5bf9\u4e8e V \u5bf9\u5e94\u7684 value \u6570\u636e\u7c7b\u578b\u5219\u6ca1\u6709\u4efb\u4f55\u7684\u9650\u5236\u3002\n\n\u5185\u7f6e\u7684`make`\u51fd\u6570\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a map\uff1a\n\u4e5f\u53ef\u4ee5\u7528`map`\u5b57\u9762\u503c\u7684\u8bed\u6cd5\u521b\u5efa map\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u6307\u5b9a\u4e00\u4e9b\u6700\u521d\u7684`key/value`\uff1a\n\n```go\nages := map[string]int{\n  "alice":   31,\n  "charlie": 34,\n}\n// \u8fd9\u76f8\u5f53\u4e8e\nages := make(map[string]int)\nages["alice"] = 31\nages["charlie"] = 34\n\n\n// \u58f0\u660e\u4e00\u4e2akey\u662f\u5b57\u7b26\u4e32\uff0c\u503c\u4e3aint\u7684\u5b57\u5178,\u8fd9\u79cd\u65b9\u5f0f\u7684\u58f0\u660e\u9700\u8981\u5728\u4f7f\u7528\u4e4b\u524d\u4f7f\u7528make\u521d\u59cb\u5316\nvar numbers map[string]int\n// \u53e6\u4e00\u79cdmap\u7684\u58f0\u660e\u65b9\u5f0f\nnumbers := make(map[string]int)\nnumbers["one"] = 1  //\u8d4b\u503c\nnumbers["ten"] = 10 //\u8d4b\u503c\nnumbers["three"] = 3\n\n\npackage main\nimport "fmt"\ntype Vertex struct {\n  Lat, Long float64\n}\nvar m map[string]Vertex\nfunc main() {\n  m = make(map[string]Vertex)\n  m["Bell Labs"] = Vertex{\n    40.68433, -74.39967,\n  }\n  fmt.Println(m["Bell Labs"])\n}\n// {40.68433 -74.39967}\n\n\n// \u6620\u5c04\u7684\u6587\u6cd5\u4e0e\u7ed3\u6784\u4f53\u76f8\u4f3c\uff0c\u4e0d\u8fc7\u5fc5\u987b\u6709\u952e\u540d\u3002\npackage main\nimport "fmt"\ntype Vertex struct {\n  Lat, Long float64\n}\nvar m = map[string]Vertex{\n  "Bell Labs": Vertex{\n    40.68433, -74.39967,\n  },\n  "Google": Vertex{\n    37.42202, -122.08408,\n  },\n}\nfunc main() {\n  fmt.Println(m)\n}\n\n\n// \u82e5\u9876\u7ea7\u7c7b\u578b\u53ea\u662f\u4e00\u4e2a\u7c7b\u578b\u540d\uff0c\u4f60\u53ef\u4ee5\u5728\u6587\u6cd5\u7684\u5143\u7d20\u4e2d\u7701\u7565\u5b83\u3002\npackage main\nimport "fmt"\ntype Vertex struct {\n  Lat, Long float64\n}\nvar m = map[string]Vertex{\n  "Bell Labs": {40.68433, -74.39967},\n  "Google":    {37.42202, -122.08408},\n}\nfunc main() {\n  fmt.Println(m)\n}\n\n\n// \u4fee\u6539\u6620\u5c04\npackage main\n\nimport "fmt"\n\nfunc main() {\n  m := make(map[string]int)\n\n  m["Answer"] = 42 // \u5728\u6620\u5c04 m \u4e2d\u63d2\u5165\u6216\u4fee\u6539\u5143\u7d20\uff1a\n  fmt.Println("The value:", m["Answer"]) // \u83b7\u53d6\u5143\u7d20\uff1a\n\n  m["Answer"] = 48\n  fmt.Println("The value:", m["Answer"])\n\n  delete(m, "Answer") // \u5220\u9664\u5143\u7d20\uff1a\n  fmt.Println("The value:", m["Answer"])\n\n  // \u901a\u8fc7\u53cc\u8d4b\u503c\u68c0\u6d4b\u67d0\u4e2a\u952e\u662f\u5426\u5b58\u5728\uff1a\n  // \u82e5 key \u5728 m \u4e2d\uff0cok \u4e3a true \uff1b\u5426\u5219\uff0cok \u4e3a false\u3002\n  // \u82e5 key \u4e0d\u5728\u6620\u5c04\u4e2d\uff0c\u90a3\u4e48 elem \u662f\u8be5\u6620\u5c04\u5143\u7d20\u7c7b\u578b\u7684\u96f6\u503c\u3002\n  // \u540c\u6837\u7684\uff0c\u5f53\u4ece\u6620\u5c04\u4e2d\u8bfb\u53d6\u67d0\u4e2a\u4e0d\u5b58\u5728\u7684\u952e\u65f6\uff0c\u7ed3\u679c\u662f\u6620\u5c04\u7684\u5143\u7d20\u7c7b\u578b\u7684\u96f6\u503c\u3002\n  v, ok := m["Answer"]\n  fmt.Println("The value:", v, "Present?", ok)\n}\n// The value: 42\n// The value: 48\n// The value: 0\n// The value: 0 Present? false\n```\n'},D7e0:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n    "fmt"\n    "sync"\n    "time"\n)\n\nfunc worker(id int) {\n    fmt.Printf("Worker %d starting\\n", id)\n\n    time.Sleep(time.Second)\n    fmt.Printf("Worker %d done\\n", id)\n}\n\nfunc main() {\n    var wg sync.WaitGroup\n\n    for i := 1; i <= 5; i++ {\n        wg.Add(1)\n\n        i := i\n\n        go func() {\n            defer wg.Done()\n            worker(i)\n        }()\n    }\n\n    wg.Wait()\n}\n```\n'},D8G6:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u4ee3\u7801\u751f\u6210\u6a21\u677f\n---\n"},DBJF:function(n,t,e){"use strict";e.r(t),t.default='```go\n// Package pubsub implements a simple multi-topic pub-sub library.\npackage pubsub\n\nimport (\n    "sync"\n    "time"\n)\n\ntype (\n    subscriber chan interface{}         // \u8ba2\u9605\u8005\u4e3a\u4e00\u4e2a\u7ba1\u9053\n    topicFunc  func(v interface{}) bool // \u4e3b\u9898\u4e3a\u4e00\u4e2a\u8fc7\u6ee4\u5668\n)\n\n// \u53d1\u5e03\u8005\u5bf9\u8c61\ntype Publisher struct {\n    m           sync.RWMutex             // \u8bfb\u5199\u9501\n    buffer      int                      // \u8ba2\u9605\u961f\u5217\u7684\u7f13\u5b58\u5927\u5c0f\n    timeout     time.Duration            // \u53d1\u5e03\u8d85\u65f6\u65f6\u95f4\n    subscribers map[subscriber]topicFunc // \u8ba2\u9605\u8005\u4fe1\u606f\n}\n\n// \u6784\u5efa\u4e00\u4e2a\u53d1\u5e03\u8005\u5bf9\u8c61, \u53ef\u4ee5\u8bbe\u7f6e\u53d1\u5e03\u8d85\u65f6\u65f6\u95f4\u548c\u7f13\u5b58\u961f\u5217\u7684\u957f\u5ea6\nfunc NewPublisher(publishTimeout time.Duration, buffer int) *Publisher {\n    return &Publisher{\n        buffer:      buffer,\n        timeout:     publishTimeout,\n        subscribers: make(map[subscriber]topicFunc),\n    }\n}\n\n// \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8ba2\u9605\u8005\uff0c\u8ba2\u9605\u5168\u90e8\u4e3b\u9898\nfunc (p *Publisher) Subscribe() chan interface{} {\n    return p.SubscribeTopic(nil)\n}\n\n// \u6dfb\u52a0\u4e00\u4e2a\u65b0\u7684\u8ba2\u9605\u8005\uff0c\u8ba2\u9605\u8fc7\u6ee4\u5668\u7b5b\u9009\u540e\u7684\u4e3b\u9898\nfunc (p *Publisher) SubscribeTopic(topic topicFunc) chan interface{} {\n    ch := make(chan interface{}, p.buffer)\n    p.m.Lock()\n    p.subscribers[ch] = topic\n    p.m.Unlock()\n    return ch\n}\n\n// \u9000\u51fa\u8ba2\u9605\nfunc (p *Publisher) Evict(sub chan interface{}) {\n    p.m.Lock()\n    defer p.m.Unlock()\n\n    delete(p.subscribers, sub)\n    close(sub)\n}\n\n// \u53d1\u5e03\u4e00\u4e2a\u4e3b\u9898\nfunc (p *Publisher) Publish(v interface{}) {\n    p.m.RLock()\n    defer p.m.RUnlock()\n\n    var wg sync.WaitGroup\n    for sub, topic := range p.subscribers {\n        wg.Add(1)\n        go p.sendTopic(sub, topic, v, &wg)\n    }\n    wg.Wait()\n}\n\n// \u5173\u95ed\u53d1\u5e03\u8005\u5bf9\u8c61\uff0c\u540c\u65f6\u5173\u95ed\u6240\u6709\u7684\u8ba2\u9605\u8005\u7ba1\u9053\u3002\nfunc (p *Publisher) Close() {\n    p.m.Lock()\n    defer p.m.Unlock()\n\n    for sub := range p.subscribers {\n        delete(p.subscribers, sub)\n        close(sub)\n    }\n}\n\n// \u53d1\u9001\u4e3b\u9898\uff0c\u53ef\u4ee5\u5bb9\u5fcd\u4e00\u5b9a\u7684\u8d85\u65f6\nfunc (p *Publisher) sendTopic(\n    sub subscriber, topic topicFunc, v interface{}, wg *sync.WaitGroup,\n) {\n    defer wg.Done()\n    if topic != nil && !topic(v) {\n        return\n    }\n\n    select {\n    case sub <- v:\n    case <-time.After(p.timeout):\n    }\n}\n```\n\n```go\nimport "path/to/pubsub"\n\nfunc main() {\n    p := pubsub.NewPublisher(100*time.Millisecond, 10)\n    defer p.Close()\n\n    all := p.Subscribe()\n    golang := p.SubscribeTopic(func(v interface{}) bool {\n        if s, ok := v.(string); ok {\n            return strings.Contains(s, "golang")\n        }\n        return false\n    })\n\n    p.Publish("hello,  world!")\n    p.Publish("hello, golang!")\n\n    go func() {\n        for  msg := range all {\n            fmt.Println("all:", msg)\n        }\n    } ()\n\n    go func() {\n        for  msg := range golang {\n            fmt.Println("golang:", msg)\n        }\n    } ()\n\n    // \u8fd0\u884c\u4e00\u5b9a\u65f6\u95f4\u540e\u9000\u51fa\n    time.Sleep(3 * time.Second)\n}\n```\n'},DXXq:function(n,t,e){"use strict";e.r(t),t.default='```c++\nenum colors {RED, GREEN, BLUE};\n\nprintf("%d\\n", RED); // 0\nprintf("%d\\n", GREEN);  // 1\nprintf("%d\\n", BLUE);  // 2\n\nenum colors color;\ncolor = BLUE;\nprintf("%i\\n", color); // 2\n\n// typedef \u547d\u4ee4\u53ef\u4ee5\u4e3a Enum \u7c7b\u578b\u8d77\u522b\u540d\ntypedef enum {\n  SHEEP,\n  WHEAT,\n  WOOD,\n  BRICK,\n  ORE\n} RESOURCE;\nRESOURCE r;\n\n// \u58f0\u660e Enum \u7c7b\u578b\u65f6\uff0c\u5728\u540c\u4e00\u884c\u91cc\u9762\u4e3a\u53d8\u91cf\u8d4b\u503c\nenum {\n  SHEEP,\n  WHEAT,\n  WOOD,\n  BRICK,\n  ORE\n} r = BRICK, s = WOOD;\n\n\nenum { ONE, TWO };\nprintf("%d %d", ONE, TWO);  // 0 1\n\nenum { ONE = 1, TWO = 2 };\nprintf("%d %d", ONE, TWO);  // 1 2\n\nenum { X = 2, Y = 18, Z = -2 };\n\nenum {\n  A,    // 0\n  B,    // 1\n  C = 4,  // 4\n  D,    // 5\n  E,    // 6\n  F = 3,   // 3\n  G,    // 4\n  H     // 5\n};\n```\n'},"Da/o":function(n,t,e){"use strict";e.r(t),t.default='## builder \u6a21\u5f0f\n\n```go\n// \u9700\u8981\u914d\u7f6e\u7684\u7ed3\u6784\u4f53\ntype Server struct {\n    Addr     string\n    Port     int\n    Protocol string\n    Timeout  time.Duration\n    MaxConns int\n    TLS      *tls.Config\n}\n\n//\u4f7f\u7528\u4e00\u4e2abuilder\u7c7b\u6765\u505a\u5305\u88c5\ntype ServerBuilder struct {\n    Server\n}\n\nfunc (sb *ServerBuilder) Create(addr string, port int) *ServerBuilder {\n    sb.Server.Addr = addr\n    sb.Server.Port = port\n    //\u5176\u5b83\u4ee3\u7801\u8bbe\u7f6e\u5176\u5b83\u6210\u5458\u7684\u9ed8\u8ba4\u503c\n    return sb\n}\n\nfunc (sb *ServerBuilder) WithProtocol(protocol string) *ServerBuilder {\n    sb.Server.Protocol = protocol\n    return sb\n}\n\nfunc (sb *ServerBuilder) WithMaxConn( maxconn int) *ServerBuilder {\n    sb.Server.MaxConns = maxconn\n    return sb\n}\n\nfunc (sb *ServerBuilder) WithTimeOut( timeout time.Duration) *ServerBuilder {\n    sb.Server.Timeout = timeout\n    return sb\n}\n\nfunc (sb *ServerBuilder) WithTLS( tls *tls.Config) *ServerBuilder {\n    sb.Server.TLS = tls\n    return sb\n}\n\nfunc (sb *ServerBuilder) Build() (Server) {\n    return  sb.Server\n}\n\n\nsb := ServerBuilder{}\nserver, err := sb.Create("127.0.0.1", 8080).\n    WithProtocol("udp").\n    WithMaxConn(1024).\n    WithTimeOut(30*time.Second).\n    Build()\n```\n\n## Functional Options (\u5229\u7528\u9ad8\u9636\u51fd\u6570/\u95ed\u5305)\n\n```go\n// \u9700\u8981\u914d\u7f6e\u7684\u7ed3\u6784\u4f53\ntype Server struct {\n    Addr     string\n    Port     int\n    Protocol string\n    Timeout  time.Duration\n    MaxConns int\n    TLS      *tls.Config\n}\n\n// \u5148\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7c7b\u578b\ntype Option func(*Server)\n\n// \u4f7f\u7528\u51fd\u6570\u5f0f\u7684\u65b9\u5f0f\u5b9a\u4e49\u4e00\u7ec4\u5982\u4e0b\u7684\u51fd\u6570\n// \u8fd4\u56de\u7684\u8fd9\u4e2a\u51fd\u6570\u4f1a\u8bbe\u7f6e\u81ea\u5df1\u7684 Server \u53c2\u6570\nfunc Protocol(p string) Option {\n    return func(s *Server) {\n        s.Protocol = p\n    }\n}\nfunc Timeout(timeout time.Duration) Option {\n    return func(s *Server) {\n        s.Timeout = timeout\n    }\n}\nfunc MaxConns(maxconns int) Option {\n    return func(s *Server) {\n        s.MaxConns = maxconns\n    }\n}\nfunc TLS(tls *tls.Config) Option {\n    return func(s *Server) {\n        s.TLS = tls\n    }\n}\n\n// \u4f7f\u7528\u4e00\u4e2afor-loop\u6765\u8bbe\u7f6e\u6211\u4eec\u7684 Server \u5bf9\u8c61\nfunc NewServer(addr string, port int, options ...func(*Server)) (*Server, error) {\n    srv := Server{\n        Addr:     addr,\n        Port:     port,\n        Protocol: "tcp",\n        Timeout:  30 * time.Second,\n        MaxConns: 1000,\n        TLS:      nil,\n    }\n    for _, option := range options {\n        option(&srv)\n    }\n    //...\n    return &srv, nil\n}\n\n// \u521b\u5efa Server \u5bf9\u8c61\ns1, _ := NewServer("localhost", 1024)\ns2, _ := NewServer("localhost", 2048, Protocol("udp"))\ns3, _ := NewServer("0.0.0.0", 8080, Timeout(300*time.Second), MaxConns(1000))\n```\n\n## Functional Options (UBER)\n\n```go\n// \u9700\u8981\u914d\u7f6e\u7684\u7ed3\u6784\u4f53\ntype options struct {\n    cache  bool\n    logger *zap.Logger\n}\n\n// \u5b9a\u4e49\u63a5\u53e3\ntype Option interface {\n    apply(*options)\n}\n\n// \u5b9a\u4e49\u914d\u7f6e\u9009\u9879\u7c7b\u578b\ntype cacheOption bool\nfunc (c cacheOption) apply(opts *options) {\n    opts.cache = bool(c)\n}\nfunc WithCache(c bool) Option {\n    return cacheOption(c)\n}\n\n// \u5b9a\u4e49\u914d\u7f6e\u9009\u9879\u7c7b\u578b\ntype loggerOption struct {\n    Log *zap.Logger\n}\nfunc (l loggerOption) apply(opts *options) {\n    opts.logger = l.Log\n}\nfunc WithLogger(log *zap.Logger) Option {\n    return loggerOption{Log: log}\n}\n\n// Open creates a connection.\nfunc Open(\n    addr string,\n    opts ...Option,\n) (*Connection, error) {\n    options := options{\n        cache:  defaultCache,\n        logger: zap.NewNop(),\n    }\n\n    for _, o := range opts {\n        o.apply(&options)\n    }\n\n    // ...\n}\n\n// \u4f7f\u7528\nc, _ := Open("localhost", WithCache(true), WithLogger(&zap.NewNop()))\n```\n'},Dc9z:function(n,t){throw new Error("Module parse failed: Unexpected character '\ufffd' (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n(Source code omitted for this binary file)")},DmHy:function(n,t,e){"use strict";e.r(t),t.default="\u68c0\u67e5\u4e24\u4e2a\u5f15\u7528\u662f\u5426\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61\n\n```dart\nbool identical(Object a, Object b)\n```\n"},Dsvz:function(n,t,e){"use strict";e.r(t),t.default='```rust\nuse List::*;\n\nenum List {\n    // Cons\uff1a\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c\u5305\u542b\u94fe\u8868\u7684\u4e00\u4e2a\u5143\u7d20\u548c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u8282\u70b9\u7684\u6307\u9488\n    Cons(u32, Box<List>),\n    // Nil\uff1a\u672b\u7ed3\u70b9\uff0c\u8868\u660e\u94fe\u8868\u7ed3\u675f\n    Nil,\n}\n\n// \u53ef\u4ee5\u4e3a enum \u5b9a\u4e49\u65b9\u6cd5\nimpl List {\n    // \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684 List \u5b9e\u4f8b\n    fn new() -> List {\n        // `Nil` \u4e3a `List` \u7c7b\u578b\uff08\u8bd1\u6ce8\uff1a\u56e0 `Nil` \u7684\u5b8c\u6574\u540d\u79f0\u662f `List::Nil`\uff09\n        Nil\n    }\n\n    // \u5904\u7406\u4e00\u4e2a List\uff0c\u5728\u5176\u5934\u90e8\u63d2\u5165\u65b0\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u8be5 List\n    fn prepend(self, elem: u32) -> List {\n        // `Cons` \u540c\u6837\u4e3a List \u7c7b\u578b\n        Cons(elem, Box::new(self))\n    }\n\n    // \u8fd4\u56de List \u7684\u957f\u5ea6\n    fn len(&self) -> u32 {\n        // \u5fc5\u987b\u5bf9 `self` \u8fdb\u884c\u5339\u914d\uff08match\uff09\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u65b9\u6cd5\u7684\u884c\u4e3a\u53d6\u51b3\u4e8e `self` \u7684\n        // \u53d6\u503c\u79cd\u7c7b\u3002\n        // `self` \u4e3a `&List` \u7c7b\u578b\uff0c`*self` \u4e3a `List` \u7c7b\u578b\uff0c\u5339\u914d\u4e00\u4e2a\u5177\u4f53\u7684 `T`\n        // \u7c7b\u578b\u8981\u597d\u8fc7\u5339\u914d\u5f15\u7528 `&T`\u3002\n        match *self {\n            // \u4e0d\u80fd\u5f97\u5230 tail \u7684\u6240\u6709\u6743\uff0c\u56e0\u4e3a `self` \u662f\u501f\u7528\u7684\uff1b\n            // \u56e0\u6b64\u4f7f\u7528\u4e00\u4e2a\u5bf9 tail \u7684\u5f15\u7528\n            Cons(_, ref tail) => 1 + tail.len(),\n            // \uff08\u9012\u5f52\u7684\uff09\u57fa\u51c6\u60c5\u5f62\uff08base case\uff09\uff1a\u4e00\u4e2a\u957f\u5ea6\u4e3a 0 \u7684\u7a7a\u5217\u8868\n            Nil => 0\n        }\n    }\n\n    // \u8fd4\u56de\u5217\u8868\u7684\u5b57\u7b26\u4e32\u8868\u793a\uff08\u8be5\u5b57\u7b26\u4e32\u662f\u5806\u5206\u914d\u7684\uff09\n    fn stringify(&self) -> String {\n        match *self {\n            Cons(head, ref tail) => {\n                // `format!` \u548c `print!` \u7c7b\u4f3c\uff0c\u4f46\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5806\u5206\u914d\u7684\u5b57\u7b26\u4e32\uff0c\n                // \u800c\u4e0d\u662f\u6253\u5370\u7ed3\u679c\u5230\u63a7\u5236\u53f0\u4e0a\n                format!("{}, {}", head, tail.stringify())\n            },\n            Nil => {\n                format!("Nil")\n            },\n        }\n    }\n}\n\nfn main() {\n    // \u521b\u5efa\u4e00\u4e2a\u7a7a\u94fe\u8868\n    let mut list = List::new();\n\n    // \u8ffd\u52a0\u4e00\u4e9b\u5143\u7d20\n    list = list.prepend(1);\n    list = list.prepend(2);\n    list = list.prepend(3);\n\n    // \u663e\u793a\u94fe\u8868\u7684\u6700\u540e\u72b6\u6001\n    println!("linked list has length: {}", list.len());\n    println!("{}", list.stringify());\n}\n```\n'},"DvT+":function(n,t,e){"use strict";e.r(t),t.default='\u7ed3\u6784\u4f53\uff08structure\uff0c\u7f29\u5199\u6210 struct\uff09\u6709 3 \u79cd\u7c7b\u578b\n\n- \u5143\u7ec4\u7ed3\u6784\u4f53\uff08tuple struct\uff09\uff0c\u4e8b\u5b9e\u4e0a\u5c31\u662f\u5177\u540d\u5143\u7ec4\u800c\u5df2\u3002\n- \u7ecf\u5178\u7684 C \u8bed\u8a00\u98ce\u683c\u7ed3\u6784\u4f53\uff08C struct\uff09\u3002\n- \u5355\u5143\u7ed3\u6784\u4f53\uff08unit struct\uff09\uff0c\u4e0d\u5e26\u5b57\u6bb5\uff0c\u5728\u6cdb\u578b\u4e2d\u5f88\u6709\u7528\u3002\n\n```rust\n#[derive(Debug)]\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nfn build_user(email: String, username: String) -> User {\n    User {\n        email,\n        username,\n        active: true,\n        sign_in_count: 1,\n    }\n}\n\nfn main() {\n    let mut user1 = build_user(\n        String::from("someone@example.com"),\n        String::from("someusername123"),\n    );\n    user1.email = String::from("anotheremail@example.com");\n    println!("{:?}", user1);\n\n    // \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5728\u521b\u5efa user2 \u540e\u4e0d\u80fd\u518d\u4f7f\u7528 user1\uff0c\n    // \u56e0\u4e3a user1 \u7684 username \u5b57\u6bb5\u4e2d\u7684 String \u88ab\u79fb\u5230 user2 \u4e2d\u3002\n    // \u5982\u679c\u6211\u4eec\u7ed9 user2 \u7684 email \u548c username \u90fd\u8d4b\u4e88\u65b0\u7684 String \u503c\uff0c\n    // \u4ece\u800c\u53ea\u4f7f\u7528 user1 \u7684 active \u548c sign_in_count \u503c\uff0c\n    // \u90a3\u4e48 user1 \u5728\u521b\u5efa user2 \u540e\u4ecd\u7136\u6709\u6548\u3002\n    let user2 = User {\n        email: String::from("another@example.com"),\n        ..user1\n    };\n    println!("{:#?}", user2);\n}\n```\n\n```sh\nUser { active: true, username: "someusername123", email: "anotheremail@example.com", sign_in_count: 1 }\nUser {\n    active: true,\n    username: "someusername123",\n    email: "another@example.com",\n    sign_in_count: 1,\n}\n```\n\n```rust\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    // \u65b9\u6cd5\n    fn area(&self) -> u32 {\n        self.width * self.height\n    }\n    // \u5e26\u53c2\u6570\u7684\u65b9\u6cd5\n    fn can_hold(&self, other: &Rectangle) -> bool {\n        self.width > other.width && self.height > other.height\n    }\n    // \u5173\u8054\u51fd\u6570\uff08associated function\uff09\n    fn square(size: u32) -> Rectangle {\n        Rectangle {\n            width: size,\n            height: size,\n        }\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        "The area of the rectangle is {} square pixels.",\n        rect1.area()\n    );\n}\n```\n\n## \u6253\u5370\u7ed3\u6784\u4f53\n\n```rust\n// \u5728\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e4b\u524d\u52a0\u4e0a\u5916\u90e8\u5c5e\u6027 #[derive(Debug)]\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!("rect1 is {:?}", rect1);\n}\n```\n\n```rust\n// \u4f7f\u7528 dbg! \u5b8f\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let scale = 2;\n    let rect1 = Rectangle {\n        width: dbg!(30 * scale),\n        height: 50,\n    };\n\n    dbg!(&rect1);\n}\n```\n\n## \u5143\u7ec4\u7ed3\u6784\u4f53\uff08tuple struct\uff09\n\n```rust\n// black \u548c origin \u503c\u7684\u7c7b\u578b\u4e0d\u540c\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4e0d\u540c\u7684\u5143\u7ec4\u7ed3\u6784\u4f53\u7684\u5b9e\u4f8b\u3002\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}\n```\n\n## \u7c7b\u5355\u5143\u7ed3\u6784\u4f53\uff08unit-like structs\uff09\n\n\u7c7b\u5355\u5143\u7ed3\u6784\u4f53\u5e38\u5e38\u5728\u4f60\u60f3\u8981\u5728\u67d0\u4e2a\u7c7b\u578b\u4e0a\u5b9e\u73b0 `trait` \u4f46\u4e0d\u9700\u8981\u5728\u7c7b\u578b\u4e2d\u5b58\u50a8\u6570\u636e\u7684\u65f6\u5019\u53d1\u6325\u4f5c\u7528\u3002\n\n```rust\nstruct AlwaysEqual;\n\nfn main() {\n    let subject = AlwaysEqual;\n}\n```\n'},EGuZ:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u51fd\u6570\u548c\u65b9\u6cd5\n---"},"Ejz/":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u95ed\u5305\n---"},EqfN:function(n,t,e){"use strict";e.r(t),t.default='## \u6761\u4ef6\u8868\u8fbe\u5f0f\n\n```python\nx = 2\ny = 3\n\n# even\nprint("even" if x % 2 == 0 else "odd")\n# odd\nprint("even" if y % 2 == 0 else "odd")\n```\n'},F0P6:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u968f\u673a\u6570\n---"},F0kP:function(n,t,e){"use strict";e.r(t),t.default="```python\nimport types\ntype(myInt) is types.IntType\ntype(myInt) is type(1)\nisinstance(myInt, int)\n```\n"},F2EI:function(n,t,e){"use strict";e.r(t),t.default='```c++\nstruct fraction {\n  int numerator;\n  int denominator;\n};\nstruct fraction f1;\nf1.numerator = 22;\nf1.denominator = 7;\n\n\nstruct car {\n  char* name;\n  float price;\n  int speed;\n};\nstruct car saturn = {"Saturn SL/2", 16000.99, 175};\n// or\nstruct car saturn = {.speed=172, .name="Saturn SL/2"};\n// \u4fee\u6539\u5c5e\u6027\u503c\nsaturn.speed = 168;\n\n\n// struct \u7684\u6570\u636e\u7c7b\u578b\u58f0\u660e\u8bed\u53e5\u4e0e\u53d8\u91cf\u7684\u58f0\u660e\u8bed\u53e5\u5408\u5e76\nstruct book {\n  char title[500];\n  char author[100];\n  float value;\n} b1;\n// \u7701\u7565\u7c7b\u578b\u540d\nstruct {\n  char title[500];\n  char author[100];\n  float value;\n} b1;\n// \u58f0\u660e\u53d8\u91cf\u7684\u540c\u65f6\uff0c\u5bf9\u53d8\u91cf\u8d4b\u503c\nstruct {\n  char title[500];\n  char author[100];\n  float value;\n} b1 = {"Harry Potter", "J. K. Rowling", 10.0},\n  b2 = {"Cancer Ward", "Aleksandr Solzhenitsyn", 7.85};\n\n\n// typedef\u547d\u4ee4\u53ef\u4ee5\u4e3a struct \u7ed3\u6784\u6307\u5b9a\u4e00\u4e2a\u522b\u540d\ntypedef struct cell_phone {\n  int cell_no;\n  float minutes_of_charge;\n} phone;\nphone p = {5551234, 5};\n\n\n// \u6307\u9488\u53d8\u91cf\u4e5f\u53ef\u4ee5\u6307\u5411struct\u7ed3\u6784\nstruct book {\n  char title[500];\n  char author[100];\n  float value;\n}* b1;\n// \u6216\u8005\u5199\u6210\u4e24\u4e2a\u8bed\u53e5\nstruct book {\n  char title[500];\n  char author[100];\n  float value;\n};\nstruct book* b1;\n\n\n// struct \u7ed3\u6784\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u6570\u7ec4\u6210\u5458\nstruct fraction {\n  int numerator;\n  int denominator;\n};\nstruct fraction numbers[1000];\nnumbers[0].numerator = 22;\nnumbers[0].denominator = 7;\n```\n\n`struct foo`\u6709\u4e09\u4e2a\u5c5e\u6027\uff0c\u5728 64 \u4f4d\u8ba1\u7b97\u673a\u4e0a\u5360\u7528\u7684\u5b58\u50a8\u7a7a\u95f4\u5206\u522b\u662f\uff1a\n\n- `int a`\u5360 4 \u4e2a\u5b57\u8282\uff0c\n- \u6307\u9488`char* b`\u5360 8 \u4e2a\u5b57\u8282\uff0c\n- `char c`\u5360 1 \u4e2a\u5b57\u8282\u3002\n\n\u5b83\u4eec\u52a0\u8d77\u6765\uff0c\u4e00\u5171\u662f 13 \u4e2a\u5b57\u8282\uff084 + 8 + 1\uff09\u3002\n\u4f46\u662f\u5b9e\u9645\u4e0a\uff0c`struct foo`\u4f1a\u5360\u7528 24 \u4e2a\u5b57\u8282\n\n```c++\nstruct foo {\n  int a;\n  char* b;\n  char c;\n};\nprintf("%d\\n", sizeof(struct foo)); // 24\n\n// \u771f\u5b9e\u7684\u7ed3\u6784\nstruct foo {\n  int a;        // 4\n  char pad1[4]; // \u586b\u51454\u5b57\u8282\n  char *b;      // 8\n  char c;       // 1\n  char pad2[7]; // \u586b\u51457\u5b57\u8282\n};\nprintf("%d\\n", sizeof(struct foo)); // 24\n\n// \u5b58\u50a8\u7a7a\u95f4\u9012\u589e\u7684\u987a\u5e8f\uff0c\u5b9a\u4e49\u6bcf\u4e2a\u5c5e\u6027\nstruct foo {\n  char c;\n  int a;\n  char* b;\n};\nprintf("%d\\n", sizeof(struct foo)); // 16\n```\n\n## struct \u7684\u590d\u5236\n\n```c++\nstruct cat { char name[30]; short age; } a, b;\n\nstrcpy(a.name, "Hula");\na.age = 3;\n\nb = a;\nb.name[0] = \'M\';\n\nprintf("%s\\n", a.name); // Hula\nprintf("%s\\n", b.name); // Mula\n```\n\n## struct \u6307\u9488\n\n```c++\n#include <stdio.h>\n\nstruct turtle {\n  char* name;\n  char* species;\n  int age;\n};\n\nvoid happy(struct turtle t) {\n  t.age = t.age + 1;\n}\n\nint main() {\n  struct turtle myTurtle = {"MyTurtle", "sea turtle", 99};\n  happy(myTurtle);\n  printf("Age is %i\\n", myTurtle.age); // \u8f93\u51fa 99\n  return 0;\n}\n```\n\n```c++\n#include <stdio.h>\n\nstruct turtle {\n  char* name;\n  char* species;\n  int age;\n};\n\nvoid happy(struct turtle* t) {\n  (*t).age = (*t).age + 1;\n}\n// \u6216\u8005\u4f7f\u7528\u7bad\u5934\u8fd0\u7b97\u7b26\n// ptr == &myStruct\n// myStruct.prop == (*ptr).prop == ptr->prop\nvoid happy(struct turtle* t) {\n  t->age = t->age + 1;\n}\n\nint main() {\n  struct turtle myTurtle = {"MyTurtle", "sea turtle", 99};\n  happy(&myTurtle);\n  printf("Age is %i\\n", myTurtle.age); // \u8f93\u51fa 99\n  return 0;\n}\n```\n\n## struct \u7684\u5d4c\u5957\n\n```c++\nstruct species {\n  char* name;\n  int kinds;\n};\nstruct fish {\n  char* name;\n  int age;\n  struct species breed;\n};\n\n// \u8d4b\u503c\n// \u5199\u6cd5\u4e00\nstruct fish shark = {"shark", 9, {"Selachimorpha", 500}};\n\n// \u5199\u6cd5\u4e8c\nstruct species myBreed = {"Selachimorpha", 500};\nstruct fish shark = {"shark", 9, myBreed};\n\n// \u5199\u6cd5\u4e09\nstruct fish shark = {\n  .name="shark",\n  .age=9,\n  .breed={"Selachimorpha", 500}\n};\n\n// \u5199\u6cd5\u56db\nstruct fish shark = {\n  .name="shark",\n  .age=9,\n  .breed.name="Selachimorpha",\n  .breed.kinds=500\n};\n\nprintf("Shark\'s species is %s", shark.breed.name);\n\n\n\nstruct name {\n  char first[50];\n  char last[50];\n};\nstruct student {\n  struct name name;\n  short age;\n  char sex;\n} student1;\n\nstrcpy(student1.name.first, "Harry");\nstrcpy(student1.name.last, "Potter");\n// or\nstruct name myname = {"Harry", "Potter"};\nstudent1.name = myname;\n```\n\n### \u94fe\u8868\u7ed3\u6784\n\n```c++\nstruct node {\n  int data;\n  struct node* next;\n};\n\nstruct node* head;\n\n// \u751f\u6210\u4e00\u4e2a\u4e09\u4e2a\u8282\u70b9\u7684\u5217\u8868 (11)->(22)->(33)\nhead = malloc(sizeof(struct node));\n\nhead->data = 11;\nhead->next = malloc(sizeof(struct node));\n\nhead->next->data = 22;\nhead->next->next = malloc(sizeof(struct node));\n\nhead->next->next->data = 33;\nhead->next->next->next = NULL;\n\n// \u904d\u5386\u8fd9\u4e2a\u5217\u8868\nfor (struct node *cur = head; cur != NULL; cur = cur->next) {\n  printf("%d\\n", cur->data);\n}\n```\n\n## \u4f4d\u5b57\u6bb5\n\n```c++\nstruct {\n  unsigned int ab:1;\n  unsigned int cd:1;\n  unsigned int ef:1;\n  unsigned int gh:1;\n} synth;\n\nsynth.ab = 0;\nsynth.cd = 1;\n```\n\n## \u5f39\u6027\u6570\u7ec4\u6210\u5458\n\n\u5f39\u6027\u6210\u5458\u7684\u6570\u7ec4\uff0c\u5fc5\u987b\u662f `struct` \u7ed3\u6784\u7684\u6700\u540e\u4e00\u4e2a\u5c5e\u6027\u3002\n\u53e6\u5916\uff0c\u9664\u4e86\u5f39\u6027\u6570\u7ec4\u6210\u5458\uff0c`struct` \u7ed3\u6784\u5fc5\u987b\u81f3\u5c11\u8fd8\u6709\u4e00\u4e2a\u5176\u4ed6\u5c5e\u6027\u3002\n\n```c++\nstruct vstring {\n  int len;\n  char chars[];\n};\nstruct vstring* str = malloc(sizeof(struct vstring) + n * sizeof(char));\nstr->len = n;\n```\n'},FLI6:function(n,t,e){"use strict";e.r(t),t.default='```go\n// \u8fd9\u91cc\u7c7b\u578b\u7ea6\u675f\u4f7f\u7528\u4e86\u7a7a\u63a5\u53e3\uff0c\u4ee3\u8868\u7684\u610f\u601d\u662f\u6240\u6709\u7c7b\u578b\u90fd\u53ef\u4ee5\u7528\u6765\u5b9e\u4f8b\u5316\u6cdb\u578b\u7c7b\u578b Queue[T]\ntype Queue[T interface{}] struct {\n    elements []T\n}\n\n// \u5c06\u6570\u636e\u653e\u5165\u961f\u5217\u5c3e\u90e8\nfunc (q *Queue[T]) Put(value T) {\n    q.elements = append(q.elements, value)\n}\n\n// \u4ece\u961f\u5217\u5934\u90e8\u53d6\u51fa\u5e76\u4ece\u5934\u90e8\u5220\u9664\u5bf9\u5e94\u6570\u636e\nfunc (q *Queue[T]) Pop() (T, bool) {\n    var value T\n    if len(q.elements) == 0 {\n        return value, true\n    }\n\n    value = q.elements[0]\n    q.elements = q.elements[1:]\n    return value, len(q.elements) == 0\n}\n\n// \u961f\u5217\u5927\u5c0f\nfunc (q Queue[T]) Size() int {\n    return len(q.elements)\n}\n\nvar q1 Queue[int]  // \u53ef\u5b58\u653eint\u7c7b\u578b\u6570\u636e\u7684\u961f\u5217\nq1.Put(1)\nq1.Put(2)\nq1.Put(3)\nq1.Pop() // 1\nq1.Pop() // 2\nq1.Pop() // 3\n\nvar q2 Queue[string]  // \u53ef\u5b58\u653estring\u7c7b\u578b\u6570\u636e\u7684\u961f\u5217\nq2.Put("A")\nq2.Put("B")\nq2.Put("C")\nq2.Pop() // "A"\nq2.Pop() // "B"\nq2.Pop() // "C"\n\nvar q3 Queue[struct{Name string}]\nvar q4 Queue[[]int] // \u53ef\u5b58\u653e[]int\u5207\u7247\u7684\u961f\u5217\nvar q5 Queue[chan int] // \u53ef\u5b58\u653eint\u901a\u9053\u7684\u961f\u5217\nvar q6 Queue[io.Reader] // \u53ef\u5b58\u653e\u63a5\u53e3\u7684\u961f\u5217\n// ......\n```\n'},Fd77:function(n,t,e){"use strict";e.r(t),t.default="```sh\n# \u66f4\u65b0 pip\npython3 -m pip install --user --upgrade pip\npython3 -m pip --version\n\n# \u5b89\u88c5 virtualenv \uff08Python 3.3 \u4ee5\u4e0a\u65e0\u9700\u5b89\u88c5\uff09\npython3 -m pip install --user virtualenv\n\n# \u521b\u5efa\u865a\u62df\u73af\u5883\npython3 -m venv env\n# \u521b\u5efa\u865a\u62df\u73af\u5883\u540e\uff0c\u60a8\u53ef\u4ee5\u6fc0\u6d3b\u5b83\u3002\nsource env/bin/activate\n# \u79bb\u5f00\u865a\u62df\u73af\u5883\ndeactivate\n\n# \u68c0\u67e5 python \u8def\u5f84\nwhich python\n```\n\n```sh\npip search astronomy\npip install novas\npip install request\npip install requests==2.6.0\npip install requests>=2.0.0,<3.0.0\npip install --upgrade requests\npip show requests\npip list\npip freeze > requirements.txt\npip install -r requirements.txt\n```\n"},Fddx:function(n,t,e){"use strict";e.r(t),t.default="```sh\n#\u5185\u5efa\u5e38\u91cf:\ntrue false iota nil\n\n#\u5185\u5efa\u7c7b\u578b:\nint int8 int16 int32 int64\nuint uint8 uint16 uint32 uint64 uintptr\nfloat32 float64 complex128 complex64\nbool byte rune string error\n\n#\u5185\u5efa\u51fd\u6570:\nmake len cap new append copy close delete\ncomplex real imag\npanic recover\n```\n"},FiYD:function(n,t,e){"use strict";e.r(t),t.default="## \u7c7b\u578b\u7684\u663e\u793a\u8f6c\u6362\n\n```c++\n// \u5c06\u53d8\u91cfch\u8f6c\u6210\u65e0\u7b26\u53f7\u7684\u5b57\u7b26\u7c7b\u578b\n(unsigned char) ch;\n\n// (long int)\u5c0610\u663e\u5f0f\u8f6c\u4e3along int\u7c7b\u578b\u3002\n// \u8fd9\u91cc\u7684\u663e\u793a\u8f6c\u6362\u5176\u5b9e\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u8d4b\u503c\u8fd0\u7b97\u7b26\u4f1a\u81ea\u52a8\u5c06\u53f3\u8fb9\u7684\u503c\uff0c\u8f6c\u4e3a\u5de6\u8fb9\u53d8\u91cf\u7684\u7c7b\u578b\u3002\nlong int y = (long int) 10 + 12;\n```"},FjEW:function(n,t,e){"use strict";e.r(t),t.default="```sh\n# \u5185\u7f6e\u51fd\u6570 range() \u4f1a\u6d3e\u4e0a\u7528\u573a\u3002\u5b83\u751f\u6210\u7b97\u672f\u7ea7\u6570:\n>>> for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n\n# range\u4e5f\u53ef\u4ee5\u4ee5\u53e6\u4e00\u4e2a\u6570\u5b57\u5f00\u5934\uff0c\u6216\u8005\u4ee5\u6307\u5b9a\u7684\u5e45\u5ea6\u589e\u52a0\nrange(5, 10)\n   5, 6, 7, 8, 9\n\nrange(0, 10, 3)\n   0, 3, 6, 9\n\nrange(-10, -100, -30)\n  -10, -40, -70\n\n# \u8981\u4ee5\u5e8f\u5217\u7684\u7d22\u5f15\u6765\u8fed\u4ee3\uff0c\u60a8\u53ef\u4ee5\u5c06 range() \u548c len() \u7ec4\u5408\u5982\u4e0b:\n# \u7136\u800c\uff0c\u5728\u5927\u591a\u6570\u8fd9\u7c7b\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 enumerate() \u51fd\u6570\u6bd4\u8f83\u65b9\u4fbf\n>>> a = ['Mary', 'had', 'a', 'little', 'lamb']\n>>> for i in range(len(a)):\n...     print(i, a[i])\n...\n0 Mary\n1 had\n2 a\n3 little\n4 lamb\n\n# range \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61\n>>> print(range(10))\nrange(0, 10)\n>>> list(range(5))\n[0, 1, 2, 3, 4]\n```\n"},Fm8s:function(n,t,e){"use strict";e.r(t),t.default='switch \u662f\u7f16\u5199\u4e00\u8fde\u4e32 if - else \u8bed\u53e5\u7684\u7b80\u4fbf\u65b9\u6cd5\u3002\n\u5b83\u8fd0\u884c\u7b2c\u4e00\u4e2a\u503c\u7b49\u4e8e\u6761\u4ef6\u8868\u8fbe\u5f0f\u7684 case \u8bed\u53e5\u3002\n\nGo \u53ea\u8fd0\u884c\u9009\u5b9a\u7684 case\uff0c\u800c\u975e\u4e4b\u540e\u6240\u6709\u7684 case\u3002\nGo \u81ea\u52a8\u63d0\u4f9b\u4e86\u5728\u8fd9\u4e9b\u8bed\u8a00\u4e2d\u6bcf\u4e2a case \u540e\u9762\u6240\u9700\u7684 break \u8bed\u53e5\u3002\n\u9664\u975e\u4ee5 fallthrough \u8bed\u53e5\u7ed3\u675f\uff0c\u5426\u5219\u5206\u652f\u4f1a\u81ea\u52a8\u7ec8\u6b62\u3002\nGo \u7684\u53e6\u4e00\u70b9\u91cd\u8981\u7684\u4e0d\u540c\u5728\u4e8e switch \u7684 case \u65e0\u9700\u4e3a\u5e38\u91cf\uff0c\u4e14\u53d6\u503c\u4e0d\u5fc5\u4e3a\u6574\u6570\u3002\n\n```go\npackage main\nimport (\n  "fmt"\n  "runtime"\n)\nfunc main() {\n  fmt.Print("Go runs on ")\n  switch os := runtime.GOOS; os {\n    case "darwin":\n      fmt.Println("OS X.")\n    case "linux":\n      fmt.Println("Linux.")\n    default:\n      // freebsd, openbsd,\n      // plan9, windows...\n      fmt.Printf("%s.\\n", os)\n  }\n}\n// Go runs on Linux.\n\n\n// switch \u7684 case \u8bed\u53e5\u4ece\u4e0a\u5230\u4e0b\u987a\u6b21\u6267\u884c\uff0c\u76f4\u5230\u5339\u914d\u6210\u529f\u65f6\u505c\u6b62\u3002\npackage main\nimport (\n  "fmt"\n  "time"\n)\nfunc main() {\n  fmt.Println("When\'s Saturday?")\n  fmt.Println(time.Now())\n  fmt.Println(time.Saturday)\n  today := time.Now().Weekday()\n  switch time.Saturday {\n    case today + 0:\n      fmt.Println("Today.")\n    case today + 1:\n      fmt.Println("Tomorrow.")\n    case today + 2:\n      fmt.Println("In two days.")\n    default:\n      fmt.Println("Too far away.")\n  }\n}\n// When\'s Saturday?\n// 2009-11-10 23:00:00 +0000 UTC m=+0.000000001\n// Saturday\n// Too far away.\n\n\n// \u6ca1\u6709\u6761\u4ef6\u7684 switch \u540c switch true \u4e00\u6837\u3002\n// \u8fd9\u79cd\u5f62\u5f0f\u80fd\u5c06\u4e00\u957f\u4e32 if-then-else \u5199\u5f97\u66f4\u52a0\u6e05\u6670\u3002\npackage main\nimport (\n  "fmt"\n  "time"\n)\nfunc main() {\n  t := time.Now()\n  fmt.Println(t)\n  switch {\n    case t.Hour() < 12:\n      fmt.Println("Good morning!")\n    case t.Hour() < 17:\n      fmt.Println("Good afternoon.")\n    default:\n      fmt.Println("Good evening.")\n  }\n}\n\nfunc unhex(c byte) byte {\n  switch {\n  case \'0\' <= c && c <= \'9\':\n    return c - \'0\'\n  case \'a\' <= c && c <= \'f\':\n    return c - \'a\' + 10\n  case \'A\' <= c && c <= \'F\':\n    return c - \'A\' + 10\n  }\n  return 0\n}\n\n// switch \u5e76\u4e0d\u4f1a\u81ea\u52a8\u4e0b\u6eaf\uff0c\u4f46 case \u53ef\u901a\u8fc7\u9017\u53f7\u5206\u9694\u6765\u5217\u4e3e\u76f8\u540c\u7684\u5904\u7406\u6761\u4ef6\u3002\nfunc shouldEscape(c byte) bool {\n  switch c {\n  case \' \', \'?\', \'&\', \'=\', \'#\', \'+\', \'%\':\n    return true\n  }\n  return false\n}\n```\n\n\u7c7b\u578b\u5f00\u5173 (type switch) \u6bd4\u8f83\u7c7b\u578b\u800c\u975e\u503c\u3002\u53ef\u4ee5\u7528\u6765\u53d1\u73b0\u4e00\u4e2a\u63a5\u53e3\u503c\u7684\u7c7b\u578b\u3002\n\n```go\nwhatAmI := func(i interface{}) {\n  switch t := i.(type) {\n  case bool:\n    fmt.Println("I\'m a bool")\n  case int:\n    fmt.Println("I\'m an int")\n  default:\n    fmt.Printf("Don\'t know type %T\\n", t)\n  }\n}\nwhatAmI(true)\nwhatAmI(1)\nwhatAmI("hey")\n// I\'m a bool\n// I\'m an int\n// Don\'t know type string\n```\n'},FmBC:function(n,t,e){"use strict";e.r(t),t.default="```python\nx = \"Hello\"\n# Hello World\nprint(f\"{x} World\")\n```\n\n```sh\n>>> year = 2016\n>>> event = 'Referendum'\n>>> f'Results of the {year} {event}'\n'Results of the 2016 Referendum'\n\n>>> yes_votes = 42_572_654\n>>> no_votes = 43_132_495\n>>> percentage = yes_votes / (yes_votes + no_votes)\n>>> '{:-9} YES votes  {:2.2%}'.format(yes_votes, percentage)\n' 42572654 YES votes  49.67%'\n\n# \u5f53\u4f60\u4e0d\u9700\u8981\u82b1\u54e8\u7684\u8f93\u51fa\u800c\u53ea\u662f\u60f3\u5feb\u901f\u663e\u793a\u67d0\u4e9b\u53d8\u91cf\u4ee5\u8fdb\u884c\u8c03\u8bd5\u65f6\uff0c\n# \u53ef\u4ee5\u4f7f\u7528 repr() or str() \u51fd\u6570\u5c06\u4efb\u4f55\u503c\u8f6c\u5316\u4e3a\u5b57\u7b26\u4e32\u3002\n>>> s = 'Hello, world.'\n>>> str(s)\n'Hello, world.'\n>>> repr(s)\n\"'Hello, world.'\"\n>>> str(1/7)\n'0.14285714285714285'\n>>> x = 10 * 3.25\n>>> y = 200 * 200\n>>> s = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'\n>>> print(s)\nThe value of x is 32.5, and y is 40000...\n>>> # The repr() of a string adds string quotes and backslashes:\n... hello = 'hello, world\\n'\n>>> hellos = repr(hello)\n>>> print(hellos)\n'hello, world\\n'\n>>> # The argument to repr() may be any Python object:\n... repr((x, y, ('spam', 'eggs')))\n\"(32.5, 40000, ('spam', 'eggs'))\"\n\n# \u5c06pi\u820d\u5165\u5230\u5c0f\u6570\u70b9\u540e\u4e09\u4f4d:\n>>> import math\n>>> print(f'The value of pi is approximately {math.pi:.3f}.')\nThe value of pi is approximately 3.142.\n\n# \u5728 ':' \u540e\u4f20\u9012\u4e00\u4e2a\u6574\u6570\u53ef\u4ee5\u8ba9\u8be5\u5b57\u6bb5\u6210\u4e3a\u6700\u5c0f\u5b57\u7b26\u5bbd\u5ea6\u3002\u8fd9\u5728\u4f7f\u5217\u5bf9\u9f50\u65f6\u5f88\u6709\u7528\u3002\n>>> table = {'Sjoerd': 4127, 'Jack': 4098, 'Dcab': 7678}\n>>> for name, phone in table.items():\n...     print(f'{name:10} ==> {phone:10d}')\n...\nSjoerd     ==>       4127\nJack       ==>       4098\nDcab       ==>       7678\n\n# \u5176\u4ed6\u7684\u4fee\u9970\u7b26\u53ef\u7528\u4e8e\u5728\u683c\u5f0f\u5316\u4e4b\u524d\u8f6c\u5316\u503c\u3002\n# '!a' \u5e94\u7528 ascii() \uff0c'!s' \u5e94\u7528 str()\uff0c\u8fd8\u6709 '!r' \u5e94\u7528 repr():\n>>> animals = 'eels'\n>>> print(f'My hovercraft is full of {animals}.')\nMy hovercraft is full of eels.\n>>> print(f'My hovercraft is full of {animals!r}.')\nMy hovercraft is full of 'eels'.\n\n# \u5b57\u7b26\u4e32\u7684 format() \u65b9\u6cd5\n>>> print('We are the {} who say \"{}!\"'.format('knights', 'Ni'))\nWe are the knights who say \"Ni!\"\n\n>>> print('{0} and {1}'.format('spam', 'eggs'))\nspam and eggs\n>>> print('{1} and {0}'.format('spam', 'eggs'))\neggs and spam\n\n>>> print('This {food} is {adjective}.'.format(\n...       food='spam', adjective='absolutely horrible'))\nThis spam is absolutely horrible.\n\n>>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',\n                                                       other='Georg'))\nThe story of Bill, Manfred, and Georg.\n\n>>> for x in range(1, 11):\n...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))\n...\n 1   1    1\n 2   4    8\n 3   9   27\n 4  16   64\n 5  25  125\n 6  36  216\n 7  49  343\n 8  64  512\n 9  81  729\n10 100 1000\n\n# str.zfill() \uff0c\u5b83\u4f1a\u5728\u6570\u5b57\u5b57\u7b26\u4e32\u7684\u5de6\u8fb9\u586b\u5145\u96f6\u3002\u5b83\u80fd\u8bc6\u522b\u6b63\u8d1f\u53f7:\n>>> '12'.zfill(5)\n'00012'\n>>> '-3.14'.zfill(7)\n'-003.14'\n>>> '3.14159265359'.zfill(5)\n'3.14159265359'\n\n# \u65e7\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u65b9\u6cd5\n>>> import math\n>>> print('The value of pi is approximately %5.3f.' % math.pi)\nThe value of pi is approximately 3.142.\n\n>>> import reprlib\n>>> reprlib.repr(set('supercalifragilisticexpialidocious'))\n\"{'a', 'c', 'd', 'e', 'f', 'g', ...}\"\n\n>>> import pprint\n>>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',\n...     'yellow'], 'blue']]]\n...\n>>> pprint.pprint(t, width=30)\n[[[['black', 'cyan'],\n   'white',\n   ['green', 'red']],\n  [['magenta', 'yellow'],\n   'blue']]]\n\n>>> import textwrap\n>>> doc = \"\"\"The wrap() method is just like fill() except that it returns\n... a list of strings instead of one big string with newlines to separate\n... the wrapped lines.\"\"\"\n...\n>>> print(textwrap.fill(doc, width=40))\nThe wrap() method is just like fill()\nexcept that it returns a list of strings\ninstead of one big string with newlines\nto separate the wrapped lines.\n```\n"},FrZS:function(n,t,e){"use strict";e.r(t),t.default='\u4e00\u4e2a\u7ed3\u6784\u4f53\uff08struct\uff09\u5c31\u662f\u4e00\u7ec4\u5b57\u6bb5\uff08field\uff09\u3002\n\n```go\npackage main\nimport "fmt"\ntype Vertex struct {\n  X int\n  Y int\n}\nfunc main() {\n  fmt.Println(Vertex{1, 2})\n  fmt.Println(Vertex{X:1, Y:2})\n}\n\n// \u7ed3\u6784\u4f53\u5b57\u6bb5\u4f7f\u7528\u70b9\u53f7\u6765\u8bbf\u95ee\u3002\npackage main\nimport "fmt"\ntype Vertex struct {\n  X int\n  Y int\n}\nfunc main() {\n  v := Vertex{1, 2}\n  v.X = 4\n  fmt.Println(v.X)\n}\n\n\n// \u5982\u679c\u6211\u4eec\u6709\u4e00\u4e2a\u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488 p\uff0c\n// \u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7 (*p).X \u6765\u8bbf\u95ee\u5176\u5b57\u6bb5 X\u3002\n//\u4e0d\u8fc7\u8fd9\u4e48\u5199\u592a\u5570\u55e6\u4e86\uff0c\u6240\u4ee5\u8bed\u8a00\u4e5f\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u9690\u5f0f\u95f4\u63a5\u5f15\u7528\uff0c\n//\u76f4\u63a5\u5199 p.X \u5c31\u53ef\u4ee5\u3002\npackage main\nimport "fmt"\ntype Vertex struct {\n  X int\n  Y int\n}\nfunc main() {\n  v := Vertex{1, 2}\n  p := &v\n  // var p int = &v\n  fmt.Println(p)\n  fmt.Println(*p)\n  p.X = 3\n  // (*p).X = 3\n  fmt.Println(v)\n}\n// &{1 2}\n// {1 2}\n// {3 2}\n\n\n// \u4ec5\u5217\u51fa\u90e8\u5206\u5b57\u6bb5\u3002\uff08\u5b57\u6bb5\u540d\u7684\u987a\u5e8f\u65e0\u5173\u3002\uff09\npackage main\nimport "fmt"\ntype Vertex struct {\n  X, Y int\n}\nvar (\n  v1 = Vertex{1, 2}  // \u521b\u5efa\u4e00\u4e2a Vertex \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\n  v2 = Vertex{X: 1}  // Y:0 \u88ab\u9690\u5f0f\u5730\u8d4b\u4e88\n  v3 = Vertex{}      // X:0 Y:0\n  p  = &Vertex{1, 2} // \u521b\u5efa\u4e00\u4e2a *Vertex \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\uff08\u6307\u9488\uff09\n)\nfunc main() {\n  fmt.Println(v1, p, v2, v3)\n}\n// {1 2} &{1 2} {1 0} {0 0}\n\n\n// struct\u7684\u533f\u540d\u5b57\u6bb5\npackage main\nimport "fmt"\ntype Human struct {\n  name string\n  age int\n  weight int\n}\n\ntype Student struct {\n  Human  // \u533f\u540d\u5b57\u6bb5\uff0c\u90a3\u4e48\u9ed8\u8ba4Student\u5c31\u5305\u542b\u4e86Human\u7684\u6240\u6709\u5b57\u6bb5\n  speciality string\n}\n\nfunc main() {\n  // \u6211\u4eec\u521d\u59cb\u5316\u4e00\u4e2a\u5b66\u751f\n  mark := Student{Human{"Mark", 25, 120}, "Computer Science"}\n\n  // \u6211\u4eec\u8bbf\u95ee\u76f8\u5e94\u7684\u5b57\u6bb5\n  fmt.Println("His name is ", mark.name)\n  fmt.Println("His age is ", mark.age)\n  fmt.Println("His weight is ", mark.weight)\n  fmt.Println("His speciality is ", mark.speciality)\n  // \u4fee\u6539\u5bf9\u5e94\u7684\u5907\u6ce8\u4fe1\u606f\n  mark.speciality = "AI"\n  fmt.Println("Mark changed his speciality")\n  fmt.Println("His speciality is ", mark.speciality)\n  // \u4fee\u6539\u4ed6\u7684\u5e74\u9f84\u4fe1\u606f\n  fmt.Println("Mark become old")\n  mark.age = 46\n  fmt.Println("His age is", mark.age)\n  // \u4fee\u6539\u4ed6\u7684\u4f53\u91cd\u4fe1\u606f\n  fmt.Println("Mark is not an athlet anymore")\n  mark.weight += 60\n  fmt.Println("His weight is", mark.weight)\n}\n\n\npackage main\nimport "fmt"\ntype Skills []string\ntype Human struct {\n  name string\n  age int\n  weight int\n}\ntype Student struct {\n  Human  // \u533f\u540d\u5b57\u6bb5\uff0cstruct\n  Skills // \u533f\u540d\u5b57\u6bb5\uff0c\u81ea\u5b9a\u4e49\u7684\u7c7b\u578bstring slice\n  int    // \u5185\u7f6e\u7c7b\u578b\u4f5c\u4e3a\u533f\u540d\u5b57\u6bb5\n  speciality string\n}\nfunc main() {\n  // \u521d\u59cb\u5316\u5b66\u751fJane\n  jane := Student{Human:Human{"Jane", 35, 100}, speciality:"Biology"}\n  // \u73b0\u5728\u6211\u4eec\u6765\u8bbf\u95ee\u76f8\u5e94\u7684\u5b57\u6bb5\n  fmt.Println("Her name is ", jane.name)\n  fmt.Println("Her age is ", jane.age)\n  fmt.Println("Her weight is ", jane.weight)\n  fmt.Println("Her speciality is ", jane.speciality)\n  // \u6211\u4eec\u6765\u4fee\u6539\u4ed6\u7684skill\u6280\u80fd\u5b57\u6bb5\n  jane.Skills = []string{"anatomy"}\n  fmt.Println("Her skills are ", jane.Skills)\n  fmt.Println("She acquired two new ones ")\n  jane.Skills = append(jane.Skills, "physics", "golang")\n  fmt.Println("Her skills now are ", jane.Skills)\n  // \u4fee\u6539\u533f\u540d\u5185\u7f6e\u7c7b\u578b\u5b57\u6bb5\n  jane.int = 3\n  fmt.Println("Her preferred number is", jane.int)\n}\n```\n\n```go\ntype Employee struct {\n    ID        int\n    Name      string\n    Address   string\n    DoB       time.Time\n    Position  string\n    Salary    int\n    ManagerID int\n}\nvar dilbert Employee\n\nvar employeeOfTheMonth *Employee = &dilbert\nemployeeOfTheMonth.Position += " (proactive team player)" // \u76f8\u5f53\u4e8e\u4e0b\u4e00\u884c\n(*employeeOfTheMonth).Position += " (proactive team player)"\n\n// \u5982\u679c\u8981\u5728\u51fd\u6570\u5185\u90e8\u4fee\u6539\u7ed3\u6784\u4f53\u6210\u5458\u7684\u8bdd\uff0c\u7528\u6307\u9488\u4f20\u5165\u662f\u5fc5\u987b\u7684\nfunc AwardAnnualRaise(e *Employee) {\n    e.Salary = e.Salary * 105 / 100\n}\n\npp := &Point{1, 2} // \u7b49\u4ef7\u4e8e\u4e0b\u9762\u4e24\u884c\npp := new(Point)\n*pp = Point{1, 2}\n```\n\n\u4e00\u4e2a\u547d\u540d\u4e3a S \u7684\u7ed3\u6784\u4f53\u7c7b\u578b\u5c06\u4e0d\u80fd\u518d\u5305\u542b S \u7c7b\u578b\u7684\u6210\u5458\uff1a\n\u56e0\u4e3a\u4e00\u4e2a\u805a\u5408\u7684\u503c\u4e0d\u80fd\u5305\u542b\u5b83\u81ea\u8eab\u3002\n\uff08\u8be5\u9650\u5236\u540c\u6837\u9002\u5e94\u4e8e\u6570\u7ec4\u3002\uff09\n\u4f46\u662f S \u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u53ef\u4ee5\u5305\u542b\\*S \u6307\u9488\u7c7b\u578b\u7684\u6210\u5458\uff0c\n\u8fd9\u53ef\u4ee5\u8ba9\u6211\u4eec\u521b\u5efa\u9012\u5f52\u7684\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982\u94fe\u8868\u548c\u6811\u7ed3\u6784\u7b49\u3002\n\n```go\ntype tree struct {\n    value       int\n    left, right *tree\n}\n```\n\n\u5982\u679c\u7ed3\u6784\u4f53\u7684\u5168\u90e8\u6210\u5458\u90fd\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\uff0c\u90a3\u4e48\u7ed3\u6784\u4f53\u4e5f\u662f\u53ef\u4ee5\u6bd4\u8f83\u7684\u3002\n\u56e0\u6b64\u548c\u5176\u4ed6\u53ef\u6bd4\u8f83\u7684\u7c7b\u578b\u4e00\u6837\uff0c\u53ef\u4ee5\u7528\u4e8e map \u7684 key \u7c7b\u578b\n\n```go\ntype Point struct{ X, Y int }\n\np := Point{1, 2}\nq := Point{2, 1}\nfmt.Println(p.X == q.X && p.Y == q.Y) // "false"\nfmt.Println(p == q)                   // "false"\n```\n\nGo \u8bed\u8a00\u6709\u4e00\u4e2a\u7279\u6027\u8ba9\u6211\u4eec\u53ea\u58f0\u660e\u4e00\u4e2a\u6210\u5458\u5bf9\u5e94\u7684\u6570\u636e\u7c7b\u578b\u800c\u4e0d\u6307\u540d\u6210\u5458\u7684\u540d\u5b57\uff1b\n\u8fd9\u7c7b\u6210\u5458\u5c31\u53eb\u533f\u540d\u6210\u5458\u3002\n\u533f\u540d\u6210\u5458\u7684\u6570\u636e\u7c7b\u578b\u5fc5\u987b\u662f\u547d\u540d\u7684\u7c7b\u578b\u6216\u6307\u5411\u4e00\u4e2a\u547d\u540d\u7684\u7c7b\u578b\u7684\u6307\u9488\u3002\n\n```go\ntype Point struct {\n    X, Y int\n}\ntype Circle struct {\n    Center Point\n    Radius int\n}\ntype Wheel struct {\n    Circle Circle\n    Spokes int\n}\nvar w Wheel\nw.Circle.Center.X = 8\nw.Circle.Center.Y = 8\nw.Circle.Radius = 5\nw.Spokes = 20\n\n// \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0cCircle\u548cWheel\u5404\u81ea\u90fd\u6709\u4e00\u4e2a\u533f\u540d\u6210\u5458\u3002\n// \u6211\u4eec\u53ef\u4ee5\u8bf4Point\u7c7b\u578b\u88ab\u5d4c\u5165\u5230\u4e86Circle\u7ed3\u6784\u4f53\uff0c\n// \u540c\u65f6Circle\u7c7b\u578b\u88ab\u5d4c\u5165\u5230\u4e86Wheel\u7ed3\u6784\u4f53\u3002\ntype Circle struct {\n    Point\n    Radius int\n}\ntype Wheel struct {\n    Circle\n    Spokes int\n}\n\n// \u533f\u540d\u6210\u5458Circle\u548cPoint\u90fd\u6709\u81ea\u5df1\u7684\u540d\u5b57\u2014\u2014\u5c31\u662f\u547d\u540d\u7684\u7c7b\u578b\u540d\u5b57\n// \u4f46\u662f\u8fd9\u4e9b\u540d\u5b57\u5728\u70b9\u64cd\u4f5c\u7b26\u4e2d\u662f\u53ef\u9009\u7684\u3002\nvar w Wheel\nw.X = 8            // equivalent to w.Circle.Point.X = 8\nw.Y = 8            // equivalent to w.Circle.Point.Y = 8\nw.Radius = 5       // equivalent to w.Circle.Radius = 5\nw.Spokes = 20\n\n// \u4e0d\u5e78\u7684\u662f\uff0c\u7ed3\u6784\u4f53\u5b57\u9762\u503c\u5e76\u6ca1\u6709\u7b80\u77ed\u8868\u793a\u533f\u540d\u6210\u5458\u7684\u8bed\u6cd5\uff0c\n// \u56e0\u6b64\u4e0b\u9762\u7684\u8bed\u53e5\u90fd\u4e0d\u80fd\u7f16\u8bd1\u901a\u8fc7\uff1a\nw = Wheel{8, 8, 5, 20}                       // compile error: unknown fields\nw = Wheel{X: 8, Y: 8, Radius: 5, Spokes: 20} // compile error: unknown fields\n\n// \u7ed3\u6784\u4f53\u5b57\u9762\u503c\u5fc5\u987b\u9075\u5faa\u5f62\u72b6\u7c7b\u578b\u58f0\u660e\u65f6\u7684\u7ed3\u6784\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u7528\u4e0b\u9762\u7684\u4e24\u79cd\u8bed\u6cd5\nw = Wheel{Circle{Point{8, 8}, 5}, 20}\nw = Wheel{\n    Circle: Circle{\n        Point:  Point{X: 8, Y: 8},\n        Radius: 5,\n    },\n    Spokes: 20, // NOTE: trailing comma necessary here (and at Radius)\n}\nfmt.Printf("%#v\\n", w)\n// Output:\n// Wheel{Circle:Circle{Point:Point{X:8, Y:8}, Radius:5}, Spokes:20}\nw.X = 42\nfmt.Printf("%#v\\n", w)\n// Output:\n// Wheel{Circle:Circle{Point:Point{X:42, Y:8}, Radius:5}, Spokes:20}\n```\n\n\u4e00\u4e2a struct \u7c7b\u578b\u4e5f\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u533f\u540d\u5b57\u6bb5\u3002\n\n\u79cd\u7c7b\u578b\u7684\u503c\u4fbf\u4f1a\u62e5\u6709 Point \u548c RGBA \u7c7b\u578b\u7684\u6240\u6709\u65b9\u6cd5\uff0c\n\u4ee5\u53ca\u76f4\u63a5\u5b9a\u4e49\u5728 ColoredPoint \u4e2d\u7684\u65b9\u6cd5\u3002\n\u5f53\u7f16\u8bd1\u5668\u89e3\u6790\u4e00\u4e2a\u9009\u62e9\u5668\u5230\u65b9\u6cd5\u65f6\uff0c\u6bd4\u5982 p.ScaleBy\uff0c\n\u5b83\u4f1a\u9996\u5148\u53bb\u627e\u76f4\u63a5\u5b9a\u4e49\u5728\u8fd9\u4e2a\u7c7b\u578b\u91cc\u7684 ScaleBy \u65b9\u6cd5\uff0c\n\u7136\u540e\u627e\u88ab ColoredPoint \u7684\u5185\u5d4c\u5b57\u6bb5\u4eec\u5f15\u5165\u7684\u65b9\u6cd5\uff0c\n\u7136\u540e\u53bb\u627e Point \u548c RGBA \u7684\u5185\u5d4c\u5b57\u6bb5\u5f15\u5165\u7684\u65b9\u6cd5\uff0c\u7136\u540e\u4e00\u76f4\u9012\u5f52\u5411\u4e0b\u627e\u3002\n\u5982\u679c\u9009\u62e9\u5668\u6709\u4e8c\u4e49\u6027\u7684\u8bdd\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519\uff0c\u6bd4\u5982\u4f60\u5728\u540c\u4e00\u7ea7\u91cc\u6709\u4e24\u4e2a\u540c\u540d\u7684\u65b9\u6cd5\u3002\n\n```go\ntype ColoredPoint struct {\n    Point\n    color.RGBA\n}\n```\n\n\u4e00\u4e2a\u5c0f trick\n\n```go\nvar (\n    mu sync.Mutex // guards mapping\n    mapping = make(map[string]string)\n)\n\nfunc Lookup(key string) string {\n    mu.Lock()\n    v := mapping[key]\n    mu.Unlock()\n    return v\n}\n```\n\n\u6539\u8fdb\u540e\n\n```go\n// \u7ed9\u65b0\u7684\u53d8\u91cf\u8d77\u4e86\u4e00\u4e2a\u66f4\u5177\u8868\u8fbe\u6027\u7684\u540d\u5b57\uff1acache\n// \u56e0\u4e3async.Mutex\u5b57\u6bb5\u4e5f\u88ab\u5d4c\u5165\u5230\u4e86\u8fd9\u4e2astruct\u91cc\uff0c\n// \u5176Lock\u548cUnlock\u65b9\u6cd5\u4e5f\u5c31\u90fd\u88ab\u5f15\u5165\u5230\u4e86\u8fd9\u4e2a\u533f\u540d\u7ed3\u6784\u4e2d\u4e86\nvar cache = struct {\n    sync.Mutex\n    mapping map[string]string\n}{\n    mapping: make(map[string]string),\n}\n\n\nfunc Lookup(key string) string {\n    cache.Lock()\n    v := cache.mapping[key]\n    cache.Unlock()\n    return v\n}\n```\n\n\u5c06\u4e00\u4e2a Go \u8bed\u8a00\u4e2d\u7c7b\u4f3c movies \u7684\u7ed3\u6784\u4f53 slice \u8f6c\u4e3a JSON \u7684\u8fc7\u7a0b\u53eb\u7f16\u7ec4\uff08marshaling\uff09\u3002\n\u7f16\u7ec4\u901a\u8fc7\u8c03\u7528 json.Marshal \u51fd\u6570\u5b8c\u6210\n\n```go\n// Color\u6210\u5458\u7684Tag\u8fd8\u5e26\u4e86\u4e00\u4e2a\u989d\u5916\u7684omitempty\u9009\u9879\uff0c\n// \u8868\u793a\u5f53Go\u8bed\u8a00\u7ed3\u6784\u4f53\u6210\u5458\u4e3a\u7a7a\u6216\u96f6\u503c\u65f6\u4e0d\u751f\u6210JSON\u5bf9\u8c61\uff08\u8fd9\u91ccfalse\u4e3a\u96f6\u503c\uff09\u3002\ntype Movie struct {\n    Title  string\n    Year   int  `json:"released"`\n    Color  bool `json:"color,omitempty"`\n    Actors []string\n}\nvar movies = []Movie{\n    {Title: "Casablanca", Year: 1942, Color: false,\n        Actors: []string{"Humphrey Bogart", "Ingrid Bergman"}},\n    {Title: "Cool Hand Luke", Year: 1967, Color: true,\n        Actors: []string{"Paul Newman"}},\n    {Title: "Bullitt", Year: 1968, Color: true,\n        Actors: []string{"Steve McQueen", "Jacqueline Bisset"}},\n    // ...\n}\ndata, err := json.Marshal(movies)\nif err != nil {\n    log.Fatalf("JSON marshaling failed: %s", err)\n}\nfmt.Printf("%s\\n", data)\n\n```\n\n```json\n[{"Title":"Casablanca","released":1942,"Actors":["Humphrey Bogart","Ingr\nid Bergman"]},{"Title":"Cool Hand Luke","released":1967,"color":true,"Ac\ntors":["Paul Newman"]},{"Title":"Bullitt","released":1968,"color":true,"\nActors":["Steve McQueen","Jacqueline Bisset"]}]\n```\n\n```go\n// json.MarshalIndent\u51fd\u6570\u5c06\u4ea7\u751f\u6574\u9f50\u7f29\u8fdb\u7684\u8f93\u51fa\ndata, err := json.MarshalIndent(movies, "", "    ")\nif err != nil {\n    log.Fatalf("JSON marshaling failed: %s", err)\n}\nfmt.Printf("%s\\n", data)\n```\n\n```json\n[\n  {\n    "Title": "Casablanca",\n    "released": 1942,\n    "Actors": ["Humphrey Bogart", "Ingrid Bergman"]\n  },\n  {\n    "Title": "Cool Hand Luke",\n    "released": 1967,\n    "color": true,\n    "Actors": ["Paul Newman"]\n  },\n  {\n    "Title": "Bullitt",\n    "released": 1968,\n    "color": true,\n    "Actors": ["Steve McQueen", "Jacqueline Bisset"]\n  }\n]\n```\n\n\u7f16\u7801\u7684\u9006\u64cd\u4f5c\u662f\u89e3\u7801\uff0c\u5bf9\u5e94\u5c06 JSON \u6570\u636e\u89e3\u7801\u4e3a Go \u8bed\u8a00\u7684\u6570\u636e\u7ed3\u6784\uff0c\nGo \u8bed\u8a00\u4e2d\u4e00\u822c\u53eb unmarshaling\uff0c\u901a\u8fc7 json.Unmarshal \u51fd\u6570\u5b8c\u6210\u3002\n\n```go\nvar titles []struct{ Title string }\nif err := json.Unmarshal(data, &titles); err != nil {\n    log.Fatalf("JSON unmarshaling failed: %s", err)\n}\nfmt.Println(titles) // "[{Casablanca} {Cool Hand Luke} {Bullitt}]"\n```\n\n## \u7ed3\u6784\u4f53\u5d4c\u5165\n\n```go\npackage main\nimport "fmt"\n\ntype base struct {\n    num int\n}\nfunc (b base) describe() string {\n    return fmt.Sprintf("base with num=%v", b.num)\n}\n\ntype container struct {\n    base\n    str string\n}\n\nfunc main() {\n    co := container{\n        base: base{\n            num: 1,\n        },\n        str: "some name",\n    }\n\n    fmt.Printf("co={num: %v, str: %v}\\n", co.num, co.str)\n    fmt.Println("also num:", co.base.num)\n    fmt.Println("describe:", co.describe())\n\n    // \u56e0\u4e3a\u5d4c\u5165\u4e86 base \uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u770b\u5230 container \u4e5f\u5b9e\u73b0\u4e86 describer \u63a5\u53e3\n    type describer interface {\n        describe() string\n    }\n    var d describer = co\n    fmt.Println("describer:", d.describe())\n}\n```\n'},G2G2:function(n,t,e){"use strict";e.r(t),t.default='```rust\n// \u8be5\u5c5e\u6027\u7528\u4e8e\u9690\u85cf\u5bf9\u672a\u4f7f\u7528\u4ee3\u7801\u7684\u8b66\u544a\u3002\n#![allow(dead_code)]\n\n// \u521b\u5efa\u4e00\u4e2a `enum`\uff08\u679a\u4e3e\uff09\u6765\u5bf9 web \u4e8b\u4ef6\u5206\u7c7b\u3002\u6ce8\u610f\u53d8\u91cf\u540d\u548c\u7c7b\u578b\u5171\u540c\u6307\u5b9a\u4e86 `enum`\n// \u53d6\u503c\u7684\u79cd\u7c7b\uff1a`PageLoad` \u4e0d\u7b49\u4e8e `PageUnload`\uff0c`KeyPress(char)` \u4e0d\u7b49\u4e8e\n// `Paste(String)`\u3002\u5404\u4e2a\u53d6\u503c\u4e0d\u540c\uff0c\u4e92\u76f8\u72ec\u7acb\u3002\nenum WebEvent {\n    // \u4e00\u4e2a `enum` \u53ef\u4ee5\u662f\u5355\u5143\u7ed3\u6784\u4f53\uff08\u79f0\u4e3a `unit-like` \u6216 `unit`\uff09\uff0c\n    PageLoad,\n    PageUnload,\n    // \u6216\u8005\u4e00\u4e2a\u5143\u7ec4\u7ed3\u6784\u4f53\uff0c\n    KeyPress(char),\n    Paste(String),\n    // \u6216\u8005\u4e00\u4e2a\u666e\u901a\u7684\u7ed3\u6784\u4f53\u3002\n    Click { x: i64, y: i64 }\n}\n\n// \u6b64\u51fd\u6570\u5c06\u4e00\u4e2a `WebEvent` enum \u4f5c\u4e3a\u53c2\u6570\uff0c\u65e0\u8fd4\u56de\u503c\u3002\nfn inspect(event: WebEvent) {\n    match event {\n        WebEvent::PageLoad => println!("page loaded"),\n        WebEvent::PageUnload => println!("page unloaded"),\n        // \u4ece `enum` \u91cc\u89e3\u6784\u51fa `c`\u3002\n        WebEvent::KeyPress(c) => println!("pressed \'{}\'.", c),\n        WebEvent::Paste(s) => println!("pasted \\"{}\\".", s),\n        // \u628a `Click` \u89e3\u6784\u7ed9 `x` and `y`\u3002\n        WebEvent::Click { x, y } => {\n            println!("clicked at x={}, y={}.", x, y);\n        },\n    }\n}\n\nfn main() {\n    let pressed = WebEvent::KeyPress(\'x\');\n    // `to_owned()` \u4ece\u4e00\u4e2a\u5b57\u7b26\u4e32\u5207\u7247\u4e2d\u521b\u5efa\u4e00\u4e2a\u5177\u6709\u6240\u6709\u6743\u7684 `String`\u3002\n    let pasted  = WebEvent::Paste("my text".to_owned());\n    let click   = WebEvent::Click { x: 20, y: 80 };\n    let load    = WebEvent::PageLoad;\n    let unload  = WebEvent::PageUnload;\n\n    inspect(pressed);\n    inspect(pasted);\n    inspect(click);\n    inspect(load);\n    inspect(unload);\n}\n// pressed \'x\'.\n// pasted "my text".\n// clicked at x=20, y=80.\n// page loaded\n// page unloaded\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n    enum IpAddrKind {\n        V4,\n        V6,\n    }\n    struct IpAddr {\n        kind: IpAddrKind,\n        address: String,\n    }\n\n    let home = IpAddr {\n        kind: IpAddrKind::V4,\n        address: String::from("127.0.0.1"),\n    };\n    let loopback = IpAddr {\n        kind: IpAddrKind::V6,\n        address: String::from("::1"),\n    };\n}\n```\n\n```rust\n// \u7528\u679a\u4e3e\u66ff\u4ee3\u7ed3\u6784\u4f53\u8fd8\u6709\u53e6\u4e00\u4e2a\u4f18\u52bf\uff1a\u6bcf\u4e2a\u6210\u5458\u53ef\u4ee5\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u548c\u6570\u91cf\u7684\u6570\u636e\u3002\n#![allow(unused)]\nfn main() {\n    enum IpAddr {\n        V4(u8, u8, u8, u8),\n        V6(String),\n    }\n    let home = IpAddr::V4(127, 0, 0, 1);\n    let loopback = IpAddr::V6(String::from("::1"));\n}\n```\n\n```rust\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\n// \u4e0a\u9762\u7684\u679a\u4e3e\u7ed3\u6784\u4f53\uff0c\u7c7b\u4f3c\u4e8e\u5b9a\u4e49\u4e86\u5982\u4e0b\u8fd9\u4e9b\u7ed3\u6784\u4f53\n// \u4e0d\u8fc7\u4e0a\u9762\u662f\u5355\u72ec\u4e00\u4e2a\u7c7b\u578b\uff0c\u4e0b\u9762\u662f\u4e0d\u540c\u7c7b\u578b\nstruct QuitMessage; // \u7c7b\u5355\u5143\u7ed3\u6784\u4f53\nstruct MoveMessage {\n    x: i32,\n    y: i32,\n}\nstruct WriteMessage(String); // \u5143\u7ec4\u7ed3\u6784\u4f53\nstruct ChangeColorMessage(i32, i32, i32); // \u5143\u7ec4\u7ed3\u6784\u4f53\n```\n\n## C \u98ce\u683c\u7528\u6cd5\n\n```rust\n// \u8be5\u5c5e\u6027\u7528\u4e8e\u9690\u85cf\u5bf9\u672a\u4f7f\u7528\u4ee3\u7801\u7684\u8b66\u544a\u3002\n#![allow(dead_code)]\n\n// \u62e5\u6709\u9690\u5f0f\u8fa8\u522b\u503c\uff08implicit discriminator\uff0c\u4ece 0 \u5f00\u59cb\uff09\u7684 enum\nenum Number {\n    Zero,\n    One,\n    Two,\n}\n\n// \u62e5\u6709\u663e\u5f0f\u8fa8\u522b\u503c\uff08explicit discriminator\uff09\u7684 enum\nenum Color {\n    Red = 0xff0000,\n    Green = 0x00ff00,\n    Blue = 0x0000ff,\n}\n\nfn main() {\n    // `enum` \u53ef\u4ee5\u8f6c\u6210\u6574\u578b\u3002\n    println!("zero is {}", Number::Zero as i32);\n    println!("one is {}", Number::One as i32);\n\n    println!("roses are #{:06x}", Color::Red as i32);\n    println!("violets are #{:06x}", Color::Blue as i32);\n}\n```\n\n## \u6a21\u5f0f\u5339\u914d\n\n```rust\n#[derive(Debug)]\nenum UsState {\n    Alabama,\n    Alaska,\n    // --snip--\n}\n\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState),\n}\n\nfn value_in_cents(coin: Coin) -> u8 {\n    match coin {\n        Coin::Penny => 1,\n        Coin::Nickel => 5,\n        Coin::Dime => 10,\n        Coin::Quarter(state) => {\n            println!("State quarter from {:?}!", state);\n            25\n        }\n    }\n}\n\nfn main() {\n    value_in_cents(Coin::Quarter(UsState::Alaska));\n}\n```\n\n## \u5339\u914d `Option<T>`\n\n```rust\nfn main() {\n    fn plus_one(x: Option<i32>) -> Option<i32> {\n        match x {\n            None => None,\n            Some(i) => Some(i + 1),\n        }\n    }\n\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n}\n```\n\n```rust\nfn main() {\n    let dice_roll = 9;\n    match dice_roll {\n        3 => add_fancy_hat(),\n        7 => remove_fancy_hat(),\n        _ => (),\n    }\n\n    fn add_fancy_hat() {}\n    fn remove_fancy_hat() {}\n}\n```\n\n## if let \u7b80\u5355\u63a7\u5236\u6d41\n\n```rust\nlet some_u8_value = Some(0u8);\nmatch some_u8_value {\n    Some(3) => println!("three"),\n    _ => (),\n}\n// \u7b49\u4ef7\nlet some_u8_value = Some(0u8);\nif let Some(3) = some_u8_value {\n    println!("three");\n}\n```\n'},G2ic:function(n,t,e){"use strict";e.r(t),t.default='Go \u4e2d\u7684\u5b57\u7b26\u4e32\u90fd\u662f\u91c7\u7528 UTF-8 \u5b57\u7b26\u96c6\u7f16\u7801\u3002\n\u5b57\u7b26\u4e32\u662f\u7528\u4e00\u5bf9\u53cc\u5f15\u53f7\uff08""\uff09\u6216\u53cd\u5f15\u53f7\uff08`` \uff09\u62ec\u8d77\u6765\u5b9a\u4e49\n\n```go\nvar frenchHello string  // \u58f0\u660e\u53d8\u91cf\u4e3a\u5b57\u7b26\u4e32\u7684\u4e00\u822c\u65b9\u6cd5\nvar emptyString string = ""  // \u58f0\u660e\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf\uff0c\u521d\u59cb\u5316\u4e3a\u7a7a\u5b57\u7b26\u4e32\nfunc test() {\n  no, yes, maybe := "no", "yes", "maybe"  // \u7b80\u77ed\u58f0\u660e\uff0c\u540c\u65f6\u58f0\u660e\u591a\u4e2a\u53d8\u91cf\n  japaneseHello := "Konichiwa"  // \u540c\u4e0a\n  frenchHello = "Bonjour"  // \u5e38\u89c4\u8d4b\u503c\n}\n\n\n// Go\u4e2d\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684\nvar s string = "hello"\ns[0] = \'c\' // \u51fa\u9519\uff01\uff01\uff01\uff01\n\ns := "hello"\nc := []byte(s)  // \u5c06\u5b57\u7b26\u4e32 s \u8f6c\u6362\u4e3a []byte \u7c7b\u578b\nc[0] = \'c\'\ns2 := string(c)  // \u518d\u8f6c\u6362\u56de string \u7c7b\u578b\nfmt.Printf("%s\\n", s2)\n```\n\n```go\n// `` \u62ec\u8d77\u7684\u5b57\u7b26\u4e32\u4e3aRaw\u5b57\u7b26\u4e32\uff0c\n// \u5373\u5b57\u7b26\u4e32\u5728\u4ee3\u7801\u4e2d\u7684\u5f62\u5f0f\u5c31\u662f\u6253\u5370\u65f6\u7684\u5f62\u5f0f\uff0c\n// \u5b83\u6ca1\u6709\u5b57\u7b26\u8f6c\u4e49\uff0c\u6362\u884c\u4e5f\u5c06\u539f\u6837\u8f93\u51fa\nm := `hello\n  world`\n```\n\n```go\npackage main\nimport (\n    "fmt"\n    s "strings"\n)\nvar p = fmt.Println\nfunc main() {\n    p("Contains:  ", s.Contains("test", "es"))\n    p("Count:     ", s.Count("test", "t"))\n    p("HasPrefix: ", s.HasPrefix("test", "te"))\n    p("HasSuffix: ", s.HasSuffix("test", "st"))\n    p("Index:     ", s.Index("test", "e"))\n    p("Join:      ", s.Join([]string{"a", "b"}, "-"))\n    p("Repeat:    ", s.Repeat("a", 5))\n    p("Replace:   ", s.Replace("foo", "o", "0", -1))\n    p("Replace:   ", s.Replace("foo", "o", "0", 1))\n    p("Split:     ", s.Split("a-b-c-d-e", "-"))\n    p("ToLower:   ", s.ToLower("TEST"))\n    p("ToUpper:   ", s.ToUpper("test"))\n    p("Len: ", len("hello"))\n    p("Char:", "hello"[1])\n}\n\n// Contains:   true\n// Count:      2\n// HasPrefix:  true\n// HasSuffix:  true\n// Index:      1\n// Join:       a-b\n// Repeat:     aaaaa\n// Replace:    f00\n// Replace:    f0o\n// Split:      [a b c d e]\n// ToLower:    test\n// ToUpper:    TEST\n// Len:  5\n// Char: 101\n```\n'},G349:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u4fdd\u7559\u5173\u952e\u5b57\n---\n\n| dart       | go          | js            | python   |\n| ---------- | ----------- | ------------- | -------- |\n| abstract   |             | -abstract     |          |\n| -          |             | arguments     |          |\n| -          |             |               | and      |\n| as         |             |               | as       |\n| assert     |             |               | assert   |\n| async      |             |               | async    |\n| async\\*    |             |               |          |\n| await      |             | await\\*       | await    |\n| -          |             | -boolean      |          |\n| break      | break       | break         | break    |\n| -          |             | -byte         |          |\n| case       | case        | case          |          |\n| catch      |             | catch         |          |\n| -          | chan        |               |          |\n| -          |             | -char         |          |\n| class      |             | class         | class    |\n| const      | const       | const         |          |\n| continue   | continue    | continue      | continue |\n| -          |             | debugger      |          |\n| -          |             |               | def      |\n| default    | default     | default       |          |\n| -          | defer       |               |          |\n| deferred   |             |               |          |\n| -          |             |               | del      |\n| -          |             | delete        |          |\n| do         |             | do            |          |\n| -          |             | -double       |          |\n| dynamic    |             |               |          |\n| -          |             |               | elif     |\n| else       | else        | else          | else     |\n| enum       |             | enum          |          |\n| -          |             | eval          |          |\n| -          |             |               | except   |\n| export     |             | export        |          |\n| extends    |             | extends       |          |\n| external   |             |               |          |\n| factory    |             |               |          |\n| -          | fallthrough |               |          |\n| false      |             | false         | False    |\n| final      |             | -final        |          |\n| finally    |             | finally       | finally  |\n| -          |             | -float        |          |\n| for        | for         | for           | for      |\n| -          |             |               | from     |\n| -          | func        |               |          |\n| -          |             | function      |          |\n| get        |             |               |          |\n| -          |             |               | global   |\n| -          | go          |               |          |\n| -          | goto        | -goto         |          |\n| if         | if          | if            | if       |\n| implements |             | implements    |          |\n| import     | import      | import        | import   |\n| in         |             | in            | in       |\n| -          |             | instanceof    |          |\n| -          |             | -int          |          |\n| -          | interface   | interface     |          |\n| is         |             |               | is       |\n| -          |             |               | lambda   |\n| -          |             | let           |          |\n| library    |             |               |          |\n| -          |             | -long         |          |\n| -          | map         |               |          |\n| -          |             | -native       |          |\n| new        |             | new           |          |\n| -          |             |               | None     |\n| -          |             |               | nonlocal |\n| -          |             |               | not      |\n| null       |             | null          |          |\n| operator   |             |               |          |\n| -          |             |               | or       |\n| -          | package     | package       |          |\n| part       |             |               |          |\n| -          |             |               | pass     |\n| -          |             | private       |          |\n| -          |             | protected     |          |\n| -          |             | public        |          |\n| -          |             |               | raise    |\n| -          | range       |               |          |\n| rethrow    |             |               |          |\n| return     | return      | return        | return   |\n| -          | select      |               |          |\n| set        |             |               |          |\n| -          |             | -short        |          |\n| static     |             | static        |          |\n| -          | struct      |               |          |\n| super      |             | super         |          |\n| switch     | switch      | switch        |          |\n| sync       |             |               |          |\n| sync\\*     |             |               |          |\n| -          |             | -synchronized |          |\n| this       |             | this          |          |\n| throw      |             | throw         |          |\n| -          |             | -throws       |          |\n| -          |             | -transient    |          |\n| true       |             | true          | True     |\n| try        |             | try           | try      |\n| -          | type        |               |          |\n| typedef    |             | typeof        |          |\n| var        | var         | var           |          |\n| void       |             | void          |          |\n| -          |             | -volatile     |          |\n| while      |             | while         | while    |\n| with       |             | with          | with     |\n| yield      |             | yield         | yield    |\n| yield\\*    |             |               |          |\n"},"GEt/":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u683c\u5f0f\u5316\n---"},GIXH:function(n,t,e){"use strict";e.r(t),t.default="## \u4e09\u5143\u64cd\u4f5c\u7b26\n\n- `condition ? expr1 : expr2`\n  - \u5982\u679c condition \u662f true\uff0c\u6267\u884c expr1 (\u5e76\u8fd4\u56de\u6267\u884c\u7684\u7ed3\u679c)\uff1b\n  - \u5426\u5219\u6267\u884c expr2 \u5e76\u8fd4\u56de\u5176\u7ed3\u679c\u3002\n- `expr1 ?? expr2`\n  - \u5982\u679c expr1 \u662f non-null\uff0c\u8fd4\u56de\u5176\u503c\uff1b\n  - \u5426\u5219\u6267\u884c expr2 \u5e76\u8fd4\u56de\u5176\u7ed3\u679c\u3002\n\n## \u7ea7\u8054\u64cd\u4f5c\u7b26\n\n\u7ea7\u8054\u64cd\u4f5c\u7b26 (..) \u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u5bf9\u8c61\u4e0a \u8fde\u7eed\u8c03\u7528\u591a\u4e2a\u51fd\u6570\u4ee5\u53ca\u8bbf\u95ee\u6210\u5458\u53d8\u91cf\u3002\n\n```dart\nquerySelector('#button') // Get an object.\n  ..text = 'Confirm'   // Use its members.\n  ..classes.add('important')\n  ..onClick.listen((e) => window.alert('Confirmed!'));\n// \u4e0a\u9762\u7684\u4ee3\u7801\u548c\u4e0b\u9762\u7684\u4ee3\u7801\u529f\u80fd\u4e00\u6837\uff1a\nvar button = querySelector('#button');\nbutton.text = 'Confirm';\nbutton.classes.add('important');\nbutton.onClick.listen((e) => window.alert('Confirmed!'));\n```\n\n## \u6761\u4ef6\u6210\u5458\u8bbf\u95ee\n\n`?.` \u548c `.` \u7c7b\u4f3c\uff0c\u4f46\u662f\u5de6\u8fb9\u7684\u64cd\u4f5c\u5bf9\u8c61\u4e0d\u80fd\u4e3a null\uff0c\n\u4f8b\u5982 `foo?.bar` \u5982\u679c foo \u4e3a null \u5219\u8fd4\u56de null\uff0c\u5426\u5219\u8fd4\u56de bar \u6210\u5458\n"},GhO4:function(n,t,e){"use strict";e.r(t),t.default="```sh\n>>> import random\n>>> random.choice(['apple', 'pear', 'banana'])\n'apple'\n>>> random.sample(range(100), 10)   # sampling without replacement\n[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]\n>>> random.random()    # random float\n0.17970987693706186\n>>> random.randrange(6)    # random integer chosen from range(6)\n4\n\n# statistics \u6a21\u5757\u8ba1\u7b97\u6570\u503c\u6570\u636e\u7684\u57fa\u672c\u7edf\u8ba1\u5c5e\u6027\uff08\u5747\u503c\uff0c\u4e2d\u4f4d\u6570\uff0c\u65b9\u5dee\u7b49\uff09:\n>>> import statistics\n>>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]\n>>> statistics.mean(data)\n1.6071428571428572\n>>> statistics.median(data)\n1.25\n>>> statistics.variance(data)\n1.3720238095238095\n```\n\n## \u968f\u673a\u9009\u62e9\u5b50\u5bf9\u8c61\n\n```sh\n>>> import random\n>>> random.choice(['apple', 'pear', 'banana'])\n'apple'\n```\n"},HE6a:function(n,t,e){"use strict";e.r(t),t.default='ES6 \u5f15\u5165\u4e86\u4e00\u79cd\u65b0\u7684\u539f\u59cb\u6570\u636e\u7c7b\u578b Symbol\uff0c\u8868\u793a\u72ec\u4e00\u65e0\u4e8c\u7684\u503c\u3002\n\u5b83\u662f JavaScript \u8bed\u8a00\u7684\u7b2c\u4e03\u79cd\u6570\u636e\u7c7b\u578b\uff0c\n\u524d\u516d\u79cd\u662f\uff1aundefined\u3001null\u3001\u5e03\u5c14\u503c\uff08Boolean\uff09\u3001\u5b57\u7b26\u4e32\uff08String\uff09\u3001\u6570\u503c\uff08Number\uff09\u3001\u5bf9\u8c61\uff08Object\uff09\u3002\n\n\u9664\u4e86\u5b9a\u4e49\u81ea\u5df1\u4f7f\u7528\u7684 Symbol \u503c\u4ee5\u5916\uff0cES6 \u8fd8\u63d0\u4f9b\u4e86 11 \u4e2a\u5185\u7f6e\u7684 Symbol \u503c\uff0c\u6307\u5411\u8bed\u8a00\u5185\u90e8\u4f7f\u7528\u7684\u65b9\u6cd5\u3002\n\n```js\nlet s = Symbol();\ntypeof s;\n// "symbol"\n\nlet s1 = Symbol("foo");\nlet s2 = Symbol("bar");\ns1; // Symbol(foo)\ns2; // Symbol(bar)\ns1.toString(); // "Symbol(foo)"\ns2.toString(); // "Symbol(bar)"\n\n// \u6ca1\u6709\u53c2\u6570\u7684\u60c5\u51b5\nlet s1 = Symbol();\nlet s2 = Symbol();\ns1 === s2; // false\n\n// \u6709\u53c2\u6570\u7684\u60c5\u51b5\nlet s1 = Symbol("foo");\nlet s2 = Symbol("foo");\ns1 === s2; // false\n\nconst mySymbol = Symbol();\nconst a = {};\na.mySymbol = "Hello!";\na[mySymbol]; // undefined\na["mySymbol"]; // "Hello!"\n\nlet s1 = Symbol.for("foo");\nlet s2 = Symbol.for("foo");\ns1 === s2; // true\n```\n'},HFvC:function(n,t,e){"use strict";e.r(t),t.default='```go\n// \u8fd4\u56de\u751f\u6210\u81ea\u7136\u6570\u5e8f\u5217\u7684\u7ba1\u9053: 2, 3, 4, ...\nfunc GenerateNatural() chan int {\n    ch := make(chan int)\n    go func() {\n        for i := 2; ; i++ {\n            ch <- i\n        }\n    }()\n    return ch\n}\n\n// \u7ba1\u9053\u8fc7\u6ee4\u5668: \u5220\u9664\u80fd\u88ab\u7d20\u6570\u6574\u9664\u7684\u6570\nfunc PrimeFilter(in <-chan int, prime int) chan int {\n    out := make(chan int)\n    go func() {\n        for {\n            if i := <-in; i%prime != 0 {\n                out <- i\n            }\n        }\n    }()\n    return out\n}\n\nfunc main() {\n    ch := GenerateNatural() // \u81ea\u7136\u6570\u5e8f\u5217: 2, 3, 4, ...\n    for i := 0; i < 100; i++ {\n        prime := <-ch // \u65b0\u51fa\u73b0\u7684\u7d20\u6570\n        fmt.Printf("%v: %v\\n", i+1, prime)\n        ch = PrimeFilter(ch, prime) // \u57fa\u4e8e\u65b0\u7d20\u6570\u6784\u9020\u7684\u8fc7\u6ee4\u5668\n    }\n}\n```\n\n`GenerateNatural` \u548c `PrimeFilter` \u51fd\u6570\u5185\u90e8\u90fd\u542f\u52a8\u4e86\u65b0\u7684 `Goroutine`\uff0c\n\u5f53 `main` \u51fd\u6570\u4e0d\u518d\u4f7f\u7528\u7ba1\u9053\u65f6\u540e\u53f0 `Goroutine` \u6709\u6cc4\u6f0f\u7684\u98ce\u9669\u3002\n\n\u4e0b\u9762\u662f\u6539\u8fdb\u7684\u7d20\u6570\u7b5b\u5b9e\u73b0\uff1a\n\n```go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "sync"\n)\n\n// \u8fd4\u56de\u751f\u6210\u81ea\u7136\u6570\u5e8f\u5217\u7684\u7ba1\u9053: 2, 3, 4, ...\nfunc GenerateNatural(ctx context.Context, wg *sync.WaitGroup) chan int {\n    ch := make(chan int)\n    go func() {\n        defer wg.Done()\n        defer close(ch)\n        for i := 2; ; i++ {\n            select {\n            case <-ctx.Done():\n                return\n            case ch <- i:\n            }\n        }\n    }()\n    return ch\n}\n\n// \u7ba1\u9053\u8fc7\u6ee4\u5668: \u5220\u9664\u80fd\u88ab\u7d20\u6570\u6574\u9664\u7684\u6570\nfunc PrimeFilter(ctx context.Context, in <-chan int, prime int, wg *sync.WaitGroup) chan int {\n    out := make(chan int)\n    go func() {\n        defer wg.Done()\n        defer close(out)\n        for i := range in {\n            if i%prime != 0 {\n                select {\n                case <-ctx.Done():\n                    return\n                case out <- i:\n                }\n            }\n        }\n    }()\n    return out\n}\n\nfunc main() {\n    wg := sync.WaitGroup{}\n    // \u901a\u8fc7 Context \u63a7\u5236\u540e\u53f0 Goroutine \u72b6\u6001\n    ctx, cancel := context.WithCancel(context.Background())\n    wg.Add(1)\n    ch := GenerateNatural(ctx, &wg) // \u81ea\u7136\u6570\u5e8f\u5217: 2, 3, 4, ...\n    for i := 0; i < 100; i++ {\n        prime := <-ch // \u65b0\u51fa\u73b0\u7684\u7d20\u6570\n        fmt.Printf("%v: %v\\n", i+1, prime)\n        wg.Add(1)\n        ch = PrimeFilter(ctx, ch, prime, &wg) // \u57fa\u4e8e\u65b0\u7d20\u6570\u6784\u9020\u7684\u8fc7\u6ee4\u5668\n    }\n\n    cancel()\n    wg.Wait()\n}\n```\n'},HGeh:function(n,t,e){"use strict";e.r(t),t.default="- ECMAScript \u548c JavaScript \u7684\u5173\u7cfb\u662f\uff0c\u524d\u8005\u662f\u540e\u8005\u7684\u89c4\u683c\uff0c\u540e\u8005\u662f\u524d\u8005\u7684\u4e00\u79cd\u5b9e\u73b0\n- ES6 \u8fd9\u4e2a\u8bcd\u7684\u539f\u610f\uff0c\u5c31\u662f\u6307 JavaScript \u8bed\u8a00\u7684\u4e0b\u4e00\u4e2a\u7248\u672c\n- ES6 \u65e2\u662f\u4e00\u4e2a\u5386\u53f2\u540d\u8bcd\uff0c\u4e5f\u662f\u4e00\u4e2a\u6cdb\u6307\uff0c\u542b\u4e49\u662f 5.1 \u7248\u4ee5\u540e\u7684 JavaScript \u7684\u4e0b\u4e00\u4ee3\u6807\u51c6\uff0c\n  \u6db5\u76d6\u4e86 ES2015\u3001ES2016\u3001ES2017 \u7b49\u7b49\n\nJavaScript \u5b66\u4e60\u5185\u5bb9\u5305\u62ec\n\n- ES5\n- ES6\n- DOM\n- \u6d4f\u89c8\u5668\n- Node.js\n- TypeScript\n"},HL5q:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6307\u9488\n---\n"},HNGd:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5f52\u5e76\u6392\u5e8f\n---\n"},HPKH:function(n,t,e){"use strict";e.r(t),t.default='```js\n"a|b|c".split("|"); // ["a", "b", "c"]\n"a||c".split("|"); // [\'a\', \'\', \'c\']\n\n// slice\u65b9\u6cd5\u7528\u4e8e\u4ece\u539f\u5b57\u7b26\u4e32\u53d6\u51fa\u5b50\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\uff0c\u4e0d\u6539\u53d8\u539f\u5b57\u7b26\u4e32\u3002\n// \u5b83\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5b50\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b50\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u4f4d\u7f6e\uff08\u4e0d\u542b\u8be5\u4f4d\u7f6e\uff09\u3002\n\n// substring\u65b9\u6cd5\u8ddfslice\u65b9\u6cd5\u5f88\u76f8\u50cf\n// \u4e0d\u5efa\u8bae\u4f7f\u7528substring\u65b9\u6cd5\uff0c\u5e94\u8be5\u4f18\u5148\u4f7f\u7528slice\n"JavaScript".slice(0, 4); // "Java"\n"JavaScript".slice(-6); // "Script"\n"JavaScript".slice(0, -6); // "Java"\n"JavaScript".slice(-2, -1); // "p"\n\n// substr\u65b9\u6cd5\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5b50\u5b57\u7b26\u4e32\u7684\u5f00\u59cb\u4f4d\u7f6e\uff08\u4ece0\u5f00\u59cb\u8ba1\u7b97\uff09\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\n// \u5982\u679c\u7701\u7565\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5219\u8868\u793a\u5b50\u5b57\u7b26\u4e32\u4e00\u76f4\u5230\u539f\u5b57\u7b26\u4e32\u7684\u7ed3\u675f\u3002\n// \u5982\u679c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u8d1f\u6570\uff0c\u8868\u793a\u5012\u6570\u8ba1\u7b97\u7684\u5b57\u7b26\u4f4d\u7f6e\u3002\n// \u5982\u679c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8d1f\u6570\uff0c\u5c06\u88ab\u81ea\u52a8\u8f6c\u4e3a0\uff0c\u56e0\u6b64\u4f1a\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002\n"JavaScript".substr(4, 6); // "Script"\n"JavaScript".substr(-6); // "Script"\n"JavaScript".substr(4, -1); // ""\n\nconst someString = "0123456";\n// 234\nconsole.log(someString.substring(2, 5));\n\nconst someString = "a,b,c";\nconst someStringSplit = someString.split(",");\n// a\nconsole.log(someStringSplit[0]);\n// b\nconsole.log(someStringSplit[1]);\n// c\nconsole.log(someStringSplit[2]);\n```\n\n```js\n"  hello world  ".trim();\n// "hello world"\n\nconst s = "  abc  ";\ns.trim(); // "abc"\ns.trimStart(); // "abc  "\ns.trimEnd(); // "  abc"\n```\n'},HUH4:function(n,t,e){"use strict";e.r(t),t.default='JavaScript \u7684\u5bf9\u8c61\uff08Object\uff09\uff0c\u672c\u8d28\u4e0a\u662f\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff08Hash \u7ed3\u6784\uff09\uff0c\u4f46\u662f\u4f20\u7edf\u4e0a\u53ea\u80fd\u7528\u5b57\u7b26\u4e32\u5f53\u4f5c\u952e\u3002\nWeakMap \u7ed3\u6784\u4e0e Map \u7ed3\u6784\u7c7b\u4f3c\uff0c\u4e5f\u662f\u7528\u4e8e\u751f\u6210\u952e\u503c\u5bf9\u7684\u96c6\u5408\u3002\n\n- WeakMap \u53ea\u63a5\u53d7\u5bf9\u8c61\u4f5c\u4e3a\u952e\u540d\uff08null \u9664\u5916\uff09\uff0c\u4e0d\u63a5\u53d7\u5176\u4ed6\u7c7b\u578b\u7684\u503c\u4f5c\u4e3a\u952e\u540d\u3002\n- WeakMap \u7684\u952e\u540d\u6240\u6307\u5411\u7684\u5bf9\u8c61\uff0c\u4e0d\u8ba1\u5165\u5783\u573e\u56de\u6536\u673a\u5236\u3002\n\nMap \u7ed3\u6784\u539f\u751f\u63d0\u4f9b\u4e09\u4e2a\u904d\u5386\u5668\u751f\u6210\u51fd\u6570\u548c\u4e00\u4e2a\u904d\u5386\u65b9\u6cd5\u3002\n\n- `keys()`\uff1a\u8fd4\u56de\u952e\u540d\u7684\u904d\u5386\u5668\u3002\n- `values()`\uff1a\u8fd4\u56de\u952e\u503c\u7684\u904d\u5386\u5668\u3002\n- `entries()`\uff1a\u8fd4\u56de\u6240\u6709\u6210\u5458\u7684\u904d\u5386\u5668\u3002\n- `forEach()`\uff1a\u904d\u5386 Map \u7684\u6240\u6709\u6210\u5458\u3002\n\n```js\nlet { keys, values, entries } = Object;\nlet obj = { a: 1, b: 2, c: 3 };\nfor (let key of keys(obj)) {\n  console.log(key); // \'a\', \'b\', \'c\'\n}\nfor (let value of values(obj)) {\n  console.log(value); // 1, 2, 3\n}\nfor (let [key, value] of entries(obj)) {\n  console.log([key, value]); // [\'a\', 1], [\'b\', 2], [\'c\', 3]\n}\n\nconst m = new Map();\nconst o = { p: "Hello World" };\nm.set(o, "content");\nm.get(o); // "content"\nm.has(o); // true\nm.delete(o); // true\nm.has(o); // false\n\nconst map = new Map([\n  ["name", "\u5f20\u4e09"],\n  ["title", "Author"],\n]);\nmap.size; // 2\nmap.has("name"); // true\nmap.get("name"); // "\u5f20\u4e09"\nmap.has("title"); // true\nmap.get("title"); // "Author"\n\nconst map = new Map();\nmap.set("foo", true);\nmap.set("bar", false);\nmap.size; // 2\n\nconst m = new Map();\nm.set(undefined, "nah");\nm.has(undefined); // true\nm.delete(undefined);\nm.has(undefined); // false\n\nlet map = new Map();\nmap.set("foo", true);\nmap.set("bar", false);\nmap.size; // 2\nmap.clear();\nmap.size; // 0\n\nconst map = new Map([\n  ["F", "no"],\n  ["T", "yes"],\n]);\n\nfor (let key of map.keys()) {\n  console.log(key);\n}\n// "F"\n// "T"\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n// "no"\n// "yes"\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n// "F" "no"\n// "T" "yes"\n\n// \u6216\u8005\nfor (let [key, value] of map.entries()) {\n  console.log(key, value);\n}\n// "F" "no"\n// "T" "yes"\n\n// \u7b49\u540c\u4e8e\u4f7f\u7528map.entries()\nfor (let [key, value] of map) {\n  console.log(key, value);\n}\n// "F" "no"\n// "T" "yes"\n\nconst someVariable = 2;\nconst someDict = { [someVariable + 1]: "three" };\n// three\nconsole.log(someDict[3]);\n```\n\n## \u4ece map \u4e2d\u5220\u9664 key \u548c value\n\n```js\nconst m = new Map();\nm.set(undefined, "nah");\nm.has(undefined); // true\nm.delete(undefined);\nm.has(undefined); // false\n\nvar obj = Object.defineProperties(\n  {},\n  {\n    p1: { value: 1, configurable: true },\n    p2: { value: 2, configurable: false },\n  }\n);\ndelete obj.p1; // true\ndelete obj.p2; // false\nobj.p1; // undefined\nobj.p2; // 2\n```\n\n## Maps(\u5b57\u5178)\u904d\u5386\uff0c\u83b7\u53d6 map \u7684\u6240\u6709 key \u548c value\n\n```js\n// for...in\u5faa\u73af\n// \u5b83\u904d\u5386\u7684\u662f\u5bf9\u8c61\u6240\u6709\u53ef\u904d\u5386\uff08enumerable\uff09\u7684\u5c5e\u6027\uff0c\u4f1a\u8df3\u8fc7\u4e0d\u53ef\u904d\u5386\u7684\u5c5e\u6027\u3002\n// \u5b83\u4e0d\u4ec5\u904d\u5386\u5bf9\u8c61\u81ea\u8eab\u7684\u5c5e\u6027\uff0c\u8fd8\u904d\u5386\u7ee7\u627f\u7684\u5c5e\u6027\u3002\nvar obj = { a: 1, b: 2, c: 3 };\nfor (var i in obj) {\n  console.log("\u952e\u540d\uff1a", i);\n  console.log("\u952e\u503c\uff1a", obj[i]);\n}\n\n// \u83b7\u53d6 map \u4e2d\u952e\u503c\u5bf9\u7684\u6570\u76ee\nObject.keys(obj).length;\nObject.values(obj);\nObject.entries(obj);\n\nvar engines = new Set(["Gecko", "Trident", "Webkit", "Webkit"]);\nfor (var e of engines) {\n  console.log(e);\n}\n\nvar es6 = new Map();\nes6.set("edition", 6);\nes6.set("committee", "TC39");\nes6.set("standard", "ECMA-262");\nfor (var [name, value] of es6) {\n  console.log(name + ": " + value);\n}\n\nconst someList = [6, 3, 5];\n// 0 6\n// 1 3\n// 2 5\nsomeList.forEach((element, index) => {\n  console.log(`${index} ${element}`);\n});\n\nconst list1 = [1, 3, 5];\nconst list2 = [2, 4, 6];\n// [[1, 2], [3, 4], [5, 6]]\nconst zippedList = list1.map((x, y) => {\n  return [x, list2[y]];\n});\nzippedList.forEach((element) => {\n  console.log(`${element[0]} ${element[1]}`);\n});\n```\n\n```js\n// in\u8fd0\u7b97\u7b26\u7684\u4e00\u4e2a\u95ee\u9898\u662f\uff0c\u5b83\u4e0d\u80fd\u8bc6\u522b\u54ea\u4e9b\u5c5e\u6027\u662f\u5bf9\u8c61\u81ea\u8eab\u7684\uff0c\u54ea\u4e9b\u5c5e\u6027\u662f\u7ee7\u627f\u7684\u3002\nvar obj = { p: 1 };\n"p" in obj; // true\n"toString" in obj; // true\n\nconst m = new Map();\nm.set("edition", 6);\nm.set(262, "standard");\nm.set(undefined, "nah");\nm.has("edition"); // true\nm.has("years"); // false\nm.has(262); // true\nm.has(undefined); // true\n```\n'},HYoD:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: 2.\u4e24\u6570\u4e4b\u548c\n---\n"},HjmQ:function(n,t,e){"use strict";e.r(t),t.default="```python\n# 2 is in the list\nif 2 in [1, 2, 3]:\n    print(\"2 is in the list\")\n\n# 2 is not in the list\nif 2 not in [4, 5, 6]:\n    print(\"2 is not in the list\")\n\n\nsome_list = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n# 2\nprint(some_list.index(\"c\"))\n```\n\n```sh\n>>> squares = [1, 4, 9, 16, 25]\n>>> squares\n[1, 4, 9, 16, 25]\n\n# \u5217\u8868\u4e5f\u652f\u6301\u7d22\u5f15\u548c\u5207\u7247:\n>>> squares[0]  # indexing returns the item\n1\n\n# insert \uff0cremove \u6216\u8005 sort \u65b9\u6cd5\uff0c\u53ea\u4fee\u6539\u5217\u8868\uff0c\u6ca1\u6709\u6253\u5370\u51fa\u8fd4\u56de\u503c\n>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']\n>>> fruits.index('banana')\n3\n>>> fruits.index('banana', 4)  # Find next banana starting a position 4\n6\n```\n"},Hwyt:function(n,t,e){"use strict";e.r(t),t.default='```c++\nint scores[100];\n\nint a[5] = {22, 37, 3490, 18, 95};\n\n\nint a[5] = {1, 2, 3, 4, 5};\na = {22, 37, 3490, 18, 95}; // \u62a5\u9519\n\n\nint a[5] = {22, 37, 3490};\n// \u7b49\u540c\u4e8e\nint a[5] = {22, 37, 3490, 0, 0};\n\n\n// \u5c06\u6574\u4e2a\u6570\u7ec4\u7684\u6bcf\u4e00\u4e2a\u6210\u5458\u90fd\u8bbe\u7f6e\u4e3a\u96f6\nint a[100] = {0};\n\n\n// \u6570\u7ec4\u521d\u59cb\u5316\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u4e3a\u54ea\u4e9b\u4f4d\u7f6e\u7684\u6210\u5458\u8d4b\u503c\u3002\nint a[15] = {[2] = 29, [9] = 7, [14] = 48};\n\n// 0\u53f7\u30015\u53f7\u30016\u53f7\u300110\u53f7\u300111\u53f7\u88ab\u8d4b\u503c\u3002\nint a[15] = {1, [5] = 10, 11, [10] = 20, 21}\n\n\nint a[] = {22, 37, 3490};\n// \u7b49\u540c\u4e8e\nint a[3] = {22, 37, 3490};\n```\n\n## \u6570\u7ec4\u957f\u5ea6\n\n```c++\nint a[] = {22, 37, 3490}; // \u7701\u7565\u65b9\u62ec\u53f7\u91cc\u9762\u7684\u6570\u7ec4\u6210\u5458\u6570\u91cf\nint arrLen = sizeof(a); // 12\nsizeof(a) / sizeof(a[0])\n\n\nint x[12];\nprintf("%zu\\n", sizeof(x));     // 48\nprintf("%zu\\n", sizeof(int));  // 4\nprintf("%zu\\n", sizeof(x) / sizeof(int)); // 12\n```\n\n## \u591a\u7ef4\u6570\u7ec4\n\n```c++\nint board[10][10];\n\nint a[2][5] = {\n  {0, 1, 2, 3, 4},\n  {5, 6, 7, 8, 9}\n};\n\nint a[2][2] = {[0][0] = 1, [1][1] = 2};  // \u5176\u4ed6\u4f4d\u7f6e\u5c31\u81ea\u52a8\u8bbe\u4e3a0\n\n// \u4e0d\u7ba1\u6570\u7ec4\u6709\u591a\u5c11\u7ef4\u5ea6\uff0c\u5728\u5185\u5b58\u91cc\u9762\u90fd\u662f\u7ebf\u6027\u5b58\u50a8\uff0ca[0][0]\u7684\u540e\u9762\u662fa[0][1]\uff0ca[0][1]\u7684\u540e\u9762\u662fa[1][0]\n// \u4e0b\u9762\u7684\u8bed\u53e5\u4e0e\u4e0a\u9762\u7684\u8d4b\u503c\u8bed\u53e5\u662f\u5b8c\u5168\u7b49\u540c\u7684\nint a[2][2] = {1, 0, 0, 2};\n```\n\n## \u53d8\u957f\u6570\u7ec4\n\n```c++\nint n = x + y;\nint arr[n];\n\n\nint i = 10;\nint a1[i];\nint a2[i + 5];\nint a3[i + k];\n\n\nint m = 4;\nint n = 5;\nint c[m][n];\n```\n\n## \u6570\u7ec4\u7684\u5730\u5740\n\n```c++\nint a[5] = {11, 22, 33, 44, 55};\nint* p;\np = &a[0];\nprintf("%d\\n", *p);  // Prints "11"\n\n\n// \u6570\u7ec4\u540d\u5c31\u662f\u6307\u5411\u7b2c\u4e00\u4e2a\u6210\u5458\uff08array[0]\uff09\u7684\u6307\u9488\nint a[5] = {11, 22, 33, 44, 55};\nint* p = &a[0];\n// \u7b49\u540c\u4e8e\nint* p = a;\n\n\n// \u4f20\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u4e0e\u4f20\u5165\u4e00\u4e2a\u6574\u6570\u6307\u9488\u662f\u540c\u4e00\u56de\u4e8b\n// \u5199\u6cd5\u4e00\nint sum(int arr[], int len);\n// \u5199\u6cd5\u4e8c\nint sum(int* arr, int len);\n\n\nint sum(int* arr, int len) {\n  int i;\n  int total = 0;\n  for (i = 0; i < len; i++) {\n    total += arr[i];\n  }\n  return total;\n}\n\n\nint a[4][2];\n// \u53d6\u51fa a[0][0] \u7684\u503c\n*(a[0]);\n// \u7b49\u540c\u4e8e\n**a // \u7b2c\u4e00\u6b21\u53d6\u51fa\u7684\u662fa[0]\uff0c\u7b2c\u4e8c\u6b21\u53d6\u51fa\u7684\u662fa[0][0]\n\n\nint ints[100];\nints = NULL; // \u62a5\u9519\n\n\nint a[5] = {1, 2, 3, 4, 5};\n// \u5199\u6cd5\u4e00\nint b[5] = a; // \u62a5\u9519\n// \u5199\u6cd5\u4e8c\nint b[5];\nb = a; // \u62a5\u9519\n```\n\n## \u6570\u7ec4\u6307\u9488\u7684\u52a0\u51cf\u6cd5\n\n```c++\n// \u6570\u7ec4\u540d\u53ef\u4ee5\u8fdb\u884c\u52a0\u6cd5\u548c\u51cf\u6cd5\u8fd0\u7b97\uff0c\u7b49\u540c\u4e8e\u5728\u6570\u7ec4\u6210\u5458\u4e4b\u95f4\u524d\u540e\u79fb\u52a8\nint a[5] = {11, 22, 33, 44, 55};\nfor (int i = 0; i < 5; i++) {\n  printf("%d\\n", *(a + i));\n}\n\n// \u4e0b\u9762\u7684\u7b49\u5f0f\u603b\u662f\u6210\u7acb\na[b] == *(a + b)\n// \u5982\u679c\u6307\u9488\u53d8\u91cfp\u6307\u5411\u6570\u7ec4\u7684\u4e00\u4e2a\u6210\u5458\uff0c\u90a3\u4e48p++\u5c31\u76f8\u5f53\u4e8e\u6307\u5411\u4e0b\u4e00\u4e2a\u6210\u5458\n// \u4e0d\u80fd\u76f4\u63a5\u5bf9a\u8fdb\u884c\u81ea\u589e\uff0c\u5373a++\u7684\u5199\u6cd5\u662f\u9519\u7684\nint a[] = {11, 22, 33, 44, 55, 999};\nint* p = a;\nwhile (*p != 999) {\n  printf("%d\\n", *p);\n  p++;\n}\n```\n\n```c++\nint sum(int* start, int* end) {\n  int total = 0;\n  // \u904d\u5386\u6570\u7ec4\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6570\u7ec4\u8d77\u59cb\u5730\u5740\u548c\u7ed3\u675f\u5730\u5740\u7684\u6bd4\u8f83\u6765\u5b9e\u73b0\n  while (start < end) {\n    total += *start;\n    start++;\n  }\n  return total;\n}\nint arr[5] = {20, 10, 5, 39, 4};\nprintf("%i\\n", sum(arr, arr + 5));\n\n\nint arr[5] = {20, 10, 5, 39, 88};\nint* p = arr;\nwhile (*p != 88)\n  p++;\nprintf("%i\\n", p - arr); // 4\n\n\nint arr[4][2];\n// \u6307\u9488\u6307\u5411 arr[1]\narr + 1;\n// \u6307\u9488\u6307\u5411 arr[0][1]\narr[0] + 1\n\n\nint* p = &a[5];\nint* q = &a[1];\nprintf("%d\\n", p - q); // 4\nprintf("%d\\n", q - p); // -4\n```\n\n## \u6570\u7ec4\u7684\u590d\u5236\n\n```c++\n// a\u548cb\u6307\u5411\u540c\u4e00\u4e2a\u6570\u7ec4\nint* a;\nint b[3] = {1, 2, 3};\na = b;\n\n\n// \u4f7f\u7528\u5faa\u73af\nfor (i = 0; i < N; i++)\n  a[i] = b[i];\n\n\n// \u4f7f\u7528memcpy()\u51fd\u6570\uff08\u5b9a\u4e49\u5728\u5934\u6587\u4ef6string.h\uff09\uff0c\u76f4\u63a5\u628a\u6570\u7ec4\u6240\u5728\u7684\u90a3\u4e00\u6bb5\u5185\u5b58\uff0c\u518d\u590d\u5236\u4e00\u4efd\u3002\nmemcpy(a, b, sizeof(b));\n```\n\n## \u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\n\n```c++\nint sum_array(int a[], int n) {\n  // ...\n}\nint a[] = {3, 5, 7, 3};\nint sum = sum_array(a, 4);\n\n\n// \u9664\u4e86\u7b2c\u4e00\u7ef4\u7684\u957f\u5ea6\u53ef\u4ee5\u5f53\u4f5c\u53c2\u6570\u4f20\u5165\u51fd\u6570\uff0c\u5176\u4ed6\u7ef4\u7684\u957f\u5ea6\u9700\u8981\u5199\u5165\u51fd\u6570\u7684\u5b9a\u4e49\nint sum_array(int a[][4], int n) {\n  // ...\n}\nint a[2][4] = {\n  {1, 2, 3, 4},\n  {8, 9, 10, 11}\n};\nint sum = sum_array(a, 2);\n\n\n// \u53d8\u957f\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u53d8\u91cfn\u987a\u5e8f\u4e00\u5b9a\u8981\u5728\u53d8\u957f\u6570\u7ec4\u524d\nint sum_array(int n, int a[n]) {\n  // ...\n}\nint a[] = {3, 5, 7, 3};\nint sum = sum_array(4, a);\n\n\n// \u53d8\u957f\u6570\u7ec4\u7684\u539f\u578b\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528*\u4ee3\u66ff\u53d8\u91cf\u540d\uff0c\u4e5f\u53ef\u4ee5\u7701\u7565\u53d8\u91cf\u540d\u3002\nint sum_array(int, int [*]);\nint sum_array(int, int []);\n\n\n// \u53d8\u957f\u6570\u7ec4\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u5c31\u662f\u591a\u7ef4\u6570\u7ec4\u7684\u53c2\u6570\u58f0\u660e\uff0c\u53ef\u4ee5\u628a\u540e\u9762\u7684\u7ef4\u5ea6\u7701\u6389\u4e86\u3002\n// \u539f\u6765\u7684\u5199\u6cd5\nint sum_array(int a[][4], int n);\n// \u53d8\u957f\u6570\u7ec4\u7684\u5199\u6cd5\nint sum_array(int n, int m, int a[n][m]);\n\n\n// \u6570\u7ec4\u5b57\u9762\u91cf\u4f5c\u4e3a\u53c2\u6570\n// \u6570\u7ec4\u53d8\u91cf\u4f5c\u4e3a\u53c2\u6570\nint a[] = {2, 3, 4, 5};\nint sum = sum_array(a, 4);\n// \u6570\u7ec4\u5b57\u9762\u91cf\u4f5c\u4e3a\u53c2\u6570\nint sum = sum_array((int []){2, 3, 4, 5}, 4);\n```\n'},HxRQ:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5feb\u901f\u6392\u5e8f\n---\n"},IEIS:function(n,t,e){"use strict";e.r(t),t.default="```js\nconst x = `------\nLine 1\nLine 2\nLine 3\n------`;\n```\n"},IEUD:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport "fmt"\n\nfunc intSeq() func() int {\n    i := 0\n    return func() int {\n        i++\n        return i\n    }\n}\n\nfunc main() {\n\n    nextInt := intSeq()\n\n    fmt.Println(nextInt()) // 1\n    fmt.Println(nextInt()) // 2\n    fmt.Println(nextInt()) // 3\n\n    newInts := intSeq()\n    fmt.Println(newInts()) // 1\n}\n```\n'},IlkK:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u9012\u5f52\n---"},IvGE:function(n,t,e){"use strict";e.r(t),t.default='```go\ntype ages int\ntype money float32\ntype months map[string]int\nm := months {\n  "January":31,\n  "February":28,\n  // ...\n  "December":31,\n}\ntype Rectangle struct {\n  width, height float64\n}\n```\n'},J4VT:function(n,t,e){"use strict";e.r(t),t.default="- dart \u7684`final`\u7c7b\u4f3c\u4e8e js \u4e2d\u7684 const\uff0c\u53ea\u80fd\u5b9a\u4e49\u4e00\u6b21\uff0c\u4f46\u53ef\u8fd0\u884c\u65f6\u624d\u786e\u5b9a\u503c\uff0c\n  \u5982\u679c\u662f\u590d\u6742\u5bf9\u8c61\uff0c\u5185\u5b58\u5730\u5740\u4e0d\u53d8\uff0c\u4f46\u662f\u5bf9\u8c61\u7684\u6210\u5458\u662f\u53ef\u53d8\u7684\u3002\n- dart \u7684`const`\u6bd4 final \u9650\u5236\u66f4\u4e25\u683c\uff0c\u5728\u7f16\u8bd1\u65f6\u9700\u6709\u786e\u5b9a\u503c\uff0c\u8fd0\u884c\u65f6\u4e0d\u53ef\u53d8\uff0c\n  \u4e0d\u4f46\u5185\u5b58\u5730\u5740\u4e0d\u53d8\uff0c\u5bf9\u8c61\u7684\u6210\u5458\u4e5f\u90fd\u4e0d\u53ef\u53d8\u3002\n\n```dart\n// \u4e00\u4e2a final \u53d8\u91cf\u53ea\u80fd\u8d4b\u503c\u4e00\u6b21\nfinal name = 'Bob';\nfinal String name = 'Bob';\n// \u4e00\u4e2a const \u53d8\u91cf\u662f\u7f16\u8bd1\u65f6\u5e38\u91cf\nconst bar = 1000000;\nvar varList = const [];\n```\n"},J4Yt:function(n,t,e){"use strict";e.r(t),t.default='\u6240\u6709\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\uff0c\u90fd\u662f`\\0`\n\n```c++\n// \u58f0\u660e\u4e86\u4e00\u4e2a10\u4e2a\u6210\u5458\u7684\u5b57\u7b26\u6570\u7ec4\uff0c\u53ef\u4ee5\u5f53\u4f5c\u5b57\u7b26\u4e32\u3002\n// \u7531\u4e8e\u5fc5\u987b\u7559\u4e00\u4e2a\u4f4d\u7f6e\u7ed9\\0\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u80fd\u5bb9\u7eb39\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u3002\nchar localString[10];\n\n// C \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5199\u6cd5\uff0c\u53cc\u5f15\u53f7\u4e4b\u4e2d\u7684\u5b57\u7b26\uff0c\u4f1a\u88ab\u81ea\u52a8\u89c6\u4e3a\u5b57\u7b26\u6570\u7ec4\u3002\n// \u4e0d\u7528\u81ea\u5df1\u6dfb\u52a0\u7ed3\u5c3e\u5b57\u7b26\\0\uff0cC \u8bed\u8a00\u4f1a\u81ea\u52a8\u6dfb\u52a0\n{\'H\', \'e\', \'l\', \'l\', \'o\', \'\\0\'}\n// \u7b49\u4ef7\u4e8e\n"Hello"\n\n\nchar greeting[50] = "Hello, ""how are you ""today!";\n// \u7b49\u540c\u4e8e\nchar greeting[50] = "Hello, how are you today!";\n// \u7b49\u540c\u4e8e\nchar greeting[50] = "Hello, "\n  "how are you "\n  "today!";\n\n// \u4f7f\u7528\u5360\u4f4d\u7b26%s\u8f93\u51fa\u5b57\u7b26\u4e32\u3002\nprintf("%s\\n", "hello world")\n```\n\n## \u5b57\u7b26\u4e32\u53d8\u91cf\u7684\u58f0\u660e\n\n```c++\n// \u5199\u6cd5\u4e00\nchar s[14] = "Hello, world!";\nchar s[] = "Hello, world!"; // \u7701\u7565\u5b57\u7b26\u6570\u7ec4\u7684\u957f\u5ea6\n\n// \u5199\u6cd5\u4e8c\nchar* s = "Hello, world!";\nconst char* s = "Hello, world!";\n```\n\n- \u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u5728 C \u8bed\u8a00\u5185\u90e8\u88ab\u5f53\u4f5c\u5e38\u91cf\uff0c\u4e0d\u80fd\u4fee\u6539\u5b57\u7b26\u4e32\u672c\u8eab\u3002\n\n```c++\nchar* s = "Hello, world!";\ns[0] = \'z\'; // \u9519\u8bef\n\nchar s[] = "Hello, world!";\ns[0] = \'z\';\n```\n\n- \u6307\u9488\u53d8\u91cf\u53ef\u4ee5\u6307\u5411\u5176\u5b83\u5b57\u7b26\u4e32\u3002\n- \u4f46\u662f\uff0c\u5b57\u7b26\u6570\u7ec4\u53d8\u91cf\u4e0d\u80fd\u6307\u5411\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\n- \u7f16\u8bd1\u5668\u4e00\u65e6\u4e3a\u6570\u7ec4\u53d8\u91cf\u5206\u914d\u5730\u5740\u540e\uff0c\u8fd9\u4e2a\u5730\u5740\u5c31\u7ed1\u5b9a\u8fd9\u4e2a\u6570\u7ec4\u53d8\u91cf\u4e86\uff0c\u8fd9\u79cd\u7ed1\u5b9a\u5173\u7cfb\u662f\u4e0d\u53d8\u7684\u3002\n- \u60f3\u8981\u91cd\u65b0\u8d4b\u503c\uff0c\u5fc5\u987b\u4f7f\u7528 C \u8bed\u8a00\u539f\u751f\u63d0\u4f9b\u7684`strcpy()`\u51fd\u6570\uff0c\u901a\u8fc7\u5b57\u7b26\u4e32\u62f7\u8d1d\u5b8c\u6210\u8d4b\u503c\u3002\n\n```c++\nchar* s = "hello";\ns = "world";\n\nchar s[] = "hello";\ns = "world"; // \u62a5\u9519\n\nchar s[10];\ns = "abc"; // \u9519\u8bef\n\nchar s[10];\nstrcpy(s, "abc");\n```\n\n## \u76f8\u5173\u51fd\u6570\n\n### `strlen()`\n\n```c++\n// strlen()\u51fd\u6570\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u5b57\u8282\u957f\u5ea6\uff0c\u4e0d\u5305\u62ec\u672b\u5c3e\u7684\u7a7a\u5b57\u7b26\\0\u3002\u8be5\u51fd\u6570\u7684\u539f\u578b\u5982\u4e0b\u3002\n// string.h\nsize_t strlen(const char* s);\n\n\n// \u8fd4\u56de\u7684\u662fsize_t\u7c7b\u578b\u7684\u65e0\u7b26\u53f7\u6574\u6570\uff0c\u9664\u975e\u662f\u6781\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u5f53\u4f5cint\u7c7b\u578b\u5904\u7406\u5373\u53ef\u3002\nchar* str = "hello";\nint len = strlen(str); // 5\n```\n\n```c++\n#include <stdio.h>\n#include <string.h>\nint main(void) {\n  char* s = "Hello, world!";\n  printf("The string is %zd characters long.\\n", strlen(s));\n}\n```\n\n```c++\nchar s[50] = "hello";\nprintf("%d\\n", strlen(s));  // 5\nprintf("%d\\n", sizeof(s));  // 50\n```\n\n```c++\n// \u81ea\u5df1\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u3002\nint my_strlen(char *s) {\n  int count = 0;\n  while (s[count] != \'\\0\')\n    count++;\n  return count;\n}\n```\n\n### `strcpy()`\n\n```c++\nchar str1[10];\nchar str2[10];\nstr1 = "abc"; // \u62a5\u9519\nstr2 = str1;  // \u62a5\u9519\n\n\n// \u7ed3\u679c\u662f\u4e24\u4e2a\u6307\u9488\u53d8\u91cfs1\u548cs2\u6307\u5411\u540c\u4e00\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u5c06\u5b57\u7b26\u4e32s1\u7684\u5185\u5bb9\u590d\u5236\u7ed9s2\nchar* s1;\nchar* s2;\ns1 = "abc";\ns2 = s1;\n```\n\n```c++\n// string.h\n// \u5fc5\u987b\u8981\u4fdd\u8bc1\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u957f\u5ea6\u4e0d\u5c0f\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\n// \u5426\u5219\u867d\u7136\u4e0d\u4f1a\u62a5\u9519\uff0c\u4f46\u4f1a\u6ea2\u51fa\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\u53d8\u91cf\u7684\u8fb9\u754c\uff0c\u53d1\u751f\u96be\u4ee5\u9884\u6599\u7684\u7ed3\u679c\u3002\n// \u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684const\u8bf4\u660e\u7b26\uff0c\u8868\u793a\u8fd9\u4e2a\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u3002\nstrcpy(char dest[], const char source[])\n```\n\n```c++\n#include <stdio.h>\n#include <string.h>\n\nint main(void) {\n  char s[] = "Hello, world!";\n  char t[100];\n\n  strcpy(t, s);\n\n  t[0] = \'z\';\n  printf("%s\\n", s);  // "Hello, world!"\n  printf("%s\\n", t);  // "zello, world!"\n}\n```\n\n`strcpy()`\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u6307\u9488\uff08\u5373`char*`\uff09\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002\n\n```c++\nchar* s1 = "beast";\nchar s2[40] = "Be the best that you can be.";\nchar* ps;\n\n// \u4eces2\u7684\u7b2c7\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u62f7\u8d1d\u5b57\u7b26\u4e32beast\uff0c\u524d\u9762\u7684\u4f4d\u7f6e\u4e0d\u53d8\n// s2\u540e\u9762\u7684\u5185\u5bb9\u90fd\u88ab\u622a\u53bb\u4e86\uff0c\u56e0\u4e3a\u4f1a\u8fdebeast\u7ed3\u5c3e\u7684\u7a7a\u5b57\u7b26\u4e00\u8d77\u62f7\u8d1d\nps = strcpy(s2 + 7, s1);\n\nputs(s2); // Be the beast\nputs(ps); // beast\n```\n\n```c++\n// \u8fde\u7eed\u4e3a\u591a\u4e2a\u5b57\u7b26\u6570\u7ec4\u8d4b\u503c\u3002\nstrcpy(str1, strcpy(str2, "abcd"));\n```\n\n```c++\n// \u81ea\u5df1\u5b9e\u73b0\u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\nchar* strcpy(char* dest, const char* source) {\n  char* ptr = dest;\n  // \u4f9d\u6b21\u5c06source\u7684\u6bcf\u4e2a\u5b57\u7b26\u8d4b\u503c\u7ed9dest\uff0c\u7136\u540e\u79fb\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u76f4\u5230\u9047\u5230\\0\n  // *dest++\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u7b49\u540c\u4e8e*(dest++)\uff0c\u5373\u5148\u8fd4\u56dedest\u8fd9\u4e2a\u5730\u5740\uff0c\u518d\u8fdb\u884c\u81ea\u589e\u8fd0\u7b97\u79fb\u5411\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\n  // \u800c*dest\u53ef\u4ee5\u5bf9\u5f53\u524d\u4f4d\u7f6e\u8d4b\u503c\u3002\n  while (*dest++ = *source++);\n  return ptr;\n}\n\nint main(void) {\n  char str[25];\n  strcpy(str, "hello world");\n  printf("%s\\n", str);\n  return 0;\n}\n```\n\n### `strncpy()`\n\n```c++\nstrncpy(str1, str2, sizeof(str1) - 1);\nstr1[sizeof(str1) - 1] = \'\\0\'; // strncpy()\u4e0d\u4f1a\u81ea\u5df1\u6dfb\u52a0\\0\n```\n\n### `strcat()`\n\n```c++\n// string.h\n// \u51fd\u6570\u4f1a\u6539\u53d8\u7b2c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f46\u662f\u7b2c\u4e8c\u4e2a\u5b57\u7b26\u4e32\u4e0d\u53d8\nchar* strcat(char* s1, const char* s2);\n```\n\n```c++\nchar s1[12] = "hello";\nchar s2[6] = "world";\n\nstrcat(s1, s2);\nputs(s1); // "helloworld"\n```\n\n### `strncat()`\n\n```c++\nchar* strncat(\n  const char* dest,\n  const char* src,\n  size_t n\n);\n```\n\n```c++\n// strncat()\u603b\u662f\u4f1a\u5728\u62fc\u63a5\u7ed3\u679c\u7684\u7ed3\u5c3e\uff0c\u81ea\u52a8\u6dfb\u52a0\u7a7a\u5b57\u7b26\\0\n// \u901a\u5e38\u4f1a\u5199\u6210\u4e0b\u9762\u8fd9\u6837\nstrncat(\n  str1,\n  str2,\n  sizeof(str1) - strlen(str1) - 1\n);\n```\n\n### `strcmp()`\n\n`strcmp()`\u53ea\u7528\u6765\u6bd4\u8f83\u5b57\u7b26\u4e32\uff0c\u4e0d\u7528\u6765\u6bd4\u8f83\u5b57\u7b26\u3002\n\u56e0\u4e3a\u5b57\u7b26\u5c31\u662f\u5c0f\u6574\u6570\uff0c\u76f4\u63a5\u7528\u76f8\u7b49\u8fd0\u7b97\u7b26\uff08`==`\uff09\u5c31\u80fd\u6bd4\u8f83\u3002\n\n```c++\n// s1 = Happy New Year\n// s2 = Happy New Year\n// s3 = Happy Holidays\n\nstrcmp(s1, s2) // 0\nstrcmp(s1, s3) // \u5927\u4e8e 0\nstrcmp(s3, s1) // \u5c0f\u4e8e 0\n```\n\n### `strncmp()`\n\n```c++\nchar s1[12] = "hello world";\nchar s2[12] = "hello C";\n\nif (strncmp(s1, s2, 5) == 0) {\n  printf("They all have hello.\\n");\n}\n```\n\n### `sprintf()`\uff0c`snprintf()`\n\n\u7528\u4e8e\u5c06\u6570\u636e\u5199\u5165\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u8f93\u51fa\u5230\u663e\u793a\u5668\u3002\n\n```c++\nint sprintf(char* s, const char* format, ...);\nint snprintf(char*s, size_t n, const char* format, ...);\n```\n\n```c++\nchar first[6] = "hello";\nchar last[6] = "world";\nchar s[40];\n\nsprintf(s, "%s %s", first, last);\nprintf("%s\\n", s); // hello world\n```\n\n```c++\n// \u8868\u793a\u5199\u5165\u5b57\u7b26\u4e32\u7684\u6700\u5927\u957f\u5ea6\u4e0d\u8d85\u8fc712\uff08\u5305\u62ec\u5c3e\u90e8\u7684\u7a7a\u5b57\u7b26\uff09\nsnprintf(s, 12, "%s %s", "hello", "world");\n```\n\n## \u5b57\u7b26\u4e32\u6570\u7ec4\n\n```c++\nchar weekdays[7][10] = {\n  "Monday",\n  "Tuesday",\n  "Wednesday",\n  "Thursday",\n  "Friday",\n  "Saturday",\n  "Sunday"\n};\n\n// \u56e0\u4e3a\u7b2c\u4e00\u7ef4\u7684\u957f\u5ea6\uff0c\u7f16\u8bd1\u5668\u53ef\u4ee5\u81ea\u52a8\u8ba1\u7b97\uff0c\u6240\u4ee5\u53ef\u4ee5\u7701\u7565\u3002\nchar weekdays[][10] = {\n  "Monday",\n  "Tuesday",\n  "Wednesday",\n  "Thursday",\n  "Friday",\n  "Saturday",\n  "Sunday"\n};\n\n// \u628a\u6570\u7ec4\u7684\u7b2c\u4e8c\u7ef4\uff0c\u4ece\u5b57\u7b26\u6570\u7ec4\u6539\u6210\u5b57\u7b26\u6307\u9488\n// \u5176\u5b9e\u662f\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u6210\u5458\u5c31\u662f7\u4e2a\u5b57\u7b26\u6307\u9488\uff0c\u6bcf\u4e2a\u6307\u9488\u6307\u5411\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u5b57\u7b26\u6570\u7ec4\uff09\nchar* weekdays[] = {\n  "Monday",\n  "Tuesday",\n  "Wednesday",\n  "Thursday",\n  "Friday",\n  "Saturday",\n  "Sunday"\n};\n\n// \u904d\u5386\u5b57\u7b26\u4e32\u6570\u7ec4\nfor (int i = 0; i < 7; i++) {\n  printf("%s\\n", weekdays[i]);\n}\n```\n'},JspC:function(n,t,e){"use strict";e.r(t),t.default="```python\n# Measure some strings:\nwords = ['cat', 'window', 'defenestrate']\nfor w in words:\n    print(w, len(w))\n\n# \u5982\u679c\u5728\u5faa\u73af\u5185\u9700\u8981\u4fee\u6539\u5e8f\u5217\u4e2d\u7684\u503c\uff08\u6bd4\u5982\u91cd\u590d\u67d0\u4e9b\u9009\u4e2d\u7684\u5143\u7d20\uff09\uff0c\u63a8\u8350\u4f60\u5148\u62f7\u8d1d\u4e00\u4efd\u526f\u672c\u3002\nfor w in words[:]:  # Loop over a slice copy of the entire list.\n    if len(w) > 6:\n        words.insert(0, w)\n# ['defenestrate', 'cat', 'window', 'defenestrate']\n# \u5982\u679c\u5199\u6210 for w in words:\uff0c\u8fd9\u4e2a\u793a\u4f8b\u5c31\u4f1a\u521b\u5efa\u65e0\u9650\u957f\u7684\u5217\u8868\uff0c\n# \u4e00\u6b21\u53c8\u4e00\u6b21\u91cd\u590d\u5730\u63d2\u5165 defenestrate\u3002\n```\n"},Jv9Q:function(n,t,e){"use strict";e.r(t),t.default="- \u5355\u884c\u6ce8\u91ca\u4ee5 // \u5f00\u59cb\u3002\n- \u591a\u884c\u6ce8\u91ca\u4ee5 /_ \u5f00\u59cb\uff0c _/ \u7ed3\u5c3e\u3002 \u591a\u884c\u6ce8\u91ca \u53ef\u4ee5 \u5d4c\u5957\u3002\n- \u6587\u6863\u6ce8\u91ca\u53ef\u4ee5\u4f7f\u7528 /// \u5f00\u59cb\uff0c \u4e5f\u53ef\u4ee5\u4f7f\u7528 /\\*_ \u5f00\u59cb \u5e76\u4ee5 _/ \u7ed3\u675f\u3002\n\n```dart\nmain() {\n  // TODO: refactor into an AbstractLlamaGreetingFactory?\n  print('Welcome to my Llama farm!');\n}\n\nmain() {\n  /*\n   * This is a lot of work. Consider raising chickens.\n\n  Llama larry = new Llama();\n  larry.feed();\n  larry.exercise();\n  larry.clean();\n   */\n}\n\n/// A domesticated South American camelid (Lama glama).\n///\n/// Andean cultures have used llamas as meat and pack\n/// animals since pre-Hispanic times.\nclass Llama {\n  String name;\n\n  /// Feeds your llama [Food].\n  ///\n  /// The typical llama eats one bale of hay per week.\n  void feed(Food food) {\n    // ...\n  }\n\n  /// Exercises your llama with an [activity] for\n  /// [timeLimit] minutes.\n  void exercise(Activity activity, int timeLimit) {\n    // ...\n  }\n}\n```\n"},JxzW:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6587\u4ef6\u64cd\u4f5c\n---"},K7rx:function(n,t,e){"use strict";e.r(t),t.default='## \u6d4b\u8bd5\u51fd\u6570\uff08\u6d4b\u8bd5\u7528\u4f8b\uff09\n\n```rust\npub fn greeting(name: &str) -> String {\n    format!("Hello {}!", name)\n}\n\npub struct Guess {\n    value: i32,\n}\n\nimpl Guess {\n    pub fn new(value: i32) -> Guess {\n        if value < 1 || value > 100 {\n            panic!("Guess value must be between 1 and 100, got {}.", value);\n        }\n\n        Guess { value }\n    }\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    // \u57fa\u672c\u6d4b\u8bd5\n    #[test]\n    fn it_works() {\n        assert_eq!(2 + 2, 4);\n    }\n\n    // \u6d4b\u8bd5\u5931\u8d25\n    #[test]\n    fn another() {\n        panic!("Make this test fail");\n    }\n\n    // \u81ea\u5b9a\u4e49\u9519\u8bef\u4fe1\u606f\n    // \u4efb\u4f55\u5728 assert! \u7684\u4e00\u4e2a\u5fc5\u9700\u53c2\u6570\u548c assert_eq! \u548c assert_ne!\n    // \u7684\u4e24\u4e2a\u5fc5\u9700\u53c2\u6570\u4e4b\u540e\u6307\u5b9a\u7684\u53c2\u6570\u90fd\u4f1a\u4f20\u9012\u7ed9 format! \u5b8f\n    #[test]\n    fn greeting_contains_name() {\n        let result = greeting("Sunface");\n        let target = "\u5b59\u98de";\n        assert!(\n            result.contains(target),\n            "\u4f60\u7684\u95ee\u5019\u4e2d\u5e76\u6ca1\u6709\u5305\u542b\u76ee\u6807\u59d3\u540d {} \uff0c\u4f60\u7684\u95ee\u5019\u662f {}",\n            target,\n            result\n        );\n    }\n\n    // \u6d4b\u8bd5panic\n    // \u53ef\u4ee5\u7ed9 should_panic \u5c5e\u6027\u589e\u52a0\u4e00\u4e2a\u53ef\u9009\u7684 expected \u53c2\u6570\n    #[test]\n    #[should_panic(expected = "Guess value must be less than or equal to 100")]\n    fn greater_than_100() {\n        Guess::new(200);\n    }\n\n    // \u4f7f\u7528 Result<T, E>\n    // \u4e0d\u540c\u4e8e\u8c03\u7528 assert_eq! \u5b8f\n    // \u6d4b\u8bd5\u901a\u8fc7\u65f6\u8fd4\u56de Ok(())\uff0c\u5728\u6d4b\u8bd5\u5931\u8d25\u65f6\u8fd4\u56de\u5e26\u6709 String \u7684 Err\n    #[test]\n    fn it_works() -> Result<(), String> {\n        if 2 + 2 == 4 {\n            Ok(())\n        } else {\n            Err(String::from("two plus two does not equal four"))\n        }\n    }\n\n    // \u5ffd\u7565\u6d4b\u8bd5\n    #[test]\n    #[ignore]\n    fn expensive_test() {\n        // \u8fd9\u91cc\u7684\u4ee3\u7801\u9700\u8981\u51e0\u5341\u79d2\u751a\u81f3\u51e0\u5206\u949f\u624d\u80fd\u5b8c\u6210\n    }\n}\n```\n\n```rust\n// assert_eq! \u548c assert_ne!\u3002\u8fd9\u4e24\u4e2a\u5b8f\u5206\u522b\u6bd4\u8f83\u4e24\u4e2a\u503c\u662f\u76f8\u7b49\u8fd8\u662f\u4e0d\u76f8\u7b49\u3002\n// assert_eq! \u548c assert_ne! \u5b8f\u5728\u5e95\u5c42\u5206\u522b\u4f7f\u7528\u4e86 == \u548c !=\u3002\n// \u5f53\u65ad\u8a00\u5931\u8d25\u65f6\uff0c\u8fd9\u4e9b\u5b8f\u4f1a\u4f7f\u7528\u8c03\u8bd5\u683c\u5f0f\u6253\u5370\u51fa\u5176\u53c2\u6570\uff0c\n// \u8fd9\u610f\u5473\u7740\u88ab\u6bd4\u8f83\u7684\u503c\u5fc5\u9700\u5b9e\u73b0\u4e86 PartialEq \u548c Debug trait\npub fn add_two(a: i32) -> i32 {\n    a + 2\n}\n#[cfg(test)]\nmod tests {\n    use super::*;\n    #[test]\n    fn it_adds_two() {\n        assert_eq!(4, add_two(2));\n    }\n    #[test]\n    fn it_adds_tree() {\n        assert_ne!(4, add_two(3));\n    }\n}\n```\n\n```sh\ncargo test\n\n# \u4f7f\u7528 -- \u5206\u5272\u547d\u4ee4\u884c\u53c2\u6570\n# \u7b2c\u4e00\u79cd\u662f\u63d0\u4f9b\u7ed9 cargo test \u547d\u4ee4\u672c\u8eab\u7684\uff0c\u8fd9\u4e9b\u53c2\u6570\u5728 -- \u4e4b\u524d\u6307\u5b9a\n# \u7b2c\u4e8c\u79cd\u662f\u63d0\u4f9b\u7ed9\u7f16\u8bd1\u540e\u7684\u53ef\u6267\u884c\u6587\u4ef6\u7684\uff0c\u5728 -- \u4e4b\u540e\u6307\u5b9a\ncargo test --help\ncargo test -- --help\n\n# \u663e\u793a\u6d4b\u8bd5\u51fd\u6570\u4e2d\u7684 println!\ncargo test -- --show-output\n\n# \u8fd0\u884c\u5355\u4e2a\u6d4b\u8bd5\ncargo test one_hundred\n\n# \u901a\u8fc7\u540d\u79f0\u6765\u8fc7\u6ee4\u6d4b\u8bd5\uff08\u540d\u79f0\u4e2d\u5e26add\uff09\ncargo test add\n\n# \u8fd0\u884c\u88ab\u5ffd\u7565\u7684\u6d4b\u8bd5\u51fd\u6570\ncargo test -- --ignored\n# \u8fd0\u884c\u540d\u79f0\u4e2d\u5e26 run \u4e14\u88ab\u5ffd\u7565\u7684\u6d4b\u8bd5\u51fd\u6570\ncargo test run -- --ignored\n\n# \u6d4b\u8bd5\u901a\u8fc7\u662f\u6253\u5370\u5185\u5bb9\u4f1a\u88ab\u622a\u83b7\u5ffd\u7565\uff0c\u5931\u8d25\u624d\u663e\u793a\u3002\n# \u622a\u83b7\u8f93\u51fa\u7684\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7 --nocapture \u53c2\u6570\u6765\u7981\u7528\ncargo test -- --nocapture\n```\n\n## \u5355\u5143\u6d4b\u8bd5\u3001\u96c6\u6210\u6d4b\u8bd5\n\n\u5355\u5143\u6d4b\u8bd5\uff08unit tests\uff09\u4e0e \u96c6\u6210\u6d4b\u8bd5\uff08integration tests\uff09\u3002\n\n- \u5355\u5143\u6d4b\u8bd5\u503e\u5411\u4e8e\u66f4\u5c0f\u800c\u66f4\u96c6\u4e2d\uff0c\u5728\u9694\u79bb\u7684\u73af\u5883\u4e2d\u4e00\u6b21\u6d4b\u8bd5\u4e00\u4e2a\u6a21\u5757\uff0c\u6216\u8005\u662f\u6d4b\u8bd5\u79c1\u6709\u63a5\u53e3\u3002\n  - \u5355\u5143\u6d4b\u8bd5\u662f\u8ddf\u6b63\u5e38\u7684\u903b\u8f91\u4ee3\u7801\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\uff0c\u56e0\u6b64\u5fc5\u987b\u5bf9\u5176\u8fdb\u884c\u7279\u6b8a\u7684\u6807\u6ce8\uff0c\u4ee5\u4fbf Rust \u53ef\u4ee5\u8bc6\u522b\u3002\n  - \u89c4\u8303\u662f\u5728\u6bcf\u4e2a\u6587\u4ef6\u4e2d\u521b\u5efa\u5305\u542b\u6d4b\u8bd5\u51fd\u6570\u7684 `tests` \u6a21\u5757\uff0c\u5e76\u4f7f\u7528 `cfg(test)` \u6807\u6ce8\u6a21\u5757\n- \u800c\u96c6\u6210\u6d4b\u8bd5\u5bf9\u4e8e\u4f60\u7684\u5e93\u6765\u8bf4\u5219\u5b8c\u5168\u662f\u5916\u90e8\u7684\u3002\n  - \u96c6\u6210\u6d4b\u8bd5\u7684\u76ee\u7684\u662f\u6d4b\u8bd5\u5e93\u7684\u591a\u4e2a\u90e8\u5206\u80fd\u5426\u4e00\u8d77\u6b63\u5e38\u5de5\u4f5c\u3002\n  - \u5b83\u4eec\u4e0e\u5176\u4ed6\u5916\u90e8\u4ee3\u7801\u4e00\u6837\uff0c\u901a\u8fc7\u76f8\u540c\u7684\u65b9\u5f0f\u4f7f\u7528\u4f60\u7684\u4ee3\u7801\uff0c\u53ea\u6d4b\u8bd5\u516c\u6709\u63a5\u53e3\u800c\u4e14\u6bcf\u4e2a\u6d4b\u8bd5\u90fd\u6709\u53ef\u80fd\u4f1a\u6d4b\u8bd5\u591a\u4e2a\u6a21\u5757\u3002\n    - \u96c6\u6210\u6d4b\u8bd5\u88ab\u653e\u5165\u5355\u72ec\u7684\u76ee\u5f55\u6587\u4ef6\u4e2d\n    - \u4e0d\u9700\u8981\u521b\u5efa\u6d4b\u8bd5\u6a21\u5757\u53ca\u6807\u6ce8 `#[cfg(test)]`\n    - \u53ea\u80fd\u8c03\u7528\u901a\u8fc7 pub \u5b9a\u4e49\u7684 API\n    - \u4e00\u4e2a\u6807\u51c6\u7684 Rust \u9879\u76ee\uff0c\u5728\u5b83\u7684\u6839\u76ee\u5f55\u4e0b\u4f1a\u6709\u4e00\u4e2a `tests` \u76ee\u5f55\uff0c\u4e0e `src` \u540c\u7ea7\u3002\n    - \u5728\u96c6\u6210\u6d4b\u8bd5\u7684 tests \u76ee\u5f55\u4e0b\uff0c\u6bcf\u4e00\u4e2a\u6587\u4ef6\u90fd\u662f\u4e00\u4e2a\u72ec\u7acb\u7684\u5305\n\nRust \u53ea\u652f\u6301\u5bf9 lib \u7c7b\u578b\u7684\u5305\u8fdb\u884c\u96c6\u6210\u6d4b\u8bd5\uff0c\u5bf9\u4e8e\u4e8c\u8fdb\u5236\u5305\u4f8b\u5982 `src/main.rs` \u662f\u65e0\u80fd\u4e3a\u529b\u7684\u3002\n\u539f\u56e0\u5728\u4e8e\uff0c\u6211\u4eec\u65e0\u6cd5\u5728\u5176\u5b83\u5305\u4e2d\u4f7f\u7528 use \u5f15\u5165\u4e8c\u8fdb\u5236\u5305\uff0c\u800c\u53ea\u6709 lib \u7c7b\u578b\u7684\u5305\u624d\u80fd\u88ab\u5f15\u5165\uff0c\u4f8b\u5982 `src/lib.rs`\n\n\u96c6\u6210\u6d4b\u8bd5\u793a\u4f8b\uff1a\n\n```rust\n// tests/integration_test.rs\nuse adder;\n\nmod common;\n\n#[test]\nfn it_adds_two() {\n    common::setup();\n    assert_eq!(4, adder::add_two(2));\n}\n```\n\n```rust\n// tests/common/mod.rs\n// \u5e0c\u671b\u8fd9\u4e2a\u51fd\u6570\u80fd\u88ab\u591a\u4e2a\u6d4b\u8bd5\u6587\u4ef6\u7684\u6d4b\u8bd5\u51fd\u6570\u8c03\u7528\npub fn setup() {\n    // \u7f16\u5199\u7279\u5b9a\u5e93\u6d4b\u8bd5\u6240\u9700\u7684\u4ee3\u7801\n}\n```\n\n\u5355\u5143\u6d4b\u8bd5\u7684\u5171\u4eab\u6a21\u5757\u8def\u5f84\n\n- `tests/common.rs`\n- `tests/common/mod.rs`\n  - \u8fd9\u6837\u547d\u540d\u544a\u8bc9 Rust \u4e0d\u8981\u5c06 common \u770b\u4f5c\u4e00\u4e2a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\n\n```sh\n# \u8fd0\u884c\u67d0\u4e2a\u7279\u5b9a\u96c6\u6210\u6d4b\u8bd5\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u6d4b\u8bd5\ncargo test --test integration_test\n```\n\n## \u6d4b\u8bd5\u624d\u5f15\u5165\u7684\u5305\n\n`Cargo.toml`\n\n```toml\n# standard crate data is left out\n[dev-dependencies]\npretty_assertions = "1"\n```\n\n```rust\npub fn add(a: i32, b: i32) -> i32 {\n    a + b\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use pretty_assertions::assert_eq; // \u8be5\u5305\u4ec5\u80fd\u7528\u4e8e\u6d4b\u8bd5\n\n    #[test]\n    fn test_add() {\n        assert_eq!(add(2, 3), 5);\n    }\n}\n```\n\n## \u65ad\u8a00\n\n- \u6240\u6709\u6a21\u5f0f\u4e0b\u8fd0\u884c\n  - `assert!`\n  - `assert_eq!`\n  - `assert_ne!`\n- Debug \u6a21\u5f0f\u4e0b\u8fd0\u884c\n  - `debug_assert!`\n  - `debug_assert_eq!`\n  - `debug_assert_ne!`\n\n## benckmark \u57fa\u51c6\u6d4b\u8bd5\n\n\u6027\u80fd\u6d4b\u8bd5\u5305\u542b\u4e86\u4e24\u79cd\uff1a\u538b\u529b\u6d4b\u8bd5\u548c\u57fa\u51c6\u6d4b\u8bd5\n\n- \u524d\u8005\u662f\u9488\u5bf9\u63a5\u53e3 API\uff0c\u6a21\u62df\u5927\u91cf\u7528\u6237\u53bb\u8bbf\u95ee\u63a5\u53e3\u7136\u540e\u751f\u6210\u63a5\u53e3\u7ea7\u522b\u7684\u6027\u80fd\u6570\u636e\uff1b\n- \u800c\u540e\u8005\u662f\u9488\u5bf9\u4ee3\u7801\uff0c\u53ef\u4ee5\u7528\u6765\u6d4b\u8bd5\u67d0\u4e00\u6bb5\u4ee3\u7801\u7684\u8fd0\u884c\u901f\u5ea6\uff0c\u4f8b\u5982\u4e00\u4e2a\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u5b98\u65b9\u63d0\u4f9b\u7684\u6d4b\u8bd5\u5de5\u5177\uff0c\u76ee\u524d\u6700\u5927\u7684\u95ee\u9898\u5c31\u662f\u53ea\u80fd\u5728\u975e stable \u4e0b\u4f7f\u7528\uff0c\n\u539f\u56e0\u662f\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u5f15\u5165 test \u7279\u6027: `#![feature(test)]`\n\n\u9700\u8981\u5148\u5c06\u5f53\u524d\u4ed3\u5e93\u4e2d\u7684 Rust \u7248\u672c\u4ece stable \u5207\u6362\u4e3a nightly:\n\n- \u5b89\u88c5 nightly \u7248\u672c\uff1a\\$ `rustup install nightly`\n- \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u786e\u8ba4\u7248\u672c\u5df2\u7ecf\u5b89\u88c5\u6210\u529f `rustup toolchain list`\n- \u8fdb\u5165 adder \u9879\u76ee(\u4e4b\u524d\u4e3a\u4e86\u5b66\u4e60\u6d4b\u8bd5\u4e13\u95e8\u521b\u5efa\u7684\u9879\u76ee)\u7684\u6839\u76ee\u5f55\uff0c\u7136\u540e\u8fd0\u884c `rustup override set nightly`\uff0c\u5c06\u8be5\u9879\u76ee\u4f7f\u7528\u7684 rust \u8bbe\u7f6e\u4e3a nightly\n  - \u4f7f\u7528 `rustup override set stable` \u5207\u6362\u56de stable \u7248\u672c\n\n```rust\n// src/lib.rs\n#![feature(test)]\n\nextern crate test;\n\npub fn add_two(a: i32) -> i32 {\n    a + 2\n}\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use test::Bencher;\n\n    #[test]\n    fn it_works() {\n        assert_eq!(4, add_two(2));\n    }\n\n    #[bench]\n    fn bench_add_two(b: &mut Bencher) {\n        b.iter(|| add_two(2));\n    }\n}\n```\n\n```rust\n#![feature(test)]\n\nextern crate test;\n\nfn fibonacci_u64(number: u64) -> u64 {\n    let mut last: u64 = 1;\n    let mut current: u64 = 0;\n    let mut buffer: u64;\n    let mut position: u64 = 1;\n\n    return loop {\n        if position == number {\n            break current;\n        }\n\n        buffer = last;\n        last = current;\n        current = buffer + current;\n        position += 1;\n    };\n}\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use test::Bencher;\n\n    #[test]\n    fn it_works() {\n       assert_eq!(fibonacci_u64(1), 0);\n       assert_eq!(fibonacci_u64(2), 1);\n       assert_eq!(fibonacci_u64(12), 89);\n       assert_eq!(fibonacci_u64(30), 514229);\n    }\n\n    #[bench]\n    fn bench_u64(b: &mut Bencher) {\n        b.iter(|| {\n            for i in 100..200 {\n                // LLVM\u8ba4\u4e3afibonacci_u64\u51fd\u6570\u8c03\u7528\u7684\u7ed3\u679c\u6ca1\u6709\u4f7f\u7528\uff0c\n                // \u540c\u65f6\u4e5f\u8ba4\u4e3a\u8be5\u51fd\u6570\u6ca1\u6709\u4efb\u4f55\u526f\u4f5c\u7528(\u9020\u6210\u5176\u5b83\u7684\u5f71\u54cd\uff0c\u4f8b\u5982\u4fee\u6539\u5916\u90e8\u53d8\u91cf\u3001\u8bbf\u95ee\u7f51\u7edc\u7b49),\n                // \u56e0\u6b64\u5b83\u6709\u7406\u7531\u628a\u8fd9\u4e2a\u51fd\u6570\u8c03\u7528\u4f18\u5316\u6389\uff01\n                // fibonacci_u64(i);\n                test::black_box(fibonacci_u64(test::black_box(i)));\n            }\n        });\n    }\n}\n```\n\n```sh\ncargo bench\n```\n'},KEsA:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: 9.Z \u5b57\u5f62\u53d8\u6362\n---\n"},KOwc:function(n,t,e){"use strict";e.r(t),t.default="- `module`\uff1a\u4e00\u4e2a\u6587\u4ef6\u5c31\u662f\u4e00\u4e2a\u6a21\u5757\n- `package`\uff1a\u5305\u662f\u4e00\u4e2a\u5305\u542b `__init__.py` \u6587\u4ef6\u7684\u76ee\u5f55\n  \u5305\u662f\u4e00\u79cd\u901a\u8fc7\u7528\u201c\u5e26\u70b9\u53f7\u7684\u6a21\u5757\u540d\u201d\u6765\u6784\u9020 Python \u6a21\u5757\u547d\u540d\u7a7a\u95f4\u7684\u65b9\u6cd5\u3002\n- `lib`\uff1a\u5e93\u662f\u5b8c\u6210\u4e00\u5b9a\u529f\u80fd\u7684\u4ee3\u7801\u96c6\u5408\uff0c\u5728 python \u4e2d\u662f\u5305\u548c\u6a21\u5757\u7684\u5f62\u5f0f\n\n\u5f53\u4e00\u4e2a\u540d\u4e3a spam \u7684\u6a21\u5757\u88ab\u5bfc\u5165\u7684\u65f6\u5019\uff0c\n\u89e3\u91ca\u5668\u9996\u5148\u5bfb\u627e\u5177\u6709\u8be5\u540d\u79f0\u7684\u5185\u7f6e\u6a21\u5757\u3002\n\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u7136\u540e\u89e3\u91ca\u5668\u4ece `sys.path` \u53d8\u91cf\u7ed9\u51fa\u7684\u76ee\u5f55\u5217\u8868\u91cc\u5bfb\u627e\u540d\u4e3a `spam.py` \u7684\u6587\u4ef6\u3002\n`sys.path` \u521d\u59cb\u6709\u8fd9\u4e9b\u76ee\u5f55\u5730\u5740:\n\n- \u5305\u542b\u8f93\u5165\u811a\u672c\u7684\u76ee\u5f55\uff08\u6216\u8005\u672a\u6307\u5b9a\u6587\u4ef6\u65f6\u7684\u5f53\u524d\u76ee\u5f55\uff09\u3002\n- PYTHONPATH \uff08\u4e00\u4e2a\u5305\u542b\u76ee\u5f55\u540d\u79f0\u7684\u5217\u8868\uff0c\u5b83\u548c shell \u53d8\u91cf PATH \u6709\u4e00\u6837\u7684\u8bed\u6cd5\uff09\u3002\n- \u53d6\u51b3\u4e8e\u5b89\u88c5\u7684\u9ed8\u8ba4\u8bbe\u7f6e\n\n```python\n# fibo.py\ndef fib(n):    # write Fibonacci series up to n\n  a, b = 0, 1\n  while a < n:\n    print(a, end=' ')\n    a, b = b, a+b\n  print()\ndef fib2(n):   # return Fibonacci series up to n\n  result = []\n  a, b = 0, 1\n  while a < n:\n    result.append(a)\n    a, b = b, a+b\n  return result\n\n#\nimport fibo\nfibo.fib(1000)\n#\nfrom fibo import fib, fib2\nfib(1000)\n#\nfrom fibo import *\nfib(1000)\n#\nimport fibo as fib\nfib.fib(500)\n#\nfrom fibo import fib as fibonacci\nfibonacci(500)\n\n# \u4ee5\u811a\u672c\u7684\u65b9\u5f0f\u6267\u884c\u6a21\u5757\n# python fibo.py <arguments>\nif __name__ == \"__main__\":\n    import sys\n    fib(int(sys.argv[1]))\n\n# \u5b50\u5305\u53c2\u8003\nfrom . import echo\nfrom .. import formats\nfrom ..filters import equalizer\n```\n"},KYOG:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: Decoraton \u4fee\u9970\u5668\uff08\u88c5\u9970\u5668\uff09\n---\n"},KohC:function(n,t,e){"use strict";e.r(t),t.default='```js\nconsole.log(`The number is ${aNumber}.`);\nvar number = 11 * 9;\nvar color = "red";\nconsole.log("%d %s balloons", number, color);\n\nconsole.log(" %s + %s ", 1, 1, "= 2");\n// 1 + 1  = 2\n\nconsole.log({ foo: "bar" });\n// Object {foo: "bar"}\nconsole.log(Date);\n// function Date() { [native code] }\n\nvar languages = [\n  { name: "JavaScript", fileExtension: ".js" },\n  { name: "TypeScript", fileExtension: ".ts" },\n  { name: "CoffeeScript", fileExtension: ".coffee" },\n];\nconsole.table(languages);\n\nvar languages = {\n  csharp: { name: "C#", paradigm: "object-oriented" },\n  fsharp: { name: "F#", paradigm: "functional" },\n};\nconsole.table(languages);\n\nconsole.assert(false, "\u5224\u65ad\u6761\u4ef6\u4e0d\u6210\u7acb");\n// Assertion failed: \u5224\u65ad\u6761\u4ef6\u4e0d\u6210\u7acb\n// \u76f8\u5f53\u4e8e\ntry {\n  if (!false) {\n    throw new Error("\u5224\u65ad\u6761\u4ef6\u4e0d\u6210\u7acb");\n  }\n} catch (e) {\n  console.error(e);\n}\n```\n'},L4Ey:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u8df3\u8f6c\n---"},LCqF:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5e0c\u5c14\u6392\u5e8f\n---\n"},"LL/F":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u4e0d\u5b89\u5168\n---"},LRIu:function(n,t,e){"use strict";e.r(t),t.default='```rust\n// helloword.rs\nfn main() {\n    println!("Hello, world!");\n}\n```\n\n```sh\nrustc helloword.rs\n./helloword\n```\n'},Lf3A:function(n,t,e){"use strict";e.r(t),t.default='Go \u4ee3\u7801\u5fc5\u987b\u653e\u5728\u5de5\u4f5c\u7a7a\u95f4\u5185\u3002\u5b83\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u76ee\u5f55\uff0c\u5176\u4e2d\u5305\u542b\u4e09\u4e2a\u5b50\u76ee\u5f55\uff1a\n\n- src \u76ee\u5f55\u5305\u542b Go \u7684\u6e90\u6587\u4ef6\uff0c\u5b83\u4eec\u88ab\u7ec4\u7ec7\u6210\u5305\uff08\u6bcf\u4e2a\u76ee\u5f55\u90fd\u5bf9\u5e94\u4e00\u4e2a\u5305\uff09\uff0c\n- pkg \u76ee\u5f55\u5305\u542b\u5305\u5bf9\u8c61\uff0c\n- bin \u76ee\u5f55\u5305\u542b\u53ef\u6267\u884c\u547d\u4ee4\u3002\n\ngo \u5de5\u5177\u7528\u4e8e\u6784\u5efa\u6e90\u7801\u5305\uff0c\u5e76\u5c06\u5176\u751f\u6210\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u5b89\u88c5\u5230 pkg \u548c bin \u76ee\u5f55\u4e2d\u3002\nsrc \u5b50\u76ee\u5f55\u901a\u5e38\u5305\u4f1a\u542b\u591a\u79cd\u7248\u672c\u63a7\u5236\u7684\u4ee3\u7801\u4ed3\u5e93\uff08\u4f8b\u5982 Git \u6216 Mercurial\uff09\uff0c \u4ee5\u6b64\u6765\u8ddf\u8e2a\u4e00\u4e2a\u6216\u591a\u4e2a\u6e90\u7801\u5305\u7684\u5f00\u53d1\u3002\n\n```sh\n# \u6b64\u5de5\u4f5c\u7a7a\u95f4\u5305\u542b\u4e09\u4e2a\u4ee3\u7801\u5e93\uff08goauth2\u3001streak \u548c todo\uff09\uff0c\n# \u4e24\u4e2a\u547d\u4ee4\uff08streak \u548c todo\uff09 \u4ee5\u53ca\u4e24\u4e2a\u5e93\uff08oauth \u548c task\uff09\u3002\nbin/\n  streak                         # \u53ef\u6267\u884c\u547d\u4ee4\n  todo                           # \u53ef\u6267\u884c\u547d\u4ee4\npkg/\n  linux_amd64/\n    code.google.com/p/goauth2/\n      oauth.a                # \u5305\u5bf9\u8c61\n    github.com/nf/todo/\n      task.a                 # \u5305\u5bf9\u8c61\nsrc/\n  code.google.com/p/goauth2/\n    .hg/                       # mercurial \u4ee3\u7801\u5e93\u5143\u6570\u636e\n    oauth/\n      oauth.go               # \u5305\u6e90\u7801\n      oauth_test.go          # \u6d4b\u8bd5\u6e90\u7801\n  github.com/nf/\n    streak/\n      .git/                      # git \u4ee3\u7801\u5e93\u5143\u6570\u636e\n      oauth.go               # \u547d\u4ee4\u6e90\u7801\n      streak.go              # \u547d\u4ee4\u6e90\u7801\n    todo/\n      .git/                      # git \u4ee3\u7801\u5e93\u5143\u6570\u636e\n      task/\n        task.go            # \u5305\u6e90\u7801\n      todo.go                # \u547d\u4ee4\u6e90\u7801\n```\n\n```go\n// hello.go\npackage main\nimport (\n  "fmt"\n  "github.com/user/stringutil"\n)\nfunc main() {\n  fmt.Printf(stringutil.Reverse("!oG ,olleH"))\n}\n\n// reverse.go\n// stringutil \u5305\u542b\u6709\u7528\u4e8e\u5904\u7406\u5b57\u7b26\u4e32\u7684\u5de5\u5177\u51fd\u6570\u3002\npackage stringutil\n// Reverse \u5c06\u5176\u5b9e\u53c2\u5b57\u7b26\u4e32\u4ee5\u7b26\u6587\u4e3a\u5355\u4f4d\u5de6\u53f3\u53cd\u8f6c\u3002\nfunc Reverse(s string) string {\n  r := []rune(s)\n  for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n    r[i], r[j] = r[j], r[i]\n  }\n  return string(r)\n}\n```\n\n```sh\n# \u4f60\u7684\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\nbin/\n  hello                 # \u53ef\u6267\u884c\u547d\u4ee4\npkg/\n  linux_amd64/          # \u8fd9\u91cc\u4f1a\u53cd\u6620\u51fa\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c\u67b6\u6784\n    github.com/user/\n      stringutil.a  # \u5305\u5bf9\u8c61\nsrc/\n  github.com/user/\n    hello/\n      hello.go      # \u547d\u4ee4\u6e90\u7801\n    stringutil/\n      reverse.go       # \u5305\u6e90\u7801\n\n\n# \u521b\u5efa\u76ee\u5f55\nmkdir $GOPATH/src/github.com/user/hello\n\n# \u7528 go build \u547d\u4ee4\u6765\u6d4b\u8bd5\u8be5\u5305\n# \u5b83\u4f1a\u5c06\u5305\u7684\u5bf9\u8c61\u653e\u5230\u5de5\u4f5c\u7a7a\u95f4\u7684 pkg \u76ee\u5f55\u4e2d\n# \u8fd9\u4e0d\u4f1a\u4ea7\u751f\u8f93\u51fa\u6587\u4ef6\u3002\u60f3\u8981\u8f93\u51fa\u7684\u8bdd\uff0c\u5fc5\u987b\u4f7f\u7528 go install \u547d\u4ee4\ngo build github.com/user/stringutil\n# \u82e5\u4f60\u5728\u8be5\u5305\u7684\u6e90\u7801\u76ee\u5f55\u4e2d\uff0c\u53ea\u9700\u6267\u884c\ngo build\n\n# \u7528 go \u5de5\u5177\u6784\u5efa\u5e76\u5b89\u88c5\u6b64\u7a0b\u5e8f\n# \u6b64\u547d\u4ee4\u4f1a\u6784\u5efa hello \u547d\u4ee4\uff0c\u4ea7\u751f\u4e00\u4e2a\u53ef\u6267\u884c\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n# \u63a5\u7740\u5b83\u4f1a\u5c06\u8be5\u4e8c\u8fdb\u5236\u6587\u4ef6\u4f5c\u4e3a hello\uff08\u5728 Windows \u4e0b\u5219\u4e3a hello.exe\uff09\u5b89\u88c5\u5230\u5de5\u4f5c\u7a7a\u95f4\u7684 bin \u76ee\u5f55\u4e2d\u3002\n# go \u5de5\u5177\u53ea\u6709\u5728\u53d1\u751f\u9519\u8bef\u65f6\u624d\u4f1a\u6253\u5370\u8f93\u51fa\ngo install github.com/user/hello\n# \u6216\u8005\ncd $GOPATH/src/github.com/user/hello\ngo install\n\n# \u73b0\u5728\uff0c\u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e0b\u8f93\u5165\u5b83\u7684\u5b8c\u6574\u8def\u5f84\u6765\u8fd0\u884c\u5b83\u4e86\uff1a\n$GOPATH/bin/hello\n# \u82e5\u4f60\u5df2\u7ecf\u5c06 $GOPATH/bin \u6dfb\u52a0\u5230 PATH \u4e2d\u4e86\nhello\n```\n\n```sh\nbin/\n    hello                          # command executable\n    outyet                         # command executable\nsrc/\n    github.com/golang/example/\n        .git/                      # Git repository metadata\n  hello/\n      hello.go               # command source\n  outyet/\n      main.go                # command source\n      main_test.go           # test source\n  stringutil/\n      reverse.go             # package source\n      reverse_test.go        # test source\n    golang.org/x/image/\n        .git/                      # Git repository metadata\n  bmp/\n      reader.go              # package source\n      writer.go              # package source\n    ... (many more repositories and packages omitted) ...\n```\n'},Lnjv:function(n,t,e){"use strict";function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}e.r(t),e.d(t,"default",(function(){return en}));var i=e("eijD"),a=e("mXGw"),s=e.n(a),o=e("9eUF"),l=e("vnmu"),c=e("Fi4H"),u=e.n(c),f=e("HCZ3"),m=["bsPrefix","className","noGutters","as"],d=["xl","lg","md","sm","xs"],p=s.a.forwardRef((function(n,t){var e=n.bsPrefix,r=n.className,i=n.noGutters,a=n.as,c=void 0===a?"div":a,p=Object(l.a)(n,m),g=Object(f.a)(e,"row"),h=g+"-cols",b=[];return d.forEach((function(n){var t,e=p[n];delete p[n];var r="xs"!==n?"-"+n:"";null!=(t=null!=e&&"object"===typeof e?e.cols:e)&&b.push(""+h+r+"-"+t)})),s.a.createElement(c,Object(o.a)({ref:t},p,{className:u.a.apply(void 0,[r,g,i&&"no-gutters"].concat(b))}))}));p.displayName="Row",p.defaultProps={noGutters:!1};var g=p,h=["bsPrefix","className","as"],b=["xl","lg","md","sm","xs"],y=s.a.forwardRef((function(n,t){var e=n.bsPrefix,r=n.className,i=n.as,a=void 0===i?"div":i,c=Object(l.a)(n,h),m=Object(f.a)(e,"col"),d=[],p=[];return b.forEach((function(n){var t,e,r,i=c[n];if(delete c[n],"object"===typeof i&&null!=i){var a=i.span;t=void 0===a||a,e=i.offset,r=i.order}else t=i;var s="xs"!==n?"-"+n:"";t&&d.push(!0===t?""+m+s:""+m+s+"-"+t),null!=r&&p.push("order"+s+"-"+r),null!=e&&p.push("offset"+s+"-"+e)})),d.length||d.push(m),s.a.createElement(a,Object(o.a)({},c,{ref:t,className:u.a.apply(void 0,[r].concat(d,p))}))}));y.displayName="Col";var v=y,x=["bsPrefix","className"],_=s.a.forwardRef((function(n,t){var e=n.bsPrefix,r=n.className,i=Object(l.a)(n,x),a=Object(f.a)(e,"btn-toolbar");return s.a.createElement("div",Object(o.a)({},i,{ref:t,className:u()(r,a)}))}));_.displayName="ButtonToolbar",_.defaultProps={role:"toolbar"};var w=_,S=e("+Ltg"),k=e.n(S),T=e("0ZwX"),P=e("dgsG");var E=["bsPrefix","size","toggle","vertical","className","as"],C=s.a.forwardRef((function(n,t){var e=n.bsPrefix,r=n.size,i=n.toggle,a=n.vertical,c=n.className,m=n.as,d=void 0===m?"div":m,p=Object(l.a)(n,E),g=Object(f.a)(e,"btn-group"),h=g;return a&&(h=g+"-vertical"),s.a.createElement(d,Object(o.a)({},p,{ref:t,className:u()(c,h,r&&g+"-"+r,i&&g+"-toggle")}))}));C.displayName="ButtonGroup",C.defaultProps={vertical:!1,toggle:!1,role:"group"};var R=C,A=e("LToT"),N=["bsPrefix","variant","size","active","className","block","type","as"],M=s.a.forwardRef((function(n,t){var e=n.bsPrefix,r=n.variant,i=n.size,a=n.active,c=n.className,m=n.block,d=n.type,p=n.as,g=Object(l.a)(n,N),h=Object(f.a)(e,"btn"),b=u()(c,h,a&&"active",r&&h+"-"+r,m&&h+"-block",i&&h+"-"+i);if(g.href)return s.a.createElement(A.a,Object(o.a)({},g,{as:p,ref:t,className:u()(b,g.disabled&&"disabled")}));t&&(g.ref=t),d?g.type=d:p||(g.type="button");var y=p||"button";return s.a.createElement(y,Object(o.a)({},g,{className:b}))}));M.displayName="Button",M.defaultProps={variant:"primary",active:!1,disabled:!1};var j=M,D=["children","name","className","checked","type","onChange","value","disabled","inputRef"],O=function(){},L=s.a.forwardRef((function(n,t){var e=n.children,r=n.name,i=n.className,c=n.checked,f=n.type,m=n.onChange,d=n.value,p=n.disabled,g=n.inputRef,h=Object(l.a)(n,D),b=Object(a.useState)(!1),y=b[0],v=b[1],x=Object(a.useCallback)((function(n){"INPUT"===n.target.tagName&&v(!0)}),[]),_=Object(a.useCallback)((function(n){"INPUT"===n.target.tagName&&v(!1)}),[]);return s.a.createElement(j,Object(o.a)({},h,{ref:t,className:u()(i,y&&"focus",p&&"disabled"),type:void 0,active:!!c,as:"label"}),s.a.createElement("input",{name:r,type:f,value:d,ref:g,autoComplete:"off",checked:!!c,disabled:!!p,onFocus:x,onBlur:_,onChange:m||O}),e)}));L.displayName="ToggleButton";var I=L,F=["children","type","name","value","onChange"],B=s.a.forwardRef((function(n,t){var e=Object(T.a)(n,{value:"onChange"}),r=e.children,i=e.type,a=e.name,c=e.value,u=e.onChange,f=Object(l.a)(e,F),m=function(){return null==c?[]:[].concat(c)};return"radio"!==i||a||k()(!1),s.a.createElement(R,Object(o.a)({},f,{ref:t,toggle:!0}),function(n,t){var e=0;return s.a.Children.map(n,(function(n){return s.a.isValidElement(n)?t(n,e++):n}))}(r,(function(n){var t=m(),e=n.props,r=e.value,o=e.onChange;return s.a.cloneElement(n,{type:i,name:n.name||a,checked:-1!==t.indexOf(r),onChange:Object(P.a)(o,(function(n){return function(n,t){if(u){var e=m(),r=-1!==e.indexOf(n);"radio"!==i?u(r?e.filter((function(t){return t!==n})):[].concat(e,[n]),t):!r&&u&&u(n,t)}}(r,n)}))})})))}));B.defaultProps={type:"radio",vertical:!1},B.Button=I;var H=B,q=e("skzL"),G=Object(q.a)("card-group"),U=e("7oXz"),W=e("hmKD"),V=e.n(W),z=e("9fEB"),X=e.n(z),$=e("Jewm"),J=e("5Yp1"),Y=e("oTOh"),K=function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],r=null;return e.forEach((function(e){r=e.fullPath===t||"/comparison-note"+e.fullPath===t||e.fullPath+"/"===t||"/comparison-note"+e.fullPath+"/"===t||e.asPath===t||"/comparison-note"+e.asPath===t||e.asPath+"/"===t||"/comparison-note"+e.asPath+"/"===t?e:n(t,e.nodes)||r})),r},Q=s.a.createElement;function Z(){Z=function(){return n};var n={},t=Object.prototype,e=t.hasOwnProperty,r=Object.defineProperty||function(n,t,e){n[t]=e.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",o=i.toStringTag||"@@toStringTag";function l(n,t,e){return Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}),n[t]}try{l({},"")}catch(C){l=function(n,t,e){return n[t]=e}}function c(n,t,e,i){var a=t&&t.prototype instanceof m?t:m,s=Object.create(a.prototype),o=new T(i||[]);return r(s,"_invoke",{value:_(n,e,o)}),s}function u(n,t,e){try{return{type:"normal",arg:n.call(t,e)}}catch(C){return{type:"throw",arg:C}}}n.wrap=c;var f={};function m(){}function d(){}function p(){}var g={};l(g,a,(function(){return this}));var h=Object.getPrototypeOf,b=h&&h(h(P([])));b&&b!==t&&e.call(b,a)&&(g=b);var y=p.prototype=m.prototype=Object.create(g);function v(n){["next","throw","return"].forEach((function(t){l(n,t,(function(n){return this._invoke(t,n)}))}))}function x(n,t){var i;r(this,"_invoke",{value:function(r,a){function s(){return new t((function(i,s){!function r(i,a,s,o){var l=u(n[i],n,a);if("throw"!==l.type){var c=l.arg,f=c.value;return f&&"object"==typeof f&&e.call(f,"__await")?t.resolve(f.__await).then((function(n){r("next",n,s,o)}),(function(n){r("throw",n,s,o)})):t.resolve(f).then((function(n){c.value=n,s(c)}),(function(n){return r("throw",n,s,o)}))}o(l.arg)}(r,a,i,s)}))}return i=i?i.then(s,s):s()}})}function _(n,t,e){var r="suspendedStart";return function(i,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw a;return E()}for(e.method=i,e.arg=a;;){var s=e.delegate;if(s){var o=w(s,e);if(o){if(o===f)continue;return o}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var l=u(n,t,e);if("normal"===l.type){if(r=e.done?"completed":"suspendedYield",l.arg===f)continue;return{value:l.arg,done:e.done}}"throw"===l.type&&(r="completed",e.method="throw",e.arg=l.arg)}}}function w(n,t){var e=t.method,r=n.iterator[e];if(void 0===r)return t.delegate=null,"throw"===e&&n.iterator.return&&(t.method="return",t.arg=void 0,w(n,t),"throw"===t.method)||"return"!==e&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+e+"' method")),f;var i=u(r,n.iterator,t.arg);if("throw"===i.type)return t.method="throw",t.arg=i.arg,t.delegate=null,f;var a=i.arg;return a?a.done?(t[n.resultName]=a.value,t.next=n.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function S(n){var t={tryLoc:n[0]};1 in n&&(t.catchLoc=n[1]),2 in n&&(t.finallyLoc=n[2],t.afterLoc=n[3]),this.tryEntries.push(t)}function k(n){var t=n.completion||{};t.type="normal",delete t.arg,n.completion=t}function T(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(S,this),this.reset(!0)}function P(n){if(n){var t=n[a];if(t)return t.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function t(){for(;++r<n.length;)if(e.call(n,r))return t.value=n[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:E}}function E(){return{value:void 0,done:!0}}return d.prototype=p,r(y,"constructor",{value:p,configurable:!0}),r(p,"constructor",{value:d,configurable:!0}),d.displayName=l(p,o,"GeneratorFunction"),n.isGeneratorFunction=function(n){var t="function"==typeof n&&n.constructor;return!!t&&(t===d||"GeneratorFunction"===(t.displayName||t.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,p):(n.__proto__=p,l(n,o,"GeneratorFunction")),n.prototype=Object.create(y),n},n.awrap=function(n){return{__await:n}},v(x.prototype),l(x.prototype,s,(function(){return this})),n.AsyncIterator=x,n.async=function(t,e,r,i,a){void 0===a&&(a=Promise);var s=new x(c(t,e,r,i),a);return n.isGeneratorFunction(e)?s:s.next().then((function(n){return n.done?n.value:s.next()}))},v(y),l(y,o,"Generator"),l(y,a,(function(){return this})),l(y,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var t=Object(n),e=[];for(var r in t)e.push(r);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},n.values=P,T.prototype={constructor:T,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!n)for(var t in this)"t"===t.charAt(0)&&e.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var t=this;function r(e,r){return s.type="throw",s.arg=n,t.next=e,r&&(t.method="next",t.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var o=e.call(a,"catchLoc"),l=e.call(a,"finallyLoc");if(o&&l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(o){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(n,t){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&e.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var s=a?a.completion:{};return s.type=n,s.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(s)},complete:function(n,t){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&t&&(this.next=t),f},finish:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.finallyLoc===n)return this.complete(e.completion,e.afterLoc),k(e),f}},catch:function(n){for(var t=this.tryEntries.length-1;t>=0;--t){var e=this.tryEntries[t];if(e.tryLoc===n){var r=e.completion;if("throw"===r.type){var i=r.arg;k(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(n,t,e){return this.delegate={iterator:P(n),resultName:t,nextLoc:e},"next"===this.method&&(this.arg=void 0),f}},n}function nn(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function tn(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?nn(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):nn(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function en(n){var t=n.nav,e=n.content,r=n.cards,i=void 0===r?[]:r,s=Object(a.useState)([]),o=s[0],l=s[1];Object(a.useEffect)((function(){l(i.map((function(n){return n.baseName})))}),[i]);return Q(J.a,null,Q(X.a,null,Q("title",null,t&&(t.readme.title||t.name)||"\u5bf9\u6bd4\u5b66\u4e60\u7b14\u8bb0")),Q("h1",null,t&&(t.readme.title||t.name)),Q("div",{style:{marginBottom:12}},Q($.a,{source:e})),i.length>0&&Q(g,{className:"justify-content-md-center",style:{marginBottom:12}},Q(v,{md:"auto"},Q(w,null,Q(H,{size:"sm",type:"checkbox",value:o,onChange:function(n){l(n)}},i.map((function(n){return Q(I,{key:n.name,variant:"secondary",value:n.baseName},n.baseName)})))))),i.length>0&&Q(G,null,i.filter((function(n){return o.includes(n.baseName)})).map((function(n){return Q(U.a,{key:n.name},Q(U.a.Header,null,n.baseName),Q(U.a.Body,null,Q($.a,{source:n.content})))}))),t&&t.nodes.length>0&&Q(U.a,{style:{marginTop:12}},Q(U.a.Body,null,Q("h6",null,"\u4e86\u89e3\u66f4\u591a"),Q(Y.a,{navs:t.nodes}))))}en.getInitialProps=function(){var n=Object(i.a)(Z().mark((function n(t){var r,i,a,s,o;return Z().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(r=e("VqNe"),i=K(t.asPath,r),a="",s=[],i){try{o=e("oXu5")("./notes".concat(i.readme.fullPath)),a=V()(o.default).content}catch(l){console.log("\u5bfc\u5165\u9875\u9762\u5931\u8d25\uff01")}i.cards.forEach((function(n){var t="";try{var r=e("oXu5")("./notes".concat(n.fullPath));t=V()(r.default).content}catch(l){console.log("\u5bfc\u5165\u7b14\u8bb0\u5931\u8d25\uff01")}s.push(tn(tn({},n),{},{content:t}))}))}return n.abrupt("return",{nav:i,content:a,cards:s});case 6:case"end":return n.stop()}}),n)})));return function(t){return n.apply(this,arguments)}}()},LuZj:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// MergeSort \u5f52\u5e76\u6392\u5e8f\nfunc MergeSort(arr []int) []int {\n\treturn mergeSort(arr)\n}\n\n// mergeSort \u8fed\u4ee3\u51fd\u6570\nfunc mergeSort(arr []int) []int {\n\tif len(arr) <= 1 { // \u4e00\u4e2a\u6216\u96f6\u4e2a\u5143\u7d20\uff0c\u76f4\u63a5\u8fd4\u56de\n\t\treturn arr\n\t}\n\tmid := len(arr) / 2           // \u4e2d\u95f4\u5206\u4e3a\u4e24\u6bb5\n\tleft := mergeSort(arr[:mid])  // \u9012\u5f52\uff0c\u5bf9\u5de6\u6bb5\u6392\u5e8f\n\tright := mergeSort(arr[mid:]) // \u9012\u5f52\uff0c\u5bf9\u53f3\u6bb5\u6392\u5e8f\n\tresult := merge(left, right)  // \u5408\u5e76\u5de6\u6bb5\u548c\u53f3\u6bb5\n\treturn result\n}\n\n// merge \u5408\u5e76\u4e24\u8fb9\u7684\u6570\u7ec4\nfunc merge(left, right []int) []int {\n\tvar result []int\n\tl, r := 0, 0\n\tfor l < len(left) && r < len(right) {\n\t\tif left[l] > right[r] {\n\t\t\tresult = append(result, right[r])\n\t\t\tr++\n\t\t} else {\n\t\t\tresult = append(result, left[l])\n\t\t\tl++\n\t\t}\n\t}\n\t// \u5269\u4f59\u90e8\u5206\u5408\u5e76\n\tresult = append(result, left[l:]...)\n\tresult = append(result, right[r:]...)\n\treturn result\n}\n\nfunc main() {\n\ta := []int{3, 6, 7, 4, 5, 1, 2}\n\tfmt.Println(MergeSort(a))\n}\n```'},Lvc6:function(n,t,e){"use strict";e.r(t),t.default="```dart\n// helloword.dart\nvoid main() {\n  print('Hello, World!');\n}\n```\n\n```sh\ndart run helloword.dart\n```\n"},MMiR:function(n,t,e){"use strict";e.r(t),t.default='`#include`\u6700\u5e38\u89c1\u7684\u7528\u9014\uff0c\u5c31\u662f\u7528\u6765\u52a0\u8f7d\u5305\u542b\u51fd\u6570\u539f\u578b\u7684\u5934\u6587\u4ef6\uff08\u540e\u7f00\u540d\u4e3a`.h`\uff09\n\n```c++\n// \u5f62\u5f0f\u4e00\n#include <foo.h> // \u52a0\u8f7d\u7cfb\u7edf\u63d0\u4f9b\u7684\u6587\u4ef6\n\n// \u5f62\u5f0f\u4e8c\n#include "foo.h" // \u52a0\u8f7d\u7528\u6237\u63d0\u4f9b\u7684\u6587\u4ef6\n#include "/usr/local/lib/foo.h"\n```\n\n```sh\n# GCC \u7f16\u8bd1\u5668\u7684-I\u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u6307\u5b9ainclude\u547d\u4ee4\u4e2d\u7528\u6237\u6587\u4ef6\u7684\u52a0\u8f7d\u8def\u5f84\u3002\ngcc -Iinclude/ -o code code.c\n```\n'},MScn:function(n,t,e){"use strict";e.r(t),t.default='```sh\nsound/                          Top-level package\n      __init__.py               Initialize the sound package\n      formats/                  Subpackage for file format conversions\n              __init__.py\n              wavread.py\n              wavwrite.py\n              aiffread.py\n              aiffwrite.py\n              auread.py\n              auwrite.py\n              ...\n      effects/                  Subpackage for sound effects\n              __init__.py\n              echo.py\n              surround.py\n              reverse.py\n              ...\n      filters/                  Subpackage for filters\n              __init__.py\n              equalizer.py\n              vocoder.py\n              karaoke.py\n              ...\n```\n\n```python\n# \u5305\u7684\u7528\u6237\u53ef\u4ee5\u4ece\u5305\u4e2d\u5bfc\u5165\u5355\u4e2a\u6a21\u5757\uff0c\u4f8b\u5982:\nimport sound.effects.echo\nsound.effects.echo.echofilter(input, output, delay=0.7, atten=4)\n\n# \u5bfc\u5165\u5b50\u6a21\u5757\u7684\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\nfrom sound.effects import echo\necho.echofilter(input, output, delay=0.7, atten=4)\n\n# \u53e6\u4e00\u79cd\u5f62\u5f0f\u662f\u76f4\u63a5\u5bfc\u5165\u6240\u9700\u7684\u51fd\u6570\u6216\u53d8\u91cf:\nfrom sound.effects.echo import echofilter\nechofilter(input, output, delay=0.7, atten=4)\n\n# \u6587\u4ef6 sound/effects/__init__.py \u53ef\u4ee5\u5305\u542b\u4ee5\u4e0b\u4ee3\u7801:\n__all__ = ["echo", "surround", "reverse"]\n# \u5f53\u7528\u6237\u5199\nfrom sound.effects import *\n# \u610f\u5473\u7740 from sound.effects import * \u5c06\u5bfc\u5165 sound \u5305\u7684\u4e09\u4e2a\u547d\u540d\u5b50\u6a21\u5757\n```\n'},MUUJ:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u94fe\u8868\n---\n"},MWkC:function(n,t,e){"use strict";e.r(t),t.default="```go\nfunc lengthOfLongestSubstring(s string) int {\n    max := 0\n    for len(s) > max {\n        n := 0\n        m := make(map[string]bool)\n        for _,str := range s {\n            if _,ok := m[string(str)]; ok {\n                break\n            }\n            m[string(str)] = true\n            n++\n        }\n        if n > max {\n            max = n\n        }\n        s = s[1:]\n    }\n    return max\n}\n```\n\n```go\nfunc lengthOfLongestSubstring(s string) int {\n    i,j,p := 0,0,0\n    for j < len(s) {\n        index := strings.LastIndex(s[i:j],string(s[j]))\n        if  index != -1 { // \u53d1\u73b0\u91cd\u590d\n            tp := index+1+j\n            if p < tp {\n                p = tp\n            }\n            i++\n            j++\n        } else if j < p { // \u65e0\u91cd\u590d\uff0c\u4f46\u662f j-i \u6bd4\u4e4b\u524d\u5c0f\uff0c\u7ee7\u7eed\u53f3\u79fb\n            i++\n            j++\n        } else {\n            j++\n        }\n    }\n    return j-i\n}\n```\n\n```go\nfunc lengthOfLongestSubstring(s string) int {\n    i,j,p := 0,0,0\n    for p < len(s) {\n        index := strings.LastIndex(s[i:p],string(s[p]))\n        if  index != -1 {\n            i+=index+1\n            j+=index+1\n        } else if p > j-1 {\n            j++\n        }\n        p++\n    }\n    return j-i\n}\n```\n"},MZ2i:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u7ed3\u6784\u4f53\n---\n"},MlVM:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6570\u636e\u7c7b\u578b\u8f6c\u6362\n---\n"},N5R5:function(n,t,e){"use strict";e.r(t),t.default="```js\nMath.E; // 2.718281828459045\nMath.LN2; // 0.6931471805599453\nMath.LN10; // 2.302585092994046\nMath.LOG2E; // 1.4426950408889634\nMath.LOG10E; // 0.4342944819032518\nMath.PI; // 3.141592653589793\nMath.SQRT1_2; // 0.7071067811865476\nMath.SQRT2; // 1.4142135623730951\n```\n"},NJ3u:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\nimport (\n  "fmt"\n)\nfunc fibonacci(n int, c chan int) {\n  x, y := 1, 1\n  for i := 0; i < n; i++ {\n    c <- x\n    x, y = y, x + y\n  }\n  close(c)\n}\nfunc main() {\n  c := make(chan int, 10)\n  go fibonacci(cap(c), c)\n  for i := range c {\n    fmt.Println(i)\n  }\n}\n```\n'},NUA5:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5b57\u7b26\u4e32\n---\n"},NnrR:function(n,t,e){"use strict";e.r(t),t.default='```python\n# 2 is in the string\nif "2" in "123":\n    print("2 is in the string")\n\n# 2 is not in the string\nif "2" not in "456":\n    print("2 is not in the string")\n\n\nimport re\n\n# Has a number\nif re.search(r"\\d", "iphone 8"):\n    print("Has a number")\n\n# Doesn\'t have a number\nif not re.search(r"\\d", "iphone x"):\n    print("Doesn\'t have a number")\n```\n'},OCeU:function(n,t,e){"use strict";e.r(t),t.default="```dart\n// as \u7c7b\u578b\u8f6c\u6362\n// is \u5982\u679c\u5bf9\u8c61\u662f\u6307\u5b9a\u7684\u7c7b\u578b\u8fd4\u56de True\n// is! \u5982\u679c\u5bf9\u8c61\u662f\u6307\u5b9a\u7684\u7c7b\u578b\u8fd4\u56de False\n\nif (emp is Person) { // Type check\n  emp.firstName = 'Bob';\n}\n// \u4f7f\u7528 as \u64cd\u4f5c\u7b26\u53ef\u4ee5\u7b80\u5316\u4e0a\u9762\u7684\u4ee3\u7801\uff1a\n(emp as Person).firstName = 'Bob';\n\n// \u53ef\u4ee5\u4f7f\u7528 Object \u7684 runtimeType \u5c5e\u6027\u6765\u5224\u65ad\u5b9e\u4f8b \u7684\u7c7b\u578b\uff0c\n// \u8be5\u5c5e\u6027 \u8fd4\u56de\u4e00\u4e2a Type \u5bf9\u8c61\u3002\nvar msg = 'false';\nprint('The type of a is ${msg.runtimeType}');\n\n// \u5176\u4ed6\u65b9\u5f0f\nimport 'dart:mirrors';\ngetTypeName(dynamic obj) {\n  return reflect(obj).type.reflectedType.toString();\n}\n```\n"},OP4y:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6570\u503c\n---"},OR97:function(n,t,e){"use strict";e.r(t),t.default='\u8fed\u4ee3\u5668\uff08iterator\uff09\u8d1f\u8d23\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u548c\u51b3\u5b9a\u5e8f\u5217\u4f55\u65f6\u7ed3\u675f\u7684\u903b\u8f91\u3002\u5f53\u4f7f\u7528\u8fed\u4ee3\u5668\u65f6\uff0c\u6211\u4eec\u65e0\u9700\u91cd\u65b0\u5b9e\u73b0\u8fd9\u4e9b\u903b\u8f91\u3002\n\n\u5728 Rust \u4e2d\uff0c\u8fed\u4ee3\u5668\u662f \u60f0\u6027\u7684\uff08lazy\uff09\uff0c\u8fd9\u610f\u5473\u7740\u5728\u8c03\u7528\u65b9\u6cd5\u4f7f\u7528\u8fed\u4ee3\u5668\u4e4b\u524d\u5b83\u90fd\u4e0d\u4f1a\u6709\u6548\u679c\u3002\n\n```rust\nlet v1 = vec![1, 2, 3];\nlet v1_iter = v1.iter(); // \u521b\u5efa\u8fed\u4ee3\u5668\nfor val in v1_iter {\n    println!("Got: {}", val);\n}\n```\n\n\u8fed\u4ee3\u5668\u90fd\u5b9e\u73b0\u4e86\u4e00\u4e2a\u53eb\u505a Iterator \u7684\u5b9a\u4e49\u4e8e\u6807\u51c6\u5e93\u7684 trait\n\n```rust\npub trait Iterator {\n    type Item; // \u5b9a\u4e49\u4e86 trait \u7684 \u5173\u8054\u7c7b\u578b\uff08associated type\uff09\n    fn next(&mut self) -> Option<Self::Item>;\n    // \u6b64\u5904\u7701\u7565\u4e86\u65b9\u6cd5\u7684\u9ed8\u8ba4\u5b9e\u73b0\n}\n```\n\n- `iter` \u65b9\u6cd5\u751f\u6210\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u8fed\u4ee3\u5668\u3002\n- \u5982\u679c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u83b7\u53d6\u6240\u6709\u6743\u5e76\u8fd4\u56de\u62e5\u6709\u6240\u6709\u6743\u7684\u8fed\u4ee3\u5668\uff0c\u5219\u53ef\u4ee5\u8c03\u7528 `into_iter` \u800c\u4e0d\u662f iter\u3002\n- \u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u6211\u4eec\u5e0c\u671b\u8fed\u4ee3\u53ef\u53d8\u5f15\u7528\uff0c\u5219\u53ef\u4ee5\u8c03\u7528 `iter_mut` \u800c\u4e0d\u662f iter\n\n```rust\nfn iterator_demonstration() {\n    let v1 = vec![1, 2, 3];\n    // \u6ce8\u610f v1_iter \u9700\u8981\u662f\u53ef\u53d8\u7684\n    // \u4f7f\u7528 for \u5faa\u73af\u65f6\u65e0\u9700\u4f7f v1_iter \u53ef\u53d8\n    // \u56e0\u4e3a for \u5faa\u73af\u4f1a\u83b7\u53d6 v1_iter \u7684\u6240\u6709\u6743\u5e76\u5728\u540e\u53f0\u4f7f v1_iter \u53ef\u53d8\u3002\n    let mut v1_iter = v1.iter();\n    // \u8c03\u7528\u8fed\u4ee3\u5668\u7684 next \u65b9\u6cd5\n    assert_eq!(v1_iter.next(), Some(&1));\n    assert_eq!(v1_iter.next(), Some(&2));\n    assert_eq!(v1_iter.next(), Some(&3));\n    assert_eq!(v1_iter.next(), None);\n}\n```\n\n## \u6d88\u8d39\u8fed\u4ee3\u5668\n\n```rust\nfn iterator_sum() {\n    let v1 = vec![1, 2, 3];\n    let v1_iter = v1.iter();\n    // next \u65b9\u6cd5\u7684\u65b9\u6cd5\u88ab\u79f0\u4e3a \u6d88\u8d39\u9002\u914d\u5668\uff08consuming adaptors\uff09\n    // sum \u65b9\u6cd5\u4e5f\u662f\n    let total: i32 = v1_iter.sum();\n    assert_eq!(total, 6);\n}\n```\n\n## \u4ea7\u751f\u5176\u4ed6\u8fed\u4ee3\u5668\n\nIterator trait \u4e2d\u5b9a\u4e49\u4e86\u53e6\u4e00\u7c7b\u65b9\u6cd5\uff0c\u88ab\u79f0\u4e3a \u8fed\u4ee3\u5668\u9002\u914d\u5668\uff08iterator adaptors\uff09\n\n```rust\nlet v1: Vec<i32> = vec![1, 2, 3];\n// \u8c03\u7528 map \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u65b0\u8fed\u4ee3\u5668\uff0c\n// \u63a5\u7740\u8c03\u7528 collect \u65b9\u6cd5\u6d88\u8d39\u65b0\u8fed\u4ee3\u5668\u5e76\u521b\u5efa\u4e00\u4e2a vector\nlet v2: Vec<_> = v1.iter().map(|x| x + 1).collect();\nassert_eq!(v2, vec![2, 3, 4]);\n```\n\n## \u4f7f\u7528\u95ed\u5305\n\n```rust\n#[derive(PartialEq, Debug)]\nstruct Shoe {\n    size: u32,\n    style: String,\n}\n\nfn shoes_in_my_size(shoes: Vec<Shoe>, shoe_size: u32) -> Vec<Shoe> {\n    shoes.into_iter()\n        .filter(|s| s.size == shoe_size)\n        .collect()\n}\n\n#[test]\nfn filters_by_size() {\n    let shoes = vec![\n        Shoe { size: 10, style: String::from("sneaker") },\n        Shoe { size: 13, style: String::from("sandal") },\n        Shoe { size: 10, style: String::from("boot") },\n    ];\n    let in_my_size = shoes_in_my_size(shoes, 10);\n    assert_eq!(\n        in_my_size,\n        vec![\n            Shoe { size: 10, style: String::from("sneaker") },\n            Shoe { size: 10, style: String::from("boot") },\n        ]\n    );\n}\n```\n\n## \u81ea\u5b9a\u4e49\u8fed\u4ee3\u5668\n\n```rust\nstruct Counter {\n    count: u32,\n}\n\nimpl Counter {\n    fn new() -> Counter {\n        Counter { count: 0 }\n    }\n}\n\nimpl Iterator for Counter {\n    type Item = u32;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        self.count += 1;\n\n        if self.count < 6 {\n            Some(self.count)\n        } else {\n            None\n        }\n    }\n}\n\n#[test]\nfn calling_next_directly() {\n    let mut counter = Counter::new();\n\n    assert_eq!(counter.next(), Some(1));\n    assert_eq!(counter.next(), Some(2));\n    assert_eq!(counter.next(), Some(3));\n    assert_eq!(counter.next(), Some(4));\n    assert_eq!(counter.next(), Some(5));\n    assert_eq!(counter.next(), None);\n}\n\n#[test]\nfn using_other_iterator_trait_methods() {\n    let sum: u32 = Counter::new()\n        .zip(Counter::new().skip(1))\n        .map(|(a, b)| a * b)\n        .filter(|x| x % 3 == 0)\n        .sum();\n    assert_eq!(18, sum);\n}\n```\n'},ORbA:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u7d20\u6570\u7b5b\n---\n"},"P/gy":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u539f\u5b50\u8ba1\u6570\u5668\n---\n"},PT4Q:function(n,t,e){"use strict";e.r(t),t.default='```sh\n%d          \u5341\u8fdb\u5236\u6574\u6570\n%x, %o, %b  \u5341\u516d\u8fdb\u5236\uff0c\u516b\u8fdb\u5236\uff0c\u4e8c\u8fdb\u5236\u6574\u6570\u3002\n%f, %g, %e  \u6d6e\u70b9\u6570\uff1a 3.141593 3.141592653589793 3.141593e+00\n%t          \u5e03\u5c14\uff1atrue\u6216false\n%c          \u5b57\u7b26\uff08rune\uff09 (Unicode\u7801\u70b9)\n%s          \u5b57\u7b26\u4e32\n%q          \u5e26\u53cc\u5f15\u53f7\u7684\u5b57\u7b26\u4e32"abc"\u6216\u5e26\u5355\u5f15\u53f7\u7684\u5b57\u7b26\'c\'\n%v          \u53d8\u91cf\u7684\u81ea\u7136\u5f62\u5f0f\uff08natural format\uff09\n%T          \u53d8\u91cf\u7684\u7c7b\u578b\n%%          \u5b57\u9762\u4e0a\u7684\u767e\u5206\u53f7\u6807\u5fd7\uff08\u65e0\u64cd\u4f5c\u6570\uff09\n```\n\n```go\nfmt.Printf("%d\\t%s\\n", n, line)\n```\n'},PfvS:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u8bed\u8a00\u4ea4\u4e92\u63a5\u53e3\n---\n"},Pk6V:function(n,t,e){"use strict";e.r(t),t.default="## pass\n\n```python\nwhile True:\n    pass  # Busy-wait for keyboard interrupt (Ctrl+C)\n\nclass MyEmptyClass:\n    pass\n\ndef initlog(*args):\n    pass   # Remember to implement this!\n```\n"},Q1U3:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n    "fmt"\n    "sync"\n    "sync/atomic"\n)\n\nfunc main() {\n    var ops uint64\n    var wg sync.WaitGroup\n    for i := 0; i < 50; i++ {\n        wg.Add(1)\n        go func() {\n            for c := 0; c < 1000; c++ {\n\n                atomic.AddUint64(&ops, 1)\n            }\n            wg.Done()\n        }()\n    }\n    wg.Wait()\n    fmt.Println("ops:", ops)\n}\n```\n'},Q2He:function(n,t,e){"use strict";e.r(t),t.default="```go\n// \u524d\u7f00\nfunc HasPrefix(s, prefix string) bool {\n    return len(s) >= len(prefix) && s[:len(prefix)] == prefix\n}\n\n// \u540e\u7f00\nfunc HasSuffix(s, suffix string) bool {\n    return len(s) >= len(suffix) && s[len(s)-len(suffix):] == suffix\n}\n\n// \u5b50\u4e32\nfunc Contains(s, substr string) bool {\n    for i := 0; i < len(s); i++ {\n        if HasPrefix(s[i:], substr) {\n            return true\n        }\n    }\n    return false\n}\n```\n"},QHtX:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u51fd\u6570\u5f0f\u7f16\u7a0b\n---\n"},QKjh:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6587\u672c\u6a21\u677f\n---"},"QM/n":function(n,t,e){"use strict";e.r(t),t.default="```python\noriginal_list = [1, 2, 3]\nnew_list = original_list[:]  # or original_list.copy()\noriginal_list[2] = 4\n# 1\n# 2\n# 3\nfor x in new_list:\n    print(x)\n```\n\n```sh\n>>> squares = [1, 4, 9, 16, 25]\n>>> squares\n[1, 4, 9, 16, 25]\n\n# \u5217\u8868\u4e5f\u652f\u6301\u7d22\u5f15\u548c\u5207\u7247:\n>>> squares[0]  # indexing returns the item\n1\n>>> squares[-1]\n25\n>>> squares[-3:]  # slicing returns a new list\n[9, 16, 25]\n\n# \u5207\u7247\u4f1a\u8fd4\u56de\u5217\u8868\u7684\u4e00\u4e2a\u65b0\u7684(\u6d45)\u62f7\u8d1d:\n>>> squares[:]\n[1, 4, 9, 16, 25]\n\n# del\u8bed\u53e5\n>>> a = [-1, 1, 66.25, 333, 333, 1234.5]\n>>> del a[0]\n>>> a\n[1, 66.25, 333, 333, 1234.5]\n>>> del a[2:4]\n>>> a\n[1, 66.25, 1234.5]\n>>> del a[:]\n>>> a\n[]\n\n# del \u4e5f\u53ef\u4ee5\u88ab\u7528\u6765\u5220\u9664\u6574\u4e2a\u53d8\u91cf\n>>> del a\n```\n"},QN69:function(n,t,e){"use strict";e.r(t),t.default="```python\nx = \"\"\"------\nLine 1\nLine 2\nLine 3\n------\"\"\"\n\nprint(\"\"\"\\\nUsage: thingy [OPTIONS]\n     -h                        Display this usage message\n     -H hostname               Hostname to connect to\n\"\"\")\n\ntext = ('Put several strings within parentheses '\n        'to have them joined together.')\n```\n\n```python\nsome_string = \"abcd\"\n# 4\nprint(len(some_string))\n\n'spam eggs'  # single quotes\n'doesn\\'t'  # use \\' to escape the single quote...\n\"doesn't\"  # ...or use double quotes instead\n'\"Yes,\" they said.'\n\"\\\"Yes,\\\" they said.\"\n'\"Isn\\'t,\" they said.'\n\nprint('C:\\some\\name')  # here \\n means newline!\nprint(r'C:\\some\\name')  # note the r before the quote\n\n# \u5b57\u7b26\u4e32\u53ef\u4ee5\u7528 + \u8fdb\u884c\u8fde\u63a5\uff08\u7c98\u5230\u4e00\u8d77\uff09\uff0c\u4e5f\u53ef\u4ee5\u7528 * \u8fdb\u884c\u91cd\u590d:\n# 3 times 'un', followed by 'ium'\n3 * 'un' + 'ium'\n\n# \u76f8\u90bb\u7684\u4e24\u4e2a\u6216\u591a\u4e2a \u5b57\u7b26\u4e32\u5b57\u9762\u503c \uff08\u5f15\u53f7\u5f15\u8d77\u6765\u7684\u5b57\u7b26\uff09\u5c06\u4f1a\u81ea\u52a8\u8fde\u63a5\u5230\u4e00\u8d77.\n'Py' 'thon'\n```\n\n```sh\n# \u5b57\u7b26\u4e32\u662f\u53ef\u4ee5\u88ab \u7d22\u5f15 \uff08\u4e0b\u6807\u8bbf\u95ee\uff09\u7684\uff0c\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7d22\u5f15\u662f 0\u3002\n>>> word = 'Python'\n>>> word[0]  # character in position 0\n'P'\n>>> word[5]  # character in position 5\n'n'\n\n# \u7d22\u5f15\u4e5f\u53ef\u4ee5\u7528\u8d1f\u6570\uff0c\u8fd9\u79cd\u4f1a\u4ece\u53f3\u8fb9\u5f00\u59cb\u6570:\n>>> word[-1]  # last character\n'n'\n>>> word[-2]  # second-last character\n'o'\n>>> word[-6]\n'P'\n\n# \u9664\u4e86\u7d22\u5f15\uff0c\u5b57\u7b26\u4e32\u8fd8\u652f\u6301 \u5207\u7247\u3002\n>>> word[0:2]  # characters from position 0 (included) to 2 (excluded)\n'Py'\n>>> word[2:5]  # characters from position 2 (included) to 5 (excluded)\n'tho'\n>>> word[:2] + word[2:]\n'Python'\n>>> word[:4] + word[4:]\n'Python'\n```\n\n```python\nprint(r'C:\\some\\name')  # note the r before the quote\n```\n"},QoEM:function(n,t,e){"use strict";e.r(t),t.default='## loop\n\n```rust\nfn main() {\n    let mut count = 0;\n    \'counting_up: loop {\n        println!("count = {}", count);\n        let mut remaining = 10;\n\n        loop {\n            println!("remaining = {}", remaining);\n            if remaining == 9 {\n                break;\n            }\n            if count == 2 {\n                break \'counting_up;\n            }\n            remaining -= 1;\n        }\n\n        count += 1;\n    }\n    println!("End count = {}", count);\n}\n```\n\n```rust\nfn main() {\n    let mut counter = 0;\n    let result = loop {\n        counter += 1;\n        if counter == 10 {\n            // \u4ece\u5faa\u73af\u8fd4\u56de\n            break counter * 2;\n        }\n    };\n    println!("The result is {}", result);\n}\n```\n\n## while\n\n```rust\nfn main() {\n    let mut number = 3;\n    while number != 0 {\n        println!("{}!", number);\n        number -= 1;\n    }\n    println!("LIFTOFF!!!");\n}\n```\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    let mut index = 0;\n    while index < 5 {\n        println!("the value is: {}", a[index]);\n        index += 1;\n    }\n}\n```\n\n## for\n\n```rust\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    for element in a {\n        println!("the value is: {}", element);\n    }\n}\n```\n\n```rust\nfn main() {\n    for number in (1..4).rev() {\n        println!("{}!", number);\n    }\n    println!("LIFTOFF!!!");\n}\n```\n'},Qp7g:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5143\u7ec4\n---\n"},RSnM:function(n,t,e){"use strict";e.r(t),t.default="## \u6587\u6863\u6ce8\u91ca\n\n`//!` \u901a\u5e38\u7528\u4e8e crate \u6839\u6587\u4ef6\uff08\u901a\u5e38\u662f `src/lib.rs`\uff09\u6216\u6a21\u5757\u7684\u6839\u6587\u4ef6\uff0c\u4e3a crate \u6216\u6a21\u5757\u6574\u4f53\u63d0\u4f9b\u6587\u6863\u3002\n\n````rust\n/// Adds one to the number given.\n///\n/// # Examples\n///\n/// ```\n/// let arg = 5;\n/// let answer = my_crate::add_one(arg);\n///\n/// assert_eq!(6, answer);\n/// ```\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n\n\n//! # My Crate\n//!\n//! `my_crate` is a collection of utilities to make performing certain\n//! calculations more convenient.\n\n/// Adds one to the number given.\n// --snip--\n````\n"},RXL5:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u9519\u8bef\u5904\u7406\n---"},ReFK:function(n,t,e){"use strict";e.r(t),t.default='## \u6240\u6709\u6743\n\nRust \u7684\u6838\u5fc3\u529f\u80fd\uff08\u4e4b\u4e00\uff09\u662f \u6240\u6709\u6743\uff08ownership\uff09\u3002\n\n- Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u503c\u90fd\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a\u5176 \u6240\u6709\u8005\uff08owner\uff09\u7684\u53d8\u91cf\u3002\n- \u503c\u5728\u4efb\u4e00\u65f6\u523b\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6240\u6709\u8005\u3002\n- \u5f53\u6240\u6709\u8005\uff08\u53d8\u91cf\uff09\u79bb\u5f00\u4f5c\u7528\u57df\uff0c\u8fd9\u4e2a\u503c\u5c06\u88ab\u4e22\u5f03\u3002\n\n## \u5185\u5b58\u4e0e\u5206\u914d\n\n```rust\n    {\n        let s = String::from("hello"); // \u4ece\u6b64\u5904\u8d77\uff0cs \u5f00\u59cb\u6709\u6548\n        // \u4f7f\u7528 s\n    }                                  // \u6b64\u4f5c\u7528\u57df\u5df2\u7ed3\u675f\uff0c\n                                       // s \u4e0d\u518d\u6709\u6548\n```\n\n\u53d8\u91cf\u79bb\u5f00\u4f5c\u7528\u57df\uff0cRust \u4e3a\u6211\u4eec\u8c03\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u51fd\u6570\u3002\n\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a `drop`\u3002Rust \u5728\u7ed3\u5c3e\u7684 `}` \u5904\u81ea\u52a8\u8c03\u7528 `drop`\u3002\n\n```rust\n// \u6574\u6570\u662f\u6709\u5df2\u77e5\u56fa\u5b9a\u5927\u5c0f\u7684\u7b80\u5355\u503c\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a 5 \u88ab\u653e\u5165\u4e86\u6808\u4e2d\u3002\n// \u8fd9\u91cc\u6ca1\u6709\u6df1\u6d45\u62f7\u8d1d\u7684\u533a\u522b\nlet x = 5;\nlet y = x;\nprintln!("x = {}, y = {}", x, y);\n\n// \u5c06 s1 \u8d4b\u503c\u7ed9 s2\uff0cString \u7684\u6570\u636e\u88ab\u590d\u5236\u4e86\uff0c\n// \u8fd9\u610f\u5473\u7740\u6211\u4eec\u4ece\u6808\u4e0a\u62f7\u8d1d\u4e86\u5b83\u7684\u6307\u9488\u3001\u957f\u5ea6\u548c\u5bb9\u91cf\u3002\n// \u6211\u4eec\u5e76\u6ca1\u6709\u590d\u5236\u6307\u9488\u6307\u5411\u7684\u5806\u4e0a\u6570\u636e\u3002\nlet s1 = String::from("hello");\nlet s2 = s1;\n\n// \u4f7f\u7528 clone \u65b9\u6cd5\nlet s1 = String::from("hello");\nlet s2 = s1.clone();\nprintln!("s1 = {}, s2 = {}", s1, s2);\n```\n\n## \u514b\u9686\n\n- \u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u5b9e\u73b0\u4e86 `Copy trait`\uff0c\u90a3\u4e48\u4e00\u4e2a\u65e7\u7684\u53d8\u91cf\u5728\u5c06\u5176\u8d4b\u503c\u7ed9\u5176\u4ed6\u53d8\u91cf\u540e\u4ecd\u7136\u53ef\u7528\u3002\n- Rust \u4e0d\u5141\u8bb8\u81ea\u8eab\u6216\u5176\u4efb\u4f55\u90e8\u5206\u5b9e\u73b0\u4e86 `Drop trait` \u7684\u7c7b\u578b\u4f7f\u7528 `Copy trait`\u3002\n\n\u5982\u4e0b\u662f\u4e00\u4e9b Copy \u7684\u7c7b\u578b\uff1a\n\n- \u6240\u6709\u6574\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 u32\u3002\n- \u5e03\u5c14\u7c7b\u578b\uff0cbool\uff0c\u5b83\u7684\u503c\u662f true \u548c false\u3002\n- \u6240\u6709\u6d6e\u70b9\u6570\u7c7b\u578b\uff0c\u6bd4\u5982 f64\u3002\n- \u5b57\u7b26\u7c7b\u578b\uff0cchar\u3002\n- \u5143\u7ec4\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5305\u542b\u7684\u7c7b\u578b\u4e5f\u90fd\u5b9e\u73b0 Copy \u7684\u65f6\u5019\u3002\u6bd4\u5982\uff0c(i32, i32) \u5b9e\u73b0\u4e86 Copy\uff0c\u4f46 (i32, String) \u5c31\u6ca1\u6709\u3002\n\n## \u5f15\u7528\u4e0e\u501f\u7528\n\n- \u5728\u4efb\u610f\u7ed9\u5b9a\u65f6\u95f4\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u4e00\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u8981\u4e48 \u53ea\u80fd\u6709\u591a\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\u3002\n- \u5f15\u7528\u5fc5\u987b\u603b\u662f\u6709\u6548\u7684\u3002\n\n\u4e0e\u4f7f\u7528 `&` \u5f15\u7528\u76f8\u53cd\u7684\u64cd\u4f5c\u662f \u89e3\u5f15\u7528\uff08dereferencing\uff09\uff0c\u5b83\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\uff0c`*`\u3002\n\n```rust\nfn main() {\n    let s1 = String::from("hello");\n    let len = calculate_length(&s1);\n    println!("The length of \'{}\' is {}.", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize { // s \u662f\u5bf9 String \u7684\u5f15\u7528\n    s.len()\n}\n```\n\n```rust\nfn main() {\n    let mut s = String::from("hello"); // \u53ef\u53d8\u5f15\u7528\n    change(&mut s);\n}\n\nfn change(some_string: &mut String) {\n    some_string.push_str(", world");\n}\n```\n\n\u4e0d\u80fd\u5728\u540c\u4e00\u65f6\u95f4\u591a\u6b21\u5c06 s \u4f5c\u4e3a\u53ef\u53d8\u53d8\u91cf\u501f\u7528\u3002\n\n```rust\nlet mut s = String::from("hello");\nlet r1 = &mut s;\nlet r2 = &mut s; // \u9519\u8bef\nprintln!("{}, {}", r1, r2);\n```\n\n\u53ef\u4ee5\u4f7f\u7528\u5927\u62ec\u53f7\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4f5c\u7528\u57df\uff0c\u4ee5\u5141\u8bb8\u62e5\u6709\u591a\u4e2a\u53ef\u53d8\u5f15\u7528\uff0c\u53ea\u662f\u4e0d\u80fd \u540c\u65f6 \u62e5\u6709\n\n```rust\nlet mut s = String::from("hello");\n{\n    let r1 = &mut s;\n} // r1 \u5728\u8fd9\u91cc\u79bb\u5f00\u4e86\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5f15\u7528\nlet r2 = &mut s;\n```\n\n\u6211\u4eec \u4e5f \u4e0d\u80fd\u5728\u62e5\u6709\u4e0d\u53ef\u53d8\u5f15\u7528\u7684\u540c\u65f6\u62e5\u6709\u53ef\u53d8\u5f15\u7528\u3002\n\n```rust\nlet mut s = String::from("hello");\nlet r1 = &s; // \u6ca1\u95ee\u9898\nlet r2 = &s; // \u6ca1\u95ee\u9898\nlet r3 = &mut s; // \u5927\u95ee\u9898\nprintln!("{}, {}, and {}", r1, r2, r3);\n```\n\n```rust\nlet mut s = String::from("hello");\n\nlet r1 = &s; // \u6ca1\u95ee\u9898\nlet r2 = &s; // \u6ca1\u95ee\u9898\nprintln!("{} and {}", r1, r2);\n// \u6b64\u4f4d\u7f6e\u4e4b\u540e r1 \u548c r2 \u4e0d\u518d\u4f7f\u7528\n\nlet r3 = &mut s; // \u6ca1\u95ee\u9898\nprintln!("{}", r3);\n```\n\n## \u60ac\u5782\u5f15\u7528\uff08Dangling References\uff09\n\n```rust\nfn main() {\n    let reference_to_nothing = dangle();\n}\n\nfn dangle() -> &String { // dangle \u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5f15\u7528\n    let s = String::from("hello"); // s \u662f\u4e00\u4e2a\u65b0\u5b57\u7b26\u4e32\n    &s // \u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684\u5f15\u7528\n} // \u8fd9\u91cc s \u79bb\u5f00\u4f5c\u7528\u57df\u5e76\u88ab\u4e22\u5f03\u3002\u5176\u5185\u5b58\u88ab\u91ca\u653e\u3002\n  // \u5371\u9669\uff01\n```\n'},RhlA:function(n,t,e){"use strict";e.r(t),t.default='```python\nsome_string = "0123456"\n# 234\nprint(some_string[2:5])\n\n\nsome_string = "a,b,c"\nsome_string_split = some_string.split(",")\n# a\nprint(some_string_split[0])\n# b\nprint(some_string_split[1])\n# c\nprint(some_string_split[2])\n```\n'},SNMS:function(n,t){throw new Error("Module parse failed: Unexpected character '\ufffd' (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n(Source code omitted for this binary file)")},"SSL/":function(n,t,e){"use strict";e.r(t),t.default="```dart\nassert(int.parse('42') == 42);\nassert(int.parse('0x42') == 66);\nassert(double.parse('0.50') == 0.5);\n\nassert(num.parse('42') is int);\nassert(num.parse('0x42') is int);\nassert(num.parse('0.50') is double);\n\nassert(int.parse('42', radix: 16) == 66);\n\n// Convert an int to a string.\nassert(42.toString() == '42');\n// Convert a double to a string.\nassert(123.456.toString() == '123.456');\n// Specify the number of digits after the decimal.\nassert(123.456.toStringAsFixed(2) == '123.46');\n// Specify the number of significant figures.\nassert(123.456.toStringAsPrecision(2) == '1.2e+2');\nassert(double.parse('1.2e+2') == 120.0);\n```\n\n```dart\n// Convert an int to a string.\nassert(42.toString() == '42');\n// Convert a double to a string.\nassert(123.456.toString() == '123.456');\n// Specify the number of digits after the decimal.\nassert(123.456.toStringAsFixed(2) == '123.46');\n// Specify the number of significant figures.\nassert(123.456.toStringAsPrecision(2) == '1.2e+2');\n```\n\n```dart\nassert(int.parse('42') == 42);\nassert(int.parse('0x42') == 66);\nassert(double.parse('0.50') == 0.5);\n\nassert(num.parse('42') is int);\nassert(num.parse('0x42') is int);\nassert(num.parse('0.50') is double);\n\nassert(int.parse('42', radix: 16) == 66);\n```\n"},SYVz:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u7ebf\u7a0b\n---\n"},Sb3P:function(n,t,e){"use strict";e.r(t),t.default="```python\nsome_list = [1, 2, 3, 4]\n# reversed(some_list) is just an iterable.\n# To convert an iterable into a list, use list()\nreversed_list = list(reversed(some_list))\n# 4\n# 3\n# 2\n# 1\nfor item in reversed_list:\n    print(item)\n# You can use an iterable instead of a list in a for loop\n# for item in reversed(some_list):\n```\n\n```sh\n# insert \uff0cremove \u6216\u8005 sort \u65b9\u6cd5\uff0c\u53ea\u4fee\u6539\u5217\u8868\uff0c\u6ca1\u6709\u6253\u5370\u51fa\u8fd4\u56de\u503c\n>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']\n>>> fruits.reverse()\n>>> fruits.sort()\n```\n"},SltL:function(n,t,e){"use strict";e.r(t),t.default='ES5 \u6bd4\u8f83\u4e24\u4e2a\u503c\u662f\u5426\u76f8\u7b49\uff0c\u53ea\u6709\u4e24\u4e2a\u8fd0\u7b97\u7b26\uff1a\u76f8\u7b49\u8fd0\u7b97\u7b26\uff08==\uff09\u548c\u4e25\u683c\u76f8\u7b49\u8fd0\u7b97\u7b26\uff08===\uff09\u3002\n\u5b83\u4eec\u90fd\u6709\u7f3a\u70b9\uff0c\u524d\u8005\u4f1a\u81ea\u52a8\u8f6c\u6362\u6570\u636e\u7c7b\u578b\uff0c\u540e\u8005\u7684 NaN \u4e0d\u7b49\u4e8e\u81ea\u8eab\uff0c\u4ee5\u53ca+0 \u7b49\u4e8e-0\u3002\n\n```js\nObject.is("foo", "foo");\n// true\nObject.is({}, {});\n// false\n```\n'},Sm32:function(n,t,e){"use strict";e.r(t),t.default='```js\nconst s = new Set();\n[2, 3, 5, 4, 5, 2, 2].forEach(x => s.add(x));\nfor (let i of s) {\n  console.log(i);\n}\n// 2 3 5 4\n\n// \u4f8b\u4e00\nconst set = new Set([1, 2, 3, 4, 4]);\n[...set]\n// [1, 2, 3, 4]\n\n// \u4f8b\u4e8c\nconst items = new Set([1, 2, 3, 4, 5, 5, 5, 5]);\nitems.size // 5\n\n// \u4f8b\u4e09\nconst set = new Set(document.querySelectorAll(\'div\'));\nset.size // 56\n\n// \u53bb\u9664\u6570\u7ec4\u7684\u91cd\u590d\u6210\u5458\n[...new Set(array)]\n\n// \u53bb\u9664\u5b57\u7b26\u4e32\u91cc\u9762\u7684\u91cd\u590d\u5b57\u7b26\u3002\n[...new Set(\'ababbc\')].join(\'\')\n// "abc"\n\n// \u4e24\u4e2a\u5bf9\u8c61\u603b\u662f\u4e0d\u76f8\u7b49\u7684\u3002\nlet set = new Set();\nset.add({});\nset.size // 1\nset.add({});\nset.size // 2\n\n\ns.add(1).add(2).add(2);\n// \u6ce8\u610f2\u88ab\u52a0\u5165\u4e86\u4e24\u6b21\n\ns.size // 2\n\ns.has(1) // true\ns.has(2) // true\ns.has(3) // false\n\ns.delete(2);\ns.has(2) // false\n\n\nlet set = new Set([\'red\', \'green\', \'blue\']);\n\nfor (let item of set.keys()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.values()) {\n  console.log(item);\n}\n// red\n// green\n// blue\n\nfor (let item of set.entries()) {\n  console.log(item);\n}\n// ["red", "red"]\n// ["green", "green"]\n// ["blue", "blue"]\n```\n'},SxDJ:function(n,t){throw new Error("Module parse failed: Unexpected character '\ufffd' (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n(Source code omitted for this binary file)")},T4h4:function(n,t,e){"use strict";e.r(t),t.default="```dart\nvar gifts = {\n  'first' : 'partridge',\n  'second': 'turtledoves',\n  'fifth' : 'golden rings'\n};\n\nvar gifts = new Map();\ngifts['first'] = 'partridge';\ngifts['second'] = 'turtledoves';\ngifts['fifth'] = 'golden rings';\n\nvar gifts = {'first': 'partridge'};\ngifts['fourth'] = 'calling birds';\n\nfinal constantMap = const {\n  2: 'helium',\n  10: 'neon',\n  18: 'argon',\n};\n\nvar pages = <String, String>{\n  'index.html': 'Homepage',\n  'robots.txt': 'Hints for web robots',\n  'humans.txt': 'We are people, not machines'\n};\n```\n\n## \u4ece map \u4e2d\u5220\u9664 key \u548c value\n\n```dart\n// \u4f7f\u7528\u4e2d\u62ec\u53f7\u6765\u8bbf\u95ee\u6216\u8005\u8bbe\u7f6e map \u4e2d\u7684\u6570\u636e\uff0c\n// \u4f7f\u7528 remove() \u51fd\u6570\u6765\u4ece map \u4e2d\u5220\u9664 key \u548c value\u3002\nvar nobleGases = {54: 'xenon'};\n// Retrieve a value with a key.\nassert(nobleGases[54] == 'xenon');\n// Check whether a map contains a key.\nassert(nobleGases.containsKey(54));\n// Remove a key and its value.\nnobleGases.remove(54);\nassert(!nobleGases.containsKey(54));\n```\n\n## Maps(\u5b57\u5178)\u904d\u5386\uff0c\u83b7\u53d6 map \u7684\u6240\u6709 key \u548c value\n\n```dart\n// \u4f7f\u7528 .length \u6765\u83b7\u53d6 map \u4e2d\u952e\u503c\u5bf9\u7684\u6570\u76ee\nvar gifts = {'first': 'partridge'};\ngifts['fourth'] = 'calling birds';\nassert(gifts.length == 2);\n\nvar hawaiianBeaches = {\n  'Oahu'      : ['Waikiki', 'Kailua', 'Waimanalo'],\n  'Big Island': ['Wailea Bay', 'Pololu Beach'],\n  'Kauai'     : ['Hanalei', 'Poipu']\n};\n\n// Get all the keys as an unordered collection\n// (an Iterable).\nvar keys = hawaiianBeaches.keys;\n\nassert(keys.length == 3);\nassert(new Set.from(keys).contains('Oahu'));\n\n// Get all the values as an unordered collection\n// (an Iterable of Lists).\nvar values = hawaiianBeaches.values;\nassert(values.length == 3);\nassert(values.any((v) => v.contains('Waikiki')));\n```\n\n## \u5224\u65ad map \u662f\u5426\u5305\u542b\u4e00\u4e2a key\n\n```dart\n// \u7531\u4e8e map \u7684 value \u53ef\u4ee5\u4e3a null\uff0c\n// \u6240\u6709\u901a\u8fc7 key \u6765\u83b7\u53d6 value \u5e76\u901a\u8fc7 \u5224\u65ad value \u662f\u5426\u4e3a null \u6765\u5224\u65ad key \u662f\u5426\u5b58\u5728\u662f \u884c\u4e0d\u901a\u7684\u3002\nvar hawaiianBeaches = {\n  'Oahu'      : ['Waikiki', 'Kailua', 'Waimanalo'],\n  'Big Island': ['Wailea Bay', 'Pololu Beach'],\n  'Kauai'     : ['Hanalei', 'Poipu']\n};\n\nassert(hawaiianBeaches.containsKey('Oahu'));\nassert(!hawaiianBeaches.containsKey('Florida'));\n```\n"},TIUH:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// CountingSort \u8ba1\u6570\u6392\u5e8f\n// \u5c06\u6570\u7ec4\u7684\u503c\u6620\u5c04\u5230\uff0c\u5b58\u5165\u53e6\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4\u7684\u952e\uff0c\u5e76\u7edf\u8ba1\u6b21\u6570\n// \u56e0\u4e3a\u952e\u662f\u6392\u597d\u5e8f\u7684\uff0c\u8fed\u4ee3\u4e00\u6b21\u4e34\u65f6\u6570\u7ec4\u5373\u53ef\u6309\u6b21\u5e8f\u53d6\u51fa\u5b58\u8fdb\u7684\u503c\nfunc CountingSort(arr []int) []int {\n\tmax, min := countMaxMin(arr)  // \u627e\u51fa\u6700\u5927\uff0c\u6700\u5c0f\u503c\n\ttmp := make([]int, max-min+1) // \u521b\u5efa\u4e34\u65f6\u6570\u7ec4\n\tfor _, v := range arr {       // \u5c06\u503c\u5b58\u5165\u4e34\u65f6\u6570\u7ec4\uff0c\u7edf\u8ba1\u6b21\u6570\n\t\ttmp[v-min]++ // min\u76f8\u5f53\u4e8e\u503c\u7684\u504f\u79fb\u91cf\n\t}\n\n\tindex := 0\n\t// \u8fed\u4ee3\u4e34\u65f6\u6570\u7ec4\n\t// \u8fd9\u91cc\u7684k\u5176\u5b9e\u662f\u5b58\u5165\u7684\u503c\uff0cv\u662f\u5b58\u5165\u7684\u6b21\u6570\n\tfor k, v := range tmp {\n\t\tfor v > 0 {\n\t\t\tarr[index] = k + min // \u9700\u8981\u52a0\u4e0a\u504f\u79fb\u91cf\n\t\t\tindex++\n\t\t\tv--\n\t\t}\n\t}\n\treturn arr\n}\n\n// countMaxMin \u627e\u51fa\u6570\u7ec4\u6700\u5927\u6700\u5c0f\u503c\nfunc countMaxMin(arr []int) (max int, min int) {\n\tmax, min = arr[0], arr[0]\n\tfor _, v := range arr {\n\t\tif v > max {\n\t\t\tmax = v\n\t\t}\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t}\n\treturn\n}\n\nfunc main() {\n\ta := []int{3, 6, 7, 4, 5, 1, 2}\n\tfmt.Println(CountingSort(a))\n}\n```\n'},TYVT:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u7279\u6b8a\u8bed\u6cd5\n---"},UcBg:function(n,t,e){"use strict";e.r(t),t.default="```js\nfunction MergeSort(arr) {\n  if (arr.length <= 1) return arr;\n  const mid = Math.floor(arr.length / 2);\n  const left = MergeSort(arr.slice(0, mid));\n  const right = MergeSort(arr.slice(mid));\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n  const result = [];\n  while (left.length > 0 && right.length > 0) {\n    if (left[0] < right[0]) {\n      result.push(left.shift());\n    } else {\n      result.push(right.shift());\n    }\n  }\n  return result.concat(left).concat(right);\n}\n\nconst arr = [3, 6, 7, 4, 5, 1, 2];\nconsole.log(MergeSort(arr));\n```\n"},"UgH/":function(n,t,e){"use strict";e.r(t),t.default="```python\n# helloword.py\nprint('hello, world')\n```\n\n```sh\npython helloword.py\n```\n"},UlLG:function(n,t,e){"use strict";e.r(t),t.default='## \u9879\u76ee\u53ef\u4ee5\u5b9a\u4e49 feature\n\n- \u5728 Cargo.toml \u4e2d\u5b9a\u4e49\u7684 feature \u4f1a\u88ab Cargo \u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570 --cfg \u4f20\u7ed9 rustc\uff0c\n  - \u6700\u7ec8\u7531\u540e\u8005\u5b8c\u6210\u7f16\u8bd1\uff1arustc --cfg ...\n- \u4f8b\u5982 ICO \u56fe\u7247\u683c\u5f0f\u5305\u542b BMP \u548c PNG \u683c\u5f0f\uff0c\n  - \u56e0\u6b64\u5f53 ico \u88ab\u542f\u7528\u540e\uff0c\u5b83\u8fd8\u5f97\u786e\u4fdd\u542f\u7528 bmp \u548c png\n  - \u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a bmp \u548c png \u662f\u5f00\u542f ico \u7684\u5148\u51b3\u6761\u4ef6\n- \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6240\u6709\u7684 feature \u90fd\u4f1a\u88ab\u81ea\u52a8\u7981\u7528\uff0c\u53ef\u4ee5\u901a\u8fc7 default \u6765\u542f\u7528\u5b83\u4eec\n\n```toml\n[features]\ndefault = ["ico", "webp"]\nbmp = []\npng = []\nico = ["bmp", "png"]\nwebp = []\n```\n\n```rust\n// \u53ea\u6709\u5728 webp feature \u88ab\u5b9a\u4e49\u540e\uff0c\u4ee5\u4e0b\u7684 webp \u6a21\u5757\u624d\u80fd\u88ab\u5f15\u5165\u8fdb\u6765\n#[cfg(feature = "webp")]\npub mod webp;\n```\n\n## \u53ef\u9009\u4f9d\u8d56\n\n- \u5f53\u4f9d\u8d56\u88ab\u6807\u8bb0\u4e3a "\u53ef\u9009 optional" \u65f6\uff0c\u610f\u5473\u7740\u5b83\u9ed8\u8ba4\u4e0d\u4f1a\u88ab\u7f16\u8bd1\u3002\n- \u8fd9\u79cd\u53ef\u9009\u4f9d\u8d56\u7684\u5199\u6cd5\u4f1a\u81ea\u52a8\u5b9a\u4e49\u4e00\u4e2a\u4e0e\u4f9d\u8d56\u540c\u540d\u7684 feature\uff0c\u4e5f\u5c31\u662f gif feature\uff0c\n  - \u8fd9\u6837\u4e00\u6765\uff0c\u5f53\u6211\u4eec\u542f\u7528 gif feature \u65f6\uff0c\u8be5\u4f9d\u8d56\u5e93\u4e5f\u4f1a\u88ab\u81ea\u52a8\u5f15\u5165\u5e76\u542f\u7528\uff1a\n  - \u4f8b\u5982\u901a\u8fc7 --feature gif \u7684\u65b9\u5f0f\u542f\u7528 feature \u3002\n\n```toml\n[dependencies]\ngif = { version = "0.11.1", optional = true }\n```\n\n- \u8fd8\u53ef\u4ee5\u901a\u8fc7\u663e\u5f0f\u5b9a\u4e49 feature \u7684\u65b9\u5f0f\u6765\u542f\u7528\u8fd9\u4e9b\u53ef\u9009\u4f9d\u8d56\u5e93\uff0c\n  - avif feature \u4e00\u65e6\u88ab\u542f\u7528\uff0c\u90a3\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u5e93\u4e5f\u5c06\u81ea\u52a8\u88ab\u5f15\u5165\n\n```toml\n[dependencies]\nravif = { version = "0.6.3", optional = true }\nrgb = { version = "0.8.25", optional = true }\n\n[features]\navif = ["ravif", "rgb"]\n```\n\n## \u4f9d\u8d56\u5e93\u81ea\u8eab\u7684 feature\n\n```toml\n[dependencies]\nserde = { version = "1.0.118", features = ["derive"] }\n```\n\n\u4ee5\u4e0a\u914d\u7f6e\u4e3a `serde` \u4f9d\u8d56\u5f00\u542f\u4e86 `derive` feature\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7 `default-features = false` \u6765\u7981\u7528\u4f9d\u8d56\u5e93\u7684 `default` feature :\n\n```toml\n# \u8fd9\u91cc\u6211\u4eec\u7981\u7528\u4e86 flate2 \u7684 default feature\uff0c\u4f46\u53c8\u624b\u52a8\u4e3a\u5b83\u542f\u7528\u4e86 zlib feature\u3002\n[dependencies]\nflate2 = { version = "1.0.3", default-features = false, features = ["zlib"] }\n```\n\n### \u95f4\u63a5\u5f00\u542f\u4f9d\u8d56\u5e93\u7684 feature :\n\n```toml\n[dependencies]\njpeg-decoder = { version = "0.1.20", default-features = false }\n\n[features]\n# \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a parallel feature\uff0c\u540c\u65f6\u4e3a\u5176\u542f\u7528\u4e86 jpeg-decoder \u4f9d\u8d56\u7684 rayon feature\n# Enables parallel processing support by enabling the "rayon" feature of jpeg-decoder.\nparallel = ["jpeg-decoder/rayon"]\n```\n\n## \u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u542f\u7528 feature\n\n- `--features FEATURES`: \u542f\u7528\u7ed9\u51fa\u7684 feature \u5217\u8868\uff0c\u53ef\u4ee5\u4f7f\u7528\u9017\u53f7\u6216\u7a7a\u683c\u8fdb\u884c\u5206\u9694\uff0c\n  - \u82e5\u4f60\u662f\u5728\u7ec8\u7aef\u4e2d\u4f7f\u7528\uff0c\u8fd8\u9700\u8981\u52a0\u4e0a\u53cc\u5f15\u53f7\uff0c\u4f8b\u5982 `--features "foo bar"`\u3002\n  - \u82e5\u5728\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u6784\u5efa\u591a\u4e2a `package`\uff0c\u53ef\u4ee5\u4f7f\u7528 `package-name/feature-name` \u4e3a\u7279\u5b9a\u7684\u6210\u5458\u542f\u7528 features\n- `--all-features`: \u542f\u7528\u547d\u4ee4\u884c\u4e0a\u6240\u9009\u62e9\u7684\u6240\u6709\u5305\u7684\u6240\u6709 features\n- `--no-default-features`: \u5bf9\u9009\u62e9\u7684\u5305\u7981\u7528 default feature\n\n## \u68c0\u89c6\u5df2\u89e3\u6790\u7684 features\n\n```sh\ncargo tree -e features\ntest_cargo v0.1.0 (/Users/sunfei/development/rust/demos/test_cargo)\n\u2514\u2500\u2500 uuid feature "default"\n    \u251c\u2500\u2500 uuid v0.8.2\n    \u2514\u2500\u2500 uuid feature "std"\n        \u2514\u2500\u2500 uuid v0.8.2\n\n# cargo tree -f "{p} {f}" \u547d\u4ee4\u4f1a\u63d0\u4f9b\u4e00\u4e2a\u66f4\u52a0\u7d27\u51d1\u7684\u89c6\u56fe\uff1a\ncargo tree -f "{p} {f}"\ntest_cargo v0.1.0 (/Users/sunfei/development/rust/demos/test_cargo)\n\u2514\u2500\u2500 uuid v0.8.2 default,std\n```\n'},Uq7d:function(n,t,e){"use strict";e.r(t),t.default='\u901a\u8fc7 `close` \u6765\u5173\u95ed `cancel` \u7ba1\u9053\u5411\u591a\u4e2a `Goroutine` \u5e7f\u64ad\u9000\u51fa\u7684\u6307\u4ee4\n\n```go\nfunc worker(wg *sync.WaitGroup, cancel chan bool) {\n    defer wg.Done()\n\n    for {\n        select {\n        default:\n            fmt.Println("hello")\n        case <-cancel:\n            return\n        }\n    }\n}\n\nfunc main() {\n    cancel := make(chan bool)\n\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go worker(&wg, cancel)\n    }\n\n    time.Sleep(time.Second)\n    close(cancel)\n    wg.Wait() // \u7b49\u5f85\u5404\u4e2a\u5de5\u4f5c Goroutine \u9000\u51fa\u5de5\u4f5c\u5b8c\u6210\n}\n```\n\n\u7528 `context` \u5305\u6765\u91cd\u65b0\u5b9e\u73b0\u524d\u9762\u7684\u7ebf\u7a0b\u5b89\u5168\u9000\u51fa\u6216\u8d85\u65f6\u7684\u63a7\u5236\n\n```go\nfunc worker(ctx context.Context, wg *sync.WaitGroup) error {\n    defer wg.Done()\n\n    for {\n        select {\n        default:\n            fmt.Println("hello")\n        case <-ctx.Done():\n            return ctx.Err()\n        }\n    }\n}\n\nfunc main() {\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n\n    var wg sync.WaitGroup\n    for i := 0; i < 10; i++ {\n        wg.Add(1)\n        go worker(ctx, &wg)\n    }\n\n    time.Sleep(time.Second)\n    cancel()\n\n    wg.Wait()\n}\n```\n'},UqYK:function(n,t,e){"use strict";e.r(t),t.default='## `printf()`\n\n## `scanf()`\n\n`scanf()`\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6210\u529f\u8bfb\u53d6\u7684\u53d8\u91cf\u4e2a\u6570\u3002\n\u5982\u679c\u6ca1\u6709\u8bfb\u53d6\u4efb\u4f55\u9879\uff0c\u6216\u8005\u5339\u914d\u5931\u8d25\uff0c\u5219\u8fd4\u56de 0\u3002\n\u5982\u679c\u8bfb\u53d6\u5230\u6587\u4ef6\u7ed3\u5c3e\uff0c\u5219\u8fd4\u56de\u5e38\u91cf `EOF`\u3002\n\n```c++\n// stdio.h\nscanf("%d", &i);\n```\n\n```c++\nscanf("%d%d%f%f", &i, &j, &x, &y);\n\n\nint x;\nfloat y;\n// \u7528\u6237\u8f93\u5165 "    -13.45e12# 0"\nscanf("%d", &x); // -13\nscanf("%f", &y); // .45e12\n```\n\n## `sscanf()`\n\n`sscanf()`\u4ece\u5b57\u7b26\u4e32\u91cc\u9762\uff0c\u800c\u4e0d\u662f\u4ece\u7528\u6237\u8f93\u5165\u83b7\u53d6\u6570\u636e\n\n```c++\n// stdio.h\nint sscanf(const char* s, const char* format, ...);\n```\n\n```c++\n// fgets()\u5148\u4ece\u6807\u51c6\u8f93\u5165\u83b7\u53d6\u4e86\u4e00\u884c\u6570\u636e\uff0c\u5b58\u5165\u5b57\u7b26\u6570\u7ec4str\u3002\n// \u7136\u540e\uff0csscanf()\u518d\u4ece\u5b57\u7b26\u4e32str\u91cc\u9762\u63d0\u53d6\u4e24\u4e2a\u6574\u6570\uff0c\u653e\u5165\u53d8\u91cfi\u548cj\nfgets(str, sizeof(str), stdin);\nsscanf(str, "%d%d", &i, &j);\n```\n\n## `getchar()`, `putchar()`, `puts()`, `gets()`\n\n- `getchar()`\u51fd\u6570\u8fd4\u56de\u7528\u6237\u4ece\u952e\u76d8\u8f93\u5165\u7684\u4e00\u4e2a\u5b57\u7b26\n- `putchar()`\u51fd\u6570\u5c06\u5b83\u7684\u53c2\u6570\u5b57\u7b26\u8f93\u51fa\u5230\u5c4f\u5e55\n- `puts()`\u51fd\u6570\u7528\u4e8e\u5c06\u53c2\u6570\u5b57\u7b26\u4e32\u663e\u793a\u5728\u5c4f\u5e55\uff08`stdout`\uff09\u4e0a\uff0c\u5e76\u4e14\u81ea\u52a8\u5728\u5b57\u7b26\u4e32\u672b\u5c3e\u6dfb\u52a0\u6362\u884c\u7b26\n- `gets()`\u51fd\u6570\u4ee5\u524d\u7528\u4e8e\u4ece `stdin` \u8bfb\u53d6\u6574\u884c\u8f93\u5165\uff0c\u73b0\u5728\u5df2\u7ecf\u88ab\u5e9f\u9664\u4e86\n  - \u8be5\u51fd\u6570\u8bfb\u53d6\u7528\u6237\u7684\u4e00\u884c\u8f93\u5165\uff0c\u4e0d\u4f1a\u8df3\u8fc7\u8d77\u59cb\u5904\u7684\u7a7a\u767d\u5b57\u7b26\uff0c\u76f4\u5230\u9047\u5230\u6362\u884c\u7b26\u4e3a\u6b62\n\n```c++\nchar ch;\nch = getchar();\n// \u7b49\u540c\u4e8e\nscanf("%c", &ch);\n\n\nputchar(ch);\n// \u7b49\u540c\u4e8e\nprintf("%c", ch);\n\n\nputs("Here are some messages:");\nputs("Hello World");\n\n\nchar words[81];\nputs("Enter a string, please");\ngets(words);\n```\n'},Utcn:function(n,t,e){"use strict";e.r(t),t.default="```python\n# Fibonacci series:\n# the sum of two elements defines the next\na, b = 0, 1\nwhile a < 10:\n    print(a)\n    a, b = b, a+b\n\n# \u5173\u952e\u5b57\u53c2\u6570 end \u53ef\u4ee5\u7528\u6765\u53d6\u6d88\u8f93\u51fa\u540e\u9762\u7684\u6362\u884c, \u6216\u662f\u7528\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\u4e32\u6765\u7ed3\u5c3e:\na, b = 0, 1\nwhile a < 1000:\n    print(a, end=',')\n    a, b = b, a+b\n# 0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,\n```\n"},UuzR:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc worker(id int, jobs <-chan int, results chan<- int) {\n    for j := range jobs {\n        fmt.Println("worker", id, "started  job", j)\n        time.Sleep(time.Second)\n        fmt.Println("worker", id, "finished job", j)\n        results <- j * 2\n    }\n}\n\nfunc main() {\n    const numJobs = 5\n    jobs := make(chan int, numJobs)\n    results := make(chan int, numJobs)\n\n    for w := 1; w <= 3; w++ {\n        go worker(w, jobs, results)\n    }\n\n    for j := 1; j <= numJobs; j++ {\n        jobs <- j\n    }\n    close(jobs)\n\n    for a := 1; a <= numJobs; a++ {\n        <-results\n    }\n}\n```\n'},V3NY:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6d41\u7a0b\u63a7\u5236\n---"},VKyy:function(n,t,e){"use strict";e.r(t),t.default='```js\nReflect.ownKeys("".__proto__);\nReflect.ownKeys(String.prototype);\n\n// Object.getOwnPropertyNames\u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4\uff0c\n// \u6210\u5458\u662f\u53c2\u6570\u5bf9\u8c61\u672c\u8eab\u7684\u6240\u6709\u5c5e\u6027\u7684\u952e\u540d\uff0c\u4e0d\u5305\u542b\u7ee7\u627f\u7684\u5c5e\u6027\u952e\u540d\u3002\nObject.getOwnPropertyNames(Date);\n```\n'},VT0X:function(n,t,e){"use strict";e.r(t),t.default='- \u4e0e\u5143\u7ec4\u4e0d\u540c\uff0c\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\n- \u6570\u7ec4\u5177\u6709\u56fa\u5b9a\u957f\u5ea6\u3002\n\n```rust\nlet months = ["January", "February", "March", "April", "May", "June", "July",\n              "August", "September", "October", "November", "December"];\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n\n// \u53d8\u91cf\u540d\u4e3a a \u7684\u6570\u7ec4\u5c06\u5305\u542b 5 \u4e2a\u5143\u7d20\uff0c\u8fd9\u4e9b\u5143\u7d20\u7684\u503c\u521d\u59cb\u5316\u4e3a 3\u3002\nlet a = [3; 5];\nlet a = [3, 3, 3, 3, 3];\n```\n'},VbM5:function(n,t,e){"use strict";e.r(t),t.default='Cargo \u63a8\u8350\u7684\u76ee\u5f55\u7ed3\u6784\n\n- `Cargo.toml` \u548c `Cargo.lock` \u4fdd\u5b58\u5728 `package` \u6839\u76ee\u5f55\u4e0b\n- \u6e90\u4ee3\u7801\u653e\u5728 `src` \u76ee\u5f55\u4e0b\n- \u9ed8\u8ba4\u7684 `lib` \u5305\u6839\u662f `src/lib.rs`\n- \u9ed8\u8ba4\u7684\u4e8c\u8fdb\u5236\u5305\u6839\u662f `src/main.rs`\n- \u5176\u5b83\u4e8c\u8fdb\u5236\u5305\u6839\u653e\u5728 `src/bin/` \u76ee\u5f55\u4e0b\n  - \u4e3a\u4e86\u4f7f\u5f97 cargo \u7f16\u8bd1\u6216\u8fd0\u884c\u8fd9\u4e2a\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u800c\u4e0d\u662f\u9ed8\u8ba4\u6216\u5176\u4ed6\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\uff0c\n  - \u6211\u4eec\u53ea\u9700\u7ed9 cargo \u589e\u52a0\u4e00\u4e2a\u53c2\u6570 `--bin my_other_bin`\n- \u57fa\u51c6\u6d4b\u8bd5 `benchmark` \u653e\u5728 `benches` \u76ee\u5f55\u4e0b\n- \u793a\u4f8b\u4ee3\u7801\u653e\u5728 `examples` \u76ee\u5f55\u4e0b\n- \u96c6\u6210\u6d4b\u8bd5\u4ee3\u7801\u653e\u5728 `tests` \u76ee\u5f55\u4e0b\n\n```\n.\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 lib.rs\n\u2502   \u251c\u2500\u2500 main.rs\n\u2502   \u2514\u2500\u2500 bin/\n\u2502       \u251c\u2500\u2500 named-executable.rs\n\u2502       \u251c\u2500\u2500 another-executable.rs\n\u2502       \u2514\u2500\u2500 multi-file-executable/\n\u2502           \u251c\u2500\u2500 main.rs\n\u2502           \u2514\u2500\u2500 some_module.rs\n\u251c\u2500\u2500 benches/\n\u2502   \u251c\u2500\u2500 large-input.rs\n\u2502   \u2514\u2500\u2500 multi-file-bench/\n\u2502       \u251c\u2500\u2500 main.rs\n\u2502       \u2514\u2500\u2500 bench_module.rs\n\u251c\u2500\u2500 examples/\n\u2502   \u251c\u2500\u2500 simple.rs\n\u2502   \u2514\u2500\u2500 multi-file-example/\n\u2502       \u251c\u2500\u2500 main.rs\n\u2502       \u2514\u2500\u2500 ex_module.rs\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 some-integration-tests.rs\n    \u2514\u2500\u2500 multi-file-test/\n        \u251c\u2500\u2500 main.rs\n        \u2514\u2500\u2500 test_module.rs\n```\n\n## mod\n\n### \u5355\u6587\u4ef6\u5185\n\n```rust\nfn function() {\n    println!("called `function()`");\n}\nmod cool {\n    pub fn function() {\n        println!("called `cool::function()`");\n    }\n}\nmod my {\n    fn function() {\n        println!("called `my::function()`");\n    }\n    mod cool {\n        pub fn function() {\n            println!("called `my::cool::function()`");\n        }\n    }\n    pub fn indirect_call() {\n        // \u8ba9\u6211\u4eec\u4ece\u8fd9\u4e2a\u4f5c\u7528\u57df\u4e2d\u8bbf\u95ee\u6240\u6709\u540d\u4e3a `function` \u7684\u51fd\u6570\uff01\n        print!("called `my::indirect_call()`, that\\n> ");\n        // `self` \u5173\u952e\u5b57\u8868\u793a\u5f53\u524d\u7684\u6a21\u5757\u4f5c\u7528\u57df\u2014\u2014\u5728\u8fd9\u4e2a\u4f8b\u5b50\u662f `my`\u3002\n        // \u8c03\u7528 `self::function()` \u548c\u76f4\u63a5\u8c03\u7528 `function()` \u90fd\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\uff0c\n        // \u56e0\u4e3a\u4ed6\u4eec\u8868\u793a\u76f8\u540c\u7684\u51fd\u6570\u3002\n        self::function();\n        function();\n        // \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 `self` \u6765\u8bbf\u95ee `my` \u5185\u90e8\u7684\u53e6\u4e00\u4e2a\u6a21\u5757\uff1a\n        self::cool::function();\n        // `super` \u5173\u952e\u5b57\u8868\u793a\u7236\u4f5c\u7528\u57df\uff08\u5728 `my` \u6a21\u5757\u5916\u9762\uff09\u3002\n        super::function();\n        // \u8fd9\u5c06\u5728 *crate* \u4f5c\u7528\u57df\u5185\u7ed1\u5b9a `cool::function` \u3002\n        // \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0ccrate \u4f5c\u7528\u57df\u662f\u6700\u5916\u9762\u7684\u4f5c\u7528\u57df\u3002\n        {\n            use crate::cool::function as root_function;\n            root_function();\n        }\n    }\n}\n\nfn main() {\n    my::indirect_call();\n}\n```\n\n### \u6587\u4ef6\u5206\u5c42\n\n```sh\n.\n|-- my\n|   |-- inaccessible.rs\n|   |-- mod.rs\n|   `-- nested.rs\n`-- split.rs\n```\n\n```rust\n// split.rs\n// \u6b64\u58f0\u660e\u5c06\u4f1a\u67e5\u627e\u540d\u4e3a `my.rs` \u6216 `my/mod.rs` \u7684\u6587\u4ef6\uff0c\u5e76\u5c06\u8be5\u6587\u4ef6\u7684\u5185\u5bb9\u653e\u5230\n// \u6b64\u4f5c\u7528\u57df\u4e2d\u4e00\u4e2a\u540d\u4e3a `my` \u7684\u6a21\u5757\u91cc\u9762\u3002\nmod my;\nfn function() {\n    println!("called `function()`");\n}\nfn main() {\n    my::function();\n    function();\n    my::indirect_access();\n    my::nested::function();\n}\n```\n\n```rust\n// my/mod.rs\n// \u7c7b\u4f3c\u5730\uff0c`mod inaccessible` \u548c `mod nested` \u5c06\u627e\u5230 `nested.rs` \u548c\n// `inaccessible.rs` \u6587\u4ef6\uff0c\u5e76\u5728\u5b83\u4eec\u653e\u5230\u5404\u81ea\u7684\u6a21\u5757\u4e2d\u3002\nmod inaccessible;\npub mod nested;\npub fn function() {\n    println!("called `my::function()`");\n}\nfn private_function() {\n    println!("called `my::private_function()`");\n}\npub fn indirect_access() {\n    print!("called `my::indirect_access()`, that\\n> ");\n    private_function();\n}\n```\n\n```rust\n// my/nested.rs\npub fn function() {\n    println!("called `my::nested::function()`");\n}\n#[allow(dead_code)]\nfn private_function() {\n    println!("called `my::nested::private_function()`");\n}\n```\n\n```rust\n// my/inaccessible.rs\n#[allow(dead_code)]\npub fn public_function() {\n    println!("called `my::inaccessible::public_function()`");\n}\n```\n'},VhA3:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5b57\u7b26\u4e32\u62fc\u63a5\n---\n"},"W+2h":function(n,t,e){"use strict";e.r(t),t.default="```sh\npub global activate dart_style\ndartfmt test.dart\n```\n"},"W/TY":function(n,t,e){"use strict";e.r(t),t.default='```go\nimport (\n    "fmt"\n    "reflect"\n)\n\nfunc main() {\n\n    v1 := data{}\n    v2 := data{}\n    fmt.Println("v1 == v2:",reflect.DeepEqual(v1,v2))\n    //prints: v1 == v2: true\n\n    m1 := map[string]string{"one": "a","two": "b"}\n    m2 := map[string]string{"two": "b", "one": "a"}\n    fmt.Println("m1 == m2:",reflect.DeepEqual(m1, m2))\n    //prints: m1 == m2: true\n\n    s1 := []int{1, 2, 3}\n    s2 := []int{1, 2, 3}\n    fmt.Println("s1 == s2:",reflect.DeepEqual(s1, s2))\n    //prints: s1 == s2: true\n}\n```\n'},WKOB:function(n,t,e){"use strict";e.r(t),t.default='```c\n// helloword.c\n#include <stdio.h>\n\nint main() {\n    printf("hello, world\\n");\n    return 0;\n}\n```\n\n```sh\n# gcc -std=c99 hello.c\ngcc -o helloword helloword.c\n./helloword\n```\n'},WPBS:function(n,t,e){"use strict";e.r(t),t.default="```python\n# \u8fd4\u56de\u539f\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u5927\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u5c0f\u5199\u8f6c\u4e3a\u5927\u5199\n# \u8bf7\u6ce8\u610f s.swapcase().swapcase() == s \u5e76\u4e0d\u4e00\u5b9a\u4e3a\u771f\u503c\u3002\nstr.swapcase()\n# \u8fd4\u56de\u539f\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u4e2d\u6240\u6709\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26 [4] \u5747\u8f6c\u6362\u4e3a\u5927\u5199\nstr.upper()\n# \u8fd4\u56de\u539f\u5b57\u7b26\u4e32\u7684\u526f\u672c\uff0c\u5176\u6240\u6709\u533a\u5206\u5927\u5c0f\u5199\u7684\u5b57\u7b26 [4] \u5747\u8f6c\u6362\u4e3a\u5c0f\u5199\nstr.lower()\n```\n"},Wdh2:function(n,t,e){"use strict";e.r(t),t.default="```js\n// sort\u65b9\u6cd5\u5bf9\u6570\u7ec4\u6210\u5458\u8fdb\u884c\u6392\u5e8f\uff0c\u9ed8\u8ba4\u662f\u6309\u7167\u5b57\u5178\u987a\u5e8f\u6392\u5e8f\n// \u6392\u5e8f\u540e\uff0c\u539f\u6570\u7ec4\u5c06\u88ab\u6539\u53d8\u3002\n['d', 'c', 'b', 'a'].sort()\n// ['a', 'b', 'c', 'd']\n[11, 101].sort()\n// [101, 11]\n\n[10111, 1101, 111].sort(function (a, b) {\n  return a - b;\n})\n// [111, 1101, 10111]\n\n[\n  { name: \"\u5f20\u4e09\", age: 30 },\n  { name: \"\u674e\u56db\", age: 24 },\n  { name: \"\u738b\u4e94\", age: 28  }\n].sort(function (o1, o2) {\n  return o1.age - o2.age;\n})\n// [\n//   { name: \"\u674e\u56db\", age: 24 },\n//   { name: \"\u738b\u4e94\", age: 28  },\n//   { name: \"\u5f20\u4e09\", age: 30 }\n// ]\n\n\nconst someList = [1, 2, 3, 4]\nsomeList.reverse()\n```"},Wgee:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u64cd\u4f5c\u7b26\n---"},X2d1:function(n,t,e){"use strict";e.r(t),t.default="```python\n# 100\nprint(max(100, 50))\n# 40\nprint(min\n```\n"},XKtc:function(n,t,e){"use strict";e.r(t),t.default='```c++\n#if 0\n  const double pi = 3.1415; // \u4e0d\u4f1a\u6267\u884c\n#endif\n```\n\n```c++\n#define FOO 1\n\n#if FOO\n  printf("defined\\n");\n#else\n  printf("not defined\\n");\n#endif\n\n\n#if HAPPY_FACTOR == 0\n  printf("I\'m not happy!\\n");\n#elif HAPPY_FACTOR == 1\n  printf("I\'m just regular\\n");\n#else\n  printf("I\'m extra happy!\\n");\n#endif\n```\n\n```c++\n#define DEBUG 1\n#if DEBUG\nprintf("value of i : %d\\n", i);\nprintf("value of j : %d\\n", j);\n#endif\n```\n\n```sh\n# -D\u53c2\u6570\u6307\u5b9a\u5b8fDEBUG\u4e3a1\uff0c\u76f8\u5f53\u4e8e\u5728\u4ee3\u7801\u4e2d\u6307\u5b9a#define DEBUG 1\ngcc -DDEBUG=1 foo.c\n```\n\n```c++\n// \u4f7f\u7528#ifdef...#endif\u68c0\u67e5\u8fd9\u4e2a\u5b8f\u662f\u5426\u5b9a\u4e49\u8fc7\n#ifdef EXTRA_HAPPY\n  printf("I\'m extra happy!\\n");\n#else\n  printf("I\'m just regular\\n");\n#endif\n\n// \u6761\u4ef6\u52a0\u8f7d\n#ifdef MAVIS\n  #include "foo.h"\n  #define STABLES 1\n#else\n  #include "bar.h"\n  #define STABLES 2\n#endif\n\n\n#ifdef FOO\n// \u7b49\u540c\u4e8e\n#if defined FOO\n\n\n#if defined IBMPC\n  #include "ibmpc.h"\n#elif defined MAC\n  #include "mac.h"\n#else\n  #include "general.h"\n#endif\n\n\n#ifndef MYHEADER_H\n  #define MYHEADER_H\n  #include "myheader.h"\n#endif\n```'},XM5s:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u8f93\u5165\u8f93\u51fa(IO)\n---"},XYPJ:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6cdb\u578b\n---\n"},XmS6:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6811\n---\n"},Xpkq:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: WebAssembly\n---\n"},YLMf:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport "fmt"\n\nfunc sum(nums ...int) {\n    fmt.Print(nums, " ")\n    total := 0\n    for _, num := range nums {\n        total += num\n    }\n    fmt.Println(total)\n}\n\nfunc main() {\n\n    sum(1, 2)\n    sum(1, 2, 3)\n\n    nums := []int{1, 2, 3, 4}\n    sum(nums...)\n}\n```\n\n```sh\ngo run variadic-functions.go\n[1 2] 3\n[1 2 3] 6\n[1 2 3 4] 10\n```\n'},Yaas:function(n,t,e){"use strict";e.r(t),t.default='- \u5e76\u53d1\u7f16\u7a0b\uff08Concurrent programming\uff09\uff0c\u4ee3\u8868\u7a0b\u5e8f\u7684\u4e0d\u540c\u90e8\u5206\u76f8\u4e92\u72ec\u7acb\u7684\u6267\u884c\uff0c\n- \u5e76\u884c\u7f16\u7a0b\uff08parallel programming\uff09\u4ee3\u8868\u7a0b\u5e8f\u4e0d\u540c\u90e8\u5206\u4e8e\u540c\u65f6\u6267\u884c\uff0c\n\n\u8fd0\u884c\u65f6 \u4ee3\u8868\u4e8c\u8fdb\u5236\u6587\u4ef6\u4e2d\u5305\u542b\u7684\u7531\u8bed\u8a00\u81ea\u8eab\u63d0\u4f9b\u7684\u4ee3\u7801\uff0c\u4efb\u4f55\u975e\u6c47\u7f16\u8bed\u8a00\u90fd\u4f1a\u6709\u4e00\u5b9a\u6570\u91cf\u7684\u8fd0\u884c\u65f6\u4ee3\u7801\u3002\n\u901a\u5e38\u4eba\u4eec\u8bf4\u4e00\u4e2a\u8bed\u8a00 \u201c\u6ca1\u6709\u8fd0\u884c\u65f6\u201d\uff0c\u4e00\u822c\u610f\u5473\u7740 \u201c\u5c0f\u8fd0\u884c\u65f6\u201d\u3002\n\u66f4\u5c0f\u7684\u8fd0\u884c\u65f6\u62e5\u6709\u66f4\u5c11\u7684\u529f\u80fd\u4e0d\u8fc7\u5176\u4f18\u52bf\u5728\u4e8e\u66f4\u5c0f\u7684\u4e8c\u8fdb\u5236\u8f93\u51fa\uff0c\u8fd9\u4f7f\u5176\u6613\u4e8e\u5728\u66f4\u591a\u4e0a\u4e0b\u6587\u4e2d\u4e0e\u5176\u4ed6\u8bed\u8a00\u76f8\u7ed3\u5408\u3002\n\n## \u4f7f\u7528 spawn \u521b\u5efa\u65b0\u7ebf\u7a0b\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    // \u5f53\u4e3b\u7ebf\u7a0b\u7ed3\u675f\u65f6\uff0c\u65b0\u7ebf\u7a0b\u4e5f\u4f1a\u7ed3\u675f\uff0c\u800c\u4e0d\u7ba1\u5176\u662f\u5426\u6267\u884c\u5b8c\u6bd5\n    thread::spawn(|| {\n        for i in 1..10 {\n            println!("hi number {} from the spawned thread!", i);\n            // thread::sleep \u8c03\u7528\u5f3a\u5236\u7ebf\u7a0b\u505c\u6b62\u6267\u884c\u4e00\u5c0f\u6bb5\u65f6\u95f4\uff0c\u8fd9\u4f1a\u5141\u8bb8\u5176\u4ed6\u4e0d\u540c\u7684\u7ebf\u7a0b\u8fd0\u884c\u3002\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    for i in 1..5 {\n        println!("hi number {} from the main thread!", i);\n        thread::sleep(Duration::from_millis(1));\n    }\n}\n```\n\n## \u4f7f\u7528 join \u7b49\u5f85\u6240\u6709\u7ebf\u7a0b\u7ed3\u675f\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        for i in 1..10 {\n            println!("hi number {} from the spawned thread!", i);\n            thread::sleep(Duration::from_millis(1));\n        }\n    });\n\n    for i in 1..5 {\n        println!("hi number {} from the main thread!", i);\n        thread::sleep(Duration::from_millis(1));\n    }\n\n    // \u901a\u8fc7\u8c03\u7528 handle \u7684 join \u4f1a\u963b\u585e\u5f53\u524d\u7ebf\u7a0b\u76f4\u5230 handle \u6240\u4ee3\u8868\u7684\u7ebf\u7a0b\u7ed3\u675f\u3002\n    handle.join().unwrap();\n}\n```\n\n## \u7ebf\u7a0b\u4e0e move \u95ed\u5305\n\n```rust\nuse std::thread;\n\nfn main() {\n    let v = vec![1, 2, 3];\n\n    // \u589e\u52a0 move \u5173\u952e\u5b57\uff0c\u5f3a\u5236\u95ed\u5305\u83b7\u53d6\u5176\u4f7f\u7528\u7684\u503c\u7684\u6240\u6709\u6743\n    // move \u5173\u952e\u5b57\u8986\u76d6\u4e86 Rust \u9ed8\u8ba4\u4fdd\u5b88\u7684\u501f\u7528\uff0c\u4f46\u5b83\u4e0d\u5141\u8bb8\u6211\u4eec\u8fdd\u53cd\u6240\u6709\u6743\u89c4\u5219\n    let handle = thread::spawn(move || {\n        println!("Here\'s a vector: {:?}", v);\n    });\n\n    handle.join().unwrap();\n}\n```\n'},YcHH:function(n,t,e){"use strict";e.r(t),t.default='# \u63a5\u53e3\u5b8c\u6574\u6027\u68c0\u67e5\n\n```go\ntype Shape interface {\n    Sides() int\n    Area() int\n}\ntype Square struct {\n    len int\n}\nfunc (s* Square) Sides() int {\n    return 4\n}\nfunc main() {\n    s := Square{len: 5}\n    fmt.Printf("%d\\n",s.Sides())\n}\n\n// \u58f0\u660e\u4e00\u4e2a _ \u53d8\u91cf\uff08\u6ca1\u4eba\u7528\uff09\uff0c\n// \u5176\u4f1a\u628a\u4e00\u4e2a nil \u7684\u7a7a\u6307\u9488\uff0c\u4ece Square \u8f6c\u6210 Shape\uff0c\n// \u8fd9\u6837\uff0c\u5982\u679c\u6ca1\u6709\u5b9e\u73b0\u5b8c\u76f8\u5173\u7684\u63a5\u53e3\u65b9\u6cd5\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u62a5\u9519\nvar _ Shape = (*Square)(nil)\n```\n'},Z8d1:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5b57\u7b26\u4e32\u66ff\u6362\n---\n"},ZBqn:function(n,t,e){"use strict";e.r(t),t.default='```js\n// Math.random()\u8fd4\u56de0\u52301\u4e4b\u95f4\u7684\u4e00\u4e2a\u4f2a\u968f\u673a\u6570\uff0c\u53ef\u80fd\u7b49\u4e8e0\uff0c\u4f46\u662f\u4e00\u5b9a\u5c0f\u4e8e1\u3002\nMath.random(); // 0.7151307314634323\n\n// \u4efb\u610f\u8303\u56f4\u7684\u968f\u673a\u6570\u751f\u6210\u51fd\u6570\nfunction getRandomArbitrary(min, max) {\n  return Math.random() * (max - min) + min;\n}\ngetRandomArbitrary(1.5, 6.5);\n// 2.4942810038223864\n\n// \u4efb\u610f\u8303\u56f4\u7684\u968f\u673a\u6574\u6570\u751f\u6210\u51fd\u6570\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\ngetRandomInt(1, 6); // 5\n\n// \u8fd4\u56de\u968f\u673a\u5b57\u7b26\u7684\u4f8b\u5b50\nfunction random_str(length) {\n  var ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n  ALPHABET += "abcdefghijklmnopqrstuvwxyz";\n  ALPHABET += "0123456789-_";\n  var str = "";\n  for (var i = 0; i < length; ++i) {\n    var rand = Math.floor(Math.random() * ALPHABET.length);\n    str += ALPHABET.substring(rand, rand + 1);\n  }\n  return str;\n}\nrandom_str(6); // "NdQKOr"\n\n// \u8fd4\u56de\u968f\u673a\u5b57\u7b26\u53e6\u4e00\u4e2a\u5b9e\u73b0\nconst str = "abcdefghijklmnopqrstuvwxyz9876543210";\nconst l = 6;\n// [...Array(l)].map(()=>str.charAt(Math.floor(Math.random() * str.length))).join(\'\');\n[...Array(l)].map(() => str[~~(Math.random() * str.length)]).join("");\n```\n\n## \u751f\u6210\u968f\u673a\u5b57\u7b26\u4e32\n\n```js\n// \u8fd4\u56de\u968f\u673a\u5b57\u7b26\u7684\u4f8b\u5b50\nfunction random_str(length) {\n  var ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n  ALPHABET += "abcdefghijklmnopqrstuvwxyz";\n  ALPHABET += "0123456789-_";\n  var str = "";\n  for (var i = 0; i < length; ++i) {\n    var rand = Math.floor(Math.random() * ALPHABET.length);\n    str += ALPHABET.substring(rand, rand + 1);\n  }\n  return str;\n}\nrandom_str(6); // "NdQKOr"\n\n// \u8fd4\u56de\u968f\u673a\u5b57\u7b26\u53e6\u4e00\u4e2a\u5b9e\u73b0\nconst str = "abcdefghijklmnopqrstuvwxyz9876543210";\nconst l = 6;\n// [...Array(l)].map(()=>str.charAt(Math.floor(Math.random() * str.length))).join(\'\');\n[...Array(l)].map(() => str[~~(Math.random() * str.length)]).join("");\n```\n'},ZBzs:function(n,t,e){"use strict";e.r(t),t.default="```dart\nassert(math.max(1, 1000) == 1000);\nassert(math.min(1, -1000) == -1000);\n```\n"},ZKeL:function(n,t,e){"use strict";e.r(t),t.default='```go\nfunc convert(s string, numRows int) string {\n    if numRows == 1 {\n        return s\n    }\n    var a []string\n    l := 0\n    front := true\n    for i,c := range s {\n        if i < numRows {\n            a = append(a,string(c))\n        } else {\n            a[l] += string(c)\n        }\n        if l==numRows-1 {\n            front = false\n        }\n        if l==0 {\n            front = true\n        }\n        if front {\n            l++\n        } else {\n            l--\n        }\n    }\n    str := ""\n    for _,item := range a {\n        str += item\n    }\n    return str\n}\n```\n\n```go\nfunc convert(s string, numRows int) string {\n\n    if numRows == 1 || len(s) <= numRows {\n        return s\n    }\n\n    gLength := 2*numRows - 2\n    res := make([]byte,0,len(s))\n    for row := 0; row < numRows; row++ {\n        l := row\n        r := gLength - row\n        for {\n            if l >= len(s) {\n                break\n            }\n            res = append(res,s[l])\n            l+=gLength\n\n            if row != 0 && row != numRows-1 {\n                if r >= len(s) {\n                    break\n                }\n                res = append(res,s[r])\n                r+=gLength\n            }\n        }\n    }\n\n    return string(res)\n}\n```\n'},ZLxG:function(n,t,e){"use strict";e.r(t),t.default="```sh\ngo fmt <\u6587\u4ef6\u540d>.go\n# go fmt\u662fgofmt\u7684\u4e0a\u5c42\u4e00\u4e2a\u5305\u88c5\u7684\u547d\u4ee4\ngofmt\n```\n"},ZhtH:function(n,t,e){"use strict";e.r(t),t.default='## Channel \u7ba1\u7406\n\n```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// Channel\u8f6c\u53d1\u51fd\u6570\nfunc echo(nums []int) <-chan int {\n\tout := make(chan int)\n\tgo func() {\n\t\tfor _, n := range nums {\n\t\t\tout <- n\n\t\t}\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\n// \u5e73\u65b9\u51fd\u6570\nfunc sq(in <-chan int) <-chan int {\n\tout := make(chan int)\n\tgo func() {\n\t\tfor n := range in {\n\t\t\tout <- n * n\n\t\t}\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\n// \u8fc7\u6ee4\u5947\u6570\u51fd\u6570\nfunc odd(in <-chan int) <-chan int {\n\tout := make(chan int)\n\tgo func() {\n\t\tfor n := range in {\n\t\t\tif n%2 != 0 {\n\t\t\t\tout <- n\n\t\t\t}\n\t\t}\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\n// \u6c42\u548c\u51fd\u6570\nfunc sum(in <-chan int) <-chan int {\n\tout := make(chan int)\n\tgo func() {\n\t\tvar sum = 0\n\t\tfor n := range in {\n\t\t\tsum += n\n\t\t}\n\t\tout <- sum\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\nfunc main() {\n\tvar nums = []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tfor n := range sum(sq(odd(echo(nums)))) {\n\t\tfmt.Println(n)\n\t}\n}\n```\n\n\u4f7f\u7528\u4e00\u4e2a\u4ee3\u7406\u51fd\u6570\u6765\u5b8c\u6210\n\n```go\n// ...\n\ntype EchoFunc func([]int) <-chan int\ntype PipeFunc func(<-chan int) <-chan int\n\nfunc pipeline(nums []int, echo EchoFunc, pipeFns ...PipeFunc) <-chan int {\n\tch := echo(nums)\n\tfor i := range pipeFns {\n\t\tch = pipeFns[i](ch)\n\t}\n\treturn ch\n}\n\nfunc main() {\n\tvar nums = []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tfor n := range pipeline(nums, echo, odd, sq, sum) {\n\t\tfmt.Println(n)\n\t}\n}\n```\n\n## Fan in/Out\n\n\u901a\u8fc7\u5e76\u53d1\u7684\u65b9\u5f0f\u6765\u5bf9\u4e00\u4e2a\u5f88\u957f\u7684\u6570\u7ec4\u4e2d\u7684\u8d28\u6570\u8fdb\u884c\u6c42\u548c\u8fd0\u7b97\uff0c\n\u6211\u4eec\u60f3\u5148\u628a\u6570\u7ec4\u5206\u6bb5\u6c42\u548c\uff0c\u7136\u540e\u518d\u628a\u5176\u96c6\u4e2d\u8d77\u6765\u3002\n\n```go\npackage main\n\nimport (\n\t"fmt"\n\t"math"\n\t"sync"\n)\n\nfunc echo(nums []int) <-chan int {\n\tout := make(chan int)\n\tgo func() {\n\t\tfor _, n := range nums {\n\t\t\tout <- n\n\t\t}\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\nfunc sum(in <-chan int) <-chan int {\n\tout := make(chan int)\n\tgo func() {\n\t\tvar sum = 0\n\t\tfor n := range in {\n\t\t\tsum += n\n\t\t}\n\t\tout <- sum\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\nfunc is_prime(value int) bool {\n    // \u975e\u7d20\u4e66\uff0c\u7ea6\u6570\u6700\u5c0f\u662f2,\u53e6\u4e00\u4e2a\u7ea6\u6570\u6700\u5927\u662fvalue/2\n    // \u56e0\u6b64\u8fed\u4ee3\u9a8c\u8bc1\u5230value/2\u5373\u53ef\n\tfor i := 2; i <= int(math.Floor(float64(value)/2)); i++ {\n\t\tif value%i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn value > 1\n}\n\nfunc prime(in <-chan int) <-chan int {\n\tout := make(chan int)\n\tgo func() {\n\t\tfor n := range in {\n\t\t\tif is_prime(n) {\n\t\t\t\tout <- n\n\t\t\t}\n\t\t}\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\nfunc makeRange(min, max int) []int {\n\ta := make([]int, max-min+1)\n\tfor i := range a {\n\t\ta[i] = min + i\n\t}\n\treturn a\n}\n\n// cs \u662f sum \u91cc\u9762\u5b9a\u4e49\u7684 channel \u5217\u8868\nfunc merge(cs []<-chan int) <-chan int {\n\tvar wg sync.WaitGroup\n\tout := make(chan int)\n\n\twg.Add(len(cs))\n\tfor _, c := range cs {\n\t\tgo func(c <-chan int) {\n\t\t\tfor n := range c {\n\t\t\t\tout <- n\n\t\t\t}\n\t\t\twg.Done()\n\t\t}(c)\n\t}\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(out)\n\t}()\n\treturn out\n}\n\nfunc main() {\n\tnums := makeRange(1, 10000) // \u751f\u62101-10000\u7684\u6570\u7ec4\n\tin := echo(nums)            // \u5c06\u6570\u7ec4\u653e\u5230\u4e00\u4e2ago\u7a0b\u7684channel\n\n\tconst nProcess = 5             // \u5e76\u53d1\u6570\u91cf\n\tvar chans [nProcess]<-chan int // \u521d\u59cb\u53165\u4e2achannel\n\tfor i := range chans {\n\t\t// \u4ece in \u53d6\u6570\u636e\uff0c\u5e76\u8fde\u7eed\u6267\u884c Pipeline \u51fd\u6570\uff08prime\u8fc7\u6ee4\uff0csum\u6c42\u548c\uff09\uff0c\u5e76\u5c06\u7ed3\u679c\u653e\u8fdb channel\n\t\t// \u8fd4\u56de\u7684 channel \u662f sum \u91cc\u9762\u5b9a\u4e49\u7684\n\t\tchans[i] = sum(prime(in))\n\t}\n\n\t// merge \u5176\u5b9e\u548c echo \u51fd\u6570\u7c7b\u4f3c\u7684\u505a\u7528\n\t// echo \u662f\u5c06\u5217\u8868\u7684\u6570\u636e\u653e\u5230\u4e00\u4e2a channel\n\t// merge \u662f\u5c06\u4e0d\u540c\u7684 channel \u7684\u6570\u636e \u5408\u5e76\u5230\u4e00\u4e2a channel\n\t// \u7136\u540e\u5c31\u53ef\u4ee5\u518d\u6b21\u8c03\u7528 sum \u51fd\u6570\n\tfor n := range sum(merge(chans[:])) {\n\t\tfmt.Println(n)\n\t}\n}\n```\n'},ZwSQ:function(n,t,e){"use strict";e.r(t),t.default="```sh\n>>> import fibo, sys\n>>> dir(fibo)\n['__name__', 'fib', 'fib2']\n>>> dir(sys)\n['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__',\n '__package__', '__stderr__', '__stdin__', '__stdout__',\n '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',\n '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv',\n 'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder',\n 'call_tracing', 'callstats', 'copyright', 'displayhook',\n 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',\n 'executable', 'exit', 'flags', 'float_info', 'float_repr_style',\n 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',\n 'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',\n 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount',\n 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',\n 'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path',\n 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',\n 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit',\n 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout',\n 'thread_info', 'version', 'version_info', 'warnoptions']\n\n# \u5982\u679c\u6ca1\u6709\u53c2\u6570\uff0cdir() \u4f1a\u5217\u51fa\u4f60\u5f53\u524d\u5b9a\u4e49\u7684\u540d\u79f0:\n>>> a = [1, 2, 3, 4, 5]\n>>> import fibo\n>>> fib = fibo.fib\n>>> dir()\n['__builtins__', '__name__', 'a', 'fib', 'fibo', 'sys']\n\n# dir() \u4e0d\u4f1a\u5217\u51fa\u5185\u7f6e\u51fd\u6570\u548c\u53d8\u91cf\u7684\u540d\u79f0\u3002\u5982\u679c\u4f60\u60f3\u8981\u8fd9\u4e9b\uff0c\u5b83\u4eec\u7684\u5b9a\u4e49\u662f\u5728\u6807\u51c6\u6a21\u5757 builtins \u4e2d:\n>>> import builtins\n>>> dir(builtins)\n['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException',\n 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning',\n 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError',\n 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning',\n 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False',\n 'FileExistsError', 'FileNotFoundError', 'FloatingPointError',\n 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError',\n 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError',\n 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError',\n 'MemoryError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented',\n 'NotImplementedError', 'OSError', 'OverflowError',\n 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError',\n 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning',\n 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError',\n 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError',\n 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError',\n 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning',\n 'ValueError', 'Warning', 'ZeroDivisionError', '_', '__build_class__',\n '__debug__', '__doc__', '__import__', '__name__', '__package__', 'abs',\n 'all', 'any', 'ascii', 'bin', 'bool', 'bytearray', 'bytes', 'callable',\n 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits',\n 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit',\n 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr',\n 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass',\n 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview',\n 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property',\n 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice',\n 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars',\n 'zip']\n```\n"},ZySJ:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6df1\u5ea6\u6bd4\u8f83\n---\n"},aBk0:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5b57\u7b26\u4e32\u67e5\u627e\n---\n"},"aLu/":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u4f5c\u7528\u57df\n---\n"},"b+Si":function(n,t,e){"use strict";e.r(t),t.default="```dart\nimport 'dart:math' as math;\n\nprint(math.E);     // 2.718281828459045\nprint(math.PI);    // 3.141592653589793\nprint(math.SQRT2); // 1.4142135623730951\n```\n"},b3jx:function(n,t,e){"use strict";e.r(t),t.default='## \u5355\u94fe\u8868\n\n```go\npackage main\n\nimport "fmt"\n\ntype List[T any] struct {\n    head, tail *element[T]\n}\n\ntype element[T any] struct {\n    next *element[T]\n    val  T\n}\n\nfunc (lst *List[T]) Push(v T) {\n    if lst.tail == nil {\n        lst.head = &element[T]{val: v}\n        lst.tail = lst.head\n    } else {\n        lst.tail.next = &element[T]{val: v}\n        lst.tail = lst.tail.next\n    }\n}\n\nfunc (lst *List[T]) GetAll() []T {\n    var elems []T\n    for e := lst.head; e != nil; e = e.next {\n        elems = append(elems, e.val)\n    }\n    return elems\n}\n\nfunc main() {\n    lst := List[int]{}\n    lst.Push(10)\n    lst.Push(13)\n    lst.Push(23)\n    fmt.Println("list:", lst.GetAll()) // list: [10 13 23]\n}\n```\n\n## \u8ba1\u7b97\u94fe\u8868\u6570\u636e\u4e4b\u548c\n\n```go\n// An IntList is a linked list of integers.\n// A nil *IntList represents the empty list.\ntype IntList struct {\n    Value int\n    Tail  *IntList\n}\n// Sum returns the sum of the list elements.\nfunc (list *IntList) Sum() int {\n    if list == nil {\n        return 0\n    }\n    return list.Value + list.Tail.Sum()\n}\n```\n'},bAeQ:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// BubbleSort \u5192\u6ce1\u6392\u5e8f\n// \u8fed\u4ee3\u6bd4\u8f83\u76f8\u90bb\u5143\u7d20\u5927\u5c0f\uff0c\u5982\u679c\u5927\u7684\u5728\u524d\uff0c\u5219\u4e92\u6362\u4f4d\u7f6e\n// \u76f4\u5230\u65e0\u9700\u4ea4\u6362\u4f4d\u7f6e\uff0c\u8bf4\u660e\u5df2\u7ecf\u6392\u5e8f\u5b8c\u6210\nfunc BubbleSort(arr []int) []int {\n\tfor {\n\t\tdone := true // \u662f\u5426\u6392\u5e8f\u5b8c\u6210\u6807\u5fd7\n\t\tfor i := 0; i < len(arr)-1; i++ {\n\t\t\tif arr[i] > arr[i+1] {\n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i] // \u4ea4\u6362\u76f8\u90bb\u5143\u7d20\n\t\t\t\tdone = false\n\t\t\t}\n\t\t}\n\t\tif done {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn arr\n}\n\nfunc main() {\n\ta := []int{3, 6, 7, 4, 5, 1, 2}\n\tfmt.Println(BubbleSort(a))\n}\n```\n\n```go\n// \u6539\u8fdb\u7248\npackage main\n\nimport (\n\t"fmt"\n)\n\n// BubbleSort \u5192\u6ce1\u6392\u5e8f\n// \u8fed\u4ee3\u6bd4\u8f83\u76f8\u90bb\u5143\u7d20\u5927\u5c0f\uff0c\u5982\u679c\u5927\u7684\u5728\u524d\uff0c\u5219\u4e92\u6362\u4f4d\u7f6e\n// \u76f4\u5230\u65e0\u9700\u4ea4\u6362\u4f4d\u7f6e\uff0c\u8bf4\u660e\u5df2\u7ecf\u6392\u5e8f\u5b8c\u6210\nfunc BubbleSort(arr []int) []int {\n\tj := 0 // \u8bb0\u5f55\u8fed\u4ee3\u6b21\u6570\n\tfor {\n\t\tj++\n\t\tdone := true // \u662f\u5426\u6392\u5e8f\u5b8c\u6210\u6807\u5fd7\n\t\tfor i := 0; i < len(arr)-j; i++ {\n\t\t\tif arr[i] > arr[i+1] {\n\t\t\t\tarr[i], arr[i+1] = arr[i+1], arr[i] // \u4ea4\u6362\u76f8\u90bb\u5143\u7d20\n\t\t\t\tdone = false\n\t\t\t}\n\t\t}\n\t\tif done {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn arr\n}\n\nfunc main() {\n\ta := []int{3, 6, 7, 4, 5, 1, 2}\n\tfmt.Println(BubbleSort(a))\n}\n```\n'},bGs6:function(n,t,e){"use strict";e.r(t),t.default='```js\n"Hello World".toLowerCase();\n// "hello world"\n\n"Hello World".toUpperCase();\n// "HELLO WORLD"\n```\n'},bOyB:function(n,t,e){"use strict";e.r(t),t.default='Go \u53ea\u6709\u4e00\u79cd\u5faa\u73af\u7ed3\u6784\uff1afor \u5faa\u73af\u3002\n\u521d\u59cb\u5316\u8bed\u53e5\u901a\u5e38\u4e3a\u4e00\u53e5\u77ed\u53d8\u91cf\u58f0\u660e\uff0c\u8be5\u53d8\u91cf\u58f0\u660e\u4ec5\u5728 for \u8bed\u53e5\u7684\u4f5c\u7528\u57df\u4e2d\u53ef\u89c1\u3002\n\n- \u521d\u59cb\u5316\u8bed\u53e5\uff1a\u5728\u7b2c\u4e00\u6b21\u8fed\u4ee3\u524d\u6267\u884c\n- \u6761\u4ef6\u8868\u8fbe\u5f0f\uff1a\u5728\u6bcf\u6b21\u8fed\u4ee3\u524d\u6c42\u503c\n- \u540e\u7f6e\u8bed\u53e5\uff1a\u5728\u6bcf\u6b21\u8fed\u4ee3\u7684\u7ed3\u5c3e\u6267\u884c\n\n\u548c C\u3001Java\u3001JavaScript \u4e4b\u7c7b\u7684\u8bed\u8a00\u4e0d\u540c\uff0c\nGo \u7684 for \u8bed\u53e5\u540e\u9762\u7684\u4e09\u4e2a\u6784\u6210\u90e8\u5206\u5916\u6ca1\u6709\u5c0f\u62ec\u53f7\uff0c \u5927\u62ec\u53f7 { } \u5219\u662f\u5fc5\u987b\u7684\u3002\n\n```go\n// \u5982\u540cC\u7684for\u5faa\u73af\nfor init; condition; post { }\n\n// \u5982\u540cC\u7684while\u5faa\u73af\nfor condition { }\n\n// \u5982\u540cC\u7684for(;;)\u5faa\u73af\nfor { }\n\n\npackage main\nimport "fmt"\nfunc main() {\n  sum := 1\n  for i := 0; i < 10; i++ {\n    sum *= 2\n  }\n  fmt.Println(sum) // 1024\n}\n\n\n// \u521d\u59cb\u5316\u8bed\u53e5\u548c\u540e\u7f6e\u8bed\u53e5\u662f\u53ef\u9009\u7684\u3002\n// \u76f8\u5f53\u4e8ewhile\u5faa\u73af\npackage main\nimport "fmt"\nfunc main() {\n  sum := 1\n  for ; sum < 1000; {\n    sum += sum\n  }\n  fmt.Println(sum) // 1024\n}\n\n// for \u662f Go \u4e2d\u7684 \u201cwhile\u201d\npackage main\nimport "fmt"\nfunc main() {\n  sum := 1\n  for sum < 1000 {\n    sum += sum\n  }\n  fmt.Println(sum)\n}\n\n// \u65e0\u9650\u5faa\u73af\n// \u5982\u679c\u7701\u7565\u5faa\u73af\u6761\u4ef6\uff0c\u8be5\u5faa\u73af\u5c31\u4e0d\u4f1a\u7ed3\u675f\npackage main\nfunc main() {\n  for {\n    // ...\n  }\n}\n\n\n// \u7528\u725b\u987f\u6cd5\u5b9e\u73b0\u5e73\u65b9\u6839\u51fd\u6570\npackage main\nimport (\n  "fmt"\n)\nfunc Sqrt(x float64) float64 {\n  z := 1.8\n  for n:=0; n<10; n++ {\n    fmt.Println(z)\n    z -= (z*z - x) / (2*z)\n  }\n  return z\n}\nfunc main() {\n  fmt.Println(Sqrt(2))\n}\n// 1.8\n// 1.4555555555555555\n// 1.4148006785411367\n// 1.4142136841942816\n// 1.4142135623731005\n// 1.414213562373095\n// 1.4142135623730951\n// 1.414213562373095\n// 1.4142135623730951\n// 1.414213562373095\n// 1.4142135623730951\n\n\n// range \u5b50\u53e5\u80fd\u591f\u5e2e\u4f60\u8f7b\u677e\u5b9e\u73b0\u5faa\u73af\nfor key, value := range oldMap {\n  newMap[key] = value\n}\n\n// \u89e3\u6790UTF-8\uff0c \u5c06\u6bcf\u4e2a\u72ec\u7acb\u7684Unicode\u7801\u70b9\u5206\u79bb\u51fa\u6765\nfor pos, char := range "\u65e5\u672c\\x80\u8a9e" { // \\x80 \u662f\u4e2a\u975e\u6cd5\u7684UTF-8\u7f16\u7801\n  fmt.Printf("\u5b57\u7b26 %#U \u59cb\u4e8e\u5b57\u8282\u4f4d\u7f6e %d\\n", char, pos)\n}\n\n// \u53cd\u8f6c a\nfor i, j := 0, len(a)-1; i < j; i, j = i+1, j-1 {\n  a[i], a[j] = a[j], a[i]\n}\n```\n'},bbiv:function(n,t,e){"use strict";e.r(t),t.default='\u6a21\u5f0f\u7531\u5982\u4e0b\u4e00\u4e9b\u5185\u5bb9\u7ec4\u5408\u800c\u6210\uff1a\n\n- \u5b57\u9762\u91cf\n- \u89e3\u6784\u7684\u6570\u7ec4\u3001\u679a\u4e3e\u3001\u7ed3\u6784\u4f53\u6216\u8005\u5143\u7ec4\n- \u53d8\u91cf\n- \u901a\u914d\u7b26\n- \u5360\u4f4d\u7b26\n\n## \u53ef\u80fd\u4f1a\u7528\u5230\u6a21\u5f0f\u7684\u4f4d\u7f6e\n\n```rust\n// match \u5206\u652f\nmatch VALUE {\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n    PATTERN => EXPRESSION,\n}\n\n\n// if let \u6761\u4ef6\u8868\u8fbe\u5f0f\nlet favorite_color: Option<&str> = None;\nlet is_tuesday = false;\nlet age: Result<u8, _> = "34".parse();\nif let Some(color) = favorite_color {\n    println!("Using your favorite color, {}, as the background", color);\n} else if is_tuesday {\n    println!("Tuesday is green day!");\n} else if let Ok(age) = age {\n    if age > 30 {\n        println!("Using purple as the background color");\n    } else {\n        println!("Using orange as the background color");\n    }\n} else {\n    println!("Using blue as the background color");\n}\n\n\n// while let \u6761\u4ef6\u5faa\u73af\nlet mut stack = Vec::new();\nstack.push(1);\nstack.push(2);\nstack.push(3);\nwhile let Some(top) = stack.pop() {\n    println!("{}", top);\n}\n\n\n// for \u5faa\u73af\nlet v = vec![\'a\', \'b\', \'c\'];\nfor (index, value) in v.iter().enumerate() {\n    println!("{} is at index {}", value, index);\n}\n\n\n// let \u8bed\u53e5\nlet x = 5;\nlet (x, y, z) = (1, 2, 3);\n\n\n// \u51fd\u6570\u53c2\u6570\nfn foo(x: i32) {\n    // \u4ee3\u7801\n}\n\n// \u51fd\u6570\u53c2\u6570\nfn print_coordinates(&(x, y): &(i32, i32)) {\n    println!("Current location: ({}, {})", x, y);\n}\nfn main() {\n    let point = (3, 5);\n    print_coordinates(&point);\n}\n```\n\n## \u6a21\u5f0f\u8bed\u6cd5\n\n```rust\n// \u5339\u914d\u5b57\u9762\u91cf\nlet x = 1;\nmatch x {\n    1 => println!("one"),\n    2 => println!("two"),\n    3 => println!("three"),\n    _ => println!("anything"),\n}\n\n\n// \u5339\u914d\u547d\u540d\u53d8\u91cf\nfn main() {\n    let x = Some(5);\n    let y = 10;\n    match x {\n        Some(50) => println!("Got 50"),\n        Some(y) => println!("Matched, y = {:?}", y),\n        _ => println!("Default case, x = {:?}", x),\n    }\n    println!("at the end: x = {:?}, y = {:?}", x, y);\n}\n\n\n// \u591a\u4e2a\u6a21\u5f0f\nlet x = 1;\nmatch x {\n    1 | 2 => println!("one or two"),\n    3 => println!("three"),\n    _ => println!("anything"),\n}\n\n\n// \u901a\u8fc7 ..= \u5339\u914d\u503c\u7684\u8303\u56f4\nlet x = 5;\nmatch x {\n    1..=5 => println!("one through five"),\n    _ => println!("something else"),\n}\n\n\n// \u89e3\u6784\u5e76\u5206\u89e3\u503c\nstruct Point {\n    x: i32,\n    y: i32,\n}\nlet p = Point { x: 0, y: 7 };\nlet Point { x: a, y: b } = p;\nassert_eq!(0, a);\nassert_eq!(7, b);\n\n//  \u4f7f\u7528\u7ed3\u6784\u4f53\u5b57\u6bb5\u7b80\u5199\u6765\u89e3\u6784\u7ed3\u6784\u4f53\u5b57\u6bb5\nstruct Point {\n    x: i32,\n    y: i32,\n}\nlet p = Point { x: 0, y: 7 };\nlet Point { x, y } = p;\nassert_eq!(0, x);\nassert_eq!(7, y);\n\n// \u89e3\u6784\u548c\u5339\u914d\u6a21\u5f0f\u4e2d\u7684\u5b57\u9762\u91cf\nlet p = Point { x: 0, y: 7 };\nmatch p {\n    Point { x, y: 0 } => println!("On the x axis at {}", x),\n    Point { x: 0, y } => println!("On the y axis at {}", y),\n    Point { x, y } => println!("On neither axis: ({}, {})", x, y),\n}\n\n\n// \u89e3\u6784\u679a\u4e3e\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\nlet msg = Message::ChangeColor(0, 160, 255);\nmatch msg {\n    Message::Quit => {\n        println!("The Quit variant has no data to destructure.")\n    }\n    Message::Move { x, y } => {\n        println!(\n            "Move in the x direction {} and in the y direction {}",\n            x,\n            y\n        );\n    }\n    Message::Write(text) => println!("Text message: {}", text),\n    Message::ChangeColor(r, g, b) => {\n        println!(\n            "Change the color to red {}, green {}, and blue {}",\n            r,\n            g,\n            b\n        )\n    }\n}\n\n\n// \u89e3\u6784\u5d4c\u5957\u7684\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\nenum Color {\n   Rgb(i32, i32, i32),\n   Hsv(i32, i32, i32),\n}\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(Color),\n}\nfn main() {\n    let msg = Message::ChangeColor(Color::Hsv(0, 160, 255));\n    match msg {\n        Message::ChangeColor(Color::Rgb(r, g, b)) => {\n            println!(\n                "Change the color to red {}, green {}, and blue {}",\n                r,\n                g,\n                b\n            )\n        }\n        Message::ChangeColor(Color::Hsv(h, s, v)) => {\n            println!(\n                "Change the color to hue {}, saturation {}, and value {}",\n                h,\n                s,\n                v\n            )\n        }\n        _ => ()\n    }\n}\n\n\n// \u89e3\u6784\u7ed3\u6784\u4f53\u548c\u5143\u7ec4\nlet ((feet, inches), Point {x, y}) = ((3, 10), Point { x: 3, y: -10 });\n\n\n// \u4f7f\u7528 _ \u5ffd\u7565\u6574\u4e2a\u503c\nfn foo(_: i32, y: i32) {\n    println!("This code only uses the y parameter: {}", y);\n}\nfoo(3, 4);\n\n\n// \u4f7f\u7528\u5d4c\u5957\u7684 _ \u5ffd\u7565\u90e8\u5206\u503c\nlet mut setting_value = Some(5);\nlet new_setting_value = Some(10);\nmatch (setting_value, new_setting_value) {\n    (Some(_), Some(_)) => {\n        println!("Can\'t overwrite an existing customized value");\n    }\n    _ => {\n        setting_value = new_setting_value;\n    }\n}\nprintln!("setting is {:?}", setting_value);\n\n// \u5ffd\u7565\u5143\u7ec4\u7684\u591a\u4e2a\u90e8\u5206\nlet numbers = (2, 4, 8, 16, 32);\nmatch numbers {\n    (first, _, third, _, fifth) => {\n        println!("Some numbers: {}, {}, {}", first, third, fifth)\n    },\n}\n\n\n// \u53ea\u4f7f\u7528 _ \u548c\u4f7f\u7528\u4ee5\u4e0b\u5212\u7ebf\u5f00\u5934\u7684\u540d\u79f0\u6709\u4e9b\u5fae\u5999\u7684\u4e0d\u540c\uff1a\n// \u6bd4\u5982 _x \u4ecd\u4f1a\u5c06\u503c\u7ed1\u5b9a\u5230\u53d8\u91cf\uff0c\nlet s = Some(String::from("Hello!"));\nif let Some(_s) = s {\n    println!("found a string");\n}\nprintln!("{:?}", s); // \u9519\u8bef\n\n// \u800c _ \u5219\u5b8c\u5168\u4e0d\u4f1a\u7ed1\u5b9a\u3002\nlet s = Some(String::from("Hello!"));\nif let Some(_) = s {\n    println!("found a string");\n}\nprintln!("{:?}", s);\n\n\n// \u7528 .. \u5ffd\u7565\u5269\u4f59\u503c\nstruct Point {\n    x: i32,\n    y: i32,\n    z: i32,\n}\nlet origin = Point { x: 0, y: 0, z: 0 };\nmatch origin {\n    Point { x, .. } => println!("x is {}", x),\n}\n\n// \u53ea\u5339\u914d\u5143\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u503c\u5e76\u5ffd\u7565\u6389\u6240\u6709\u5176\u5b83\u503c\nlet numbers = (2, 4, 8, 16, 32);\nmatch numbers {\n    (first, .., last) => {\n        println!("Some numbers: {}, {}", first, last);\n    },\n}\n\n\n// \u5339\u914d\u5b88\u536b\u63d0\u4f9b\u7684\u989d\u5916\u6761\u4ef6\n// \u5339\u914d\u5b88\u536b\uff08match guard\uff09\u662f\u4e00\u4e2a\u6307\u5b9a\u4e8e match \u5206\u652f\u6a21\u5f0f\u4e4b\u540e\u7684\u989d\u5916 if \u6761\u4ef6\nlet num = Some(4);\nmatch num {\n    Some(x) if x < 5 => println!("less than five: {}", x),\n    Some(x) => println!("{}", x),\n    None => (),\n}\n\n// \u4f7f\u7528\u5339\u914d\u5b88\u536b\u6765\u6d4b\u8bd5\u4e0e\u5916\u90e8\u53d8\u91cf\u7684\u76f8\u7b49\u6027\nlet x = Some(5);\nlet y = 10;\nmatch x {\n    Some(50) => println!("Got 50"),\n    Some(n) if n == y => println!("Matched, n = {}", n),\n    _ => println!("Default case, x = {:?}", x),\n}\nprintln!("at the end: x = {:?}, y = {}", x, y);\n\n// \u7ed3\u5408\u591a\u4e2a\u6a21\u5f0f\u4e0e\u5339\u914d\u5b88\u536b\nlet x = 4;\nlet y = false;\nmatch x {\n    4 | 5 | 6 if y => println!("yes"),\n    _ => println!("no"),\n}\n\n\n// @ \u7ed1\u5b9a\n// at \u8fd0\u7b97\u7b26\uff08@\uff09\u5141\u8bb8\u6211\u4eec\u5728\u521b\u5efa\u4e00\u4e2a\u5b58\u653e\u503c\u7684\u53d8\u91cf\u7684\u540c\u65f6\u6d4b\u8bd5\u5176\u503c\u662f\u5426\u5339\u914d\u6a21\u5f0f\u3002\nenum Message {\n    Hello { id: i32 },\n}\nlet msg = Message::Hello { id: 5 };\nmatch msg {\n    // \u6d4b\u8bd5 Message::Hello \u7684 id \u5b57\u6bb5\u662f\u5426\u4f4d\u4e8e 3..=7 \u8303\u56f4\u5185\uff0c\n    // \u540c\u65f6\u4e5f\u5e0c\u671b\u80fd\u5c06\u5176\u503c\u7ed1\u5b9a\u5230 id_variable \u53d8\u91cf\u4e2d\n    Message::Hello { id: id_variable @ 3..=7 } => {\n        println!("Found an id in range: {}", id_variable)\n    },\n    // \u8fd9\u4e2a\u6a21\u5f0f\u7684\u4ee3\u7801\u5e76\u4e0d\u77e5\u60c5\u4e5f\u4e0d\u80fd\u4f7f\u7528 id \u5b57\u6bb5\u4e2d\u7684\u503c\uff0c\n    // \u56e0\u4e3a\u6ca1\u6709\u5c06 id \u503c\u4fdd\u5b58\u8fdb\u4e00\u4e2a\u53d8\u91cf\u3002\n    Message::Hello { id: 10..=12 } => {\n        println!("Found an id in another range")\n    },\n    Message::Hello { id } => {\n        println!("Found some other id: {}", id)\n    },\n}\n```\n'},"bd/4":function(n,t,e){"use strict";e.r(t),t.default='- \u53ef\u6062\u590d\u9519\u8bef `Result<T, E>`\n- \u4e0d\u53ef\u6062\u590d(\u9047\u5230\u9519\u8bef\u65f6\u505c\u6b62\u7a0b\u5e8f\u6267\u884c)\u9519\u8bef `panic!`\n\n## \u6807\u51c6\u8f93\u51fa/\u6807\u51c6\u9519\u8bef\n\n\u5927\u90e8\u5206\u7ec8\u7aef\u90fd\u63d0\u4f9b\u4e86\u4e24\u79cd\u8f93\u51fa\uff1a\n\n- \u6807\u51c6\u8f93\u51fa\uff08standard output\uff0c`stdout`\uff09\u5bf9\u5e94\u4e00\u822c\u4fe1\u606f\uff0c\n- \u6807\u51c6\u9519\u8bef\uff08standard error\uff0c`stderr`\uff09\u5219\u7528\u4e8e\u9519\u8bef\u4fe1\u606f\u3002\n\n\u8fd9\u79cd\u533a\u522b\u5141\u8bb8\u7528\u6237\u9009\u62e9\u5c06\u7a0b\u5e8f\u6b63\u5e38\u8f93\u51fa\u5b9a\u5411\u5230\u4e00\u4e2a\u6587\u4ef6\u4e2d\u5e76\u4ecd\u5c06\u9519\u8bef\u4fe1\u606f\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002\n\u4f46\u662f `println!` \u51fd\u6570\u53ea\u80fd\u591f\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u4f7f\u7528\u5176\u4ed6\u65b9\u6cd5\u6765\u6253\u5370\u5230\u6807\u51c6\u9519\u8bef\u3002\n\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 `eprintln!` \u5b8f\u6765\u6253\u5370\u5230\u6807\u51c6\u9519\u8bef\u6d41\u3002\n\n```rust\nfn main() {\n    let args: Vec<String> = env::args().collect();\n    let config = Config::new(&args).unwrap_or_else(|err| {\n        eprintln!("Problem parsing arguments: {}", err);\n        process::exit(1);\n    });\n    if let Err(e) = minigrep::run(config) {\n        eprintln!("Application error: {}", e);\n        process::exit(1);\n    }\n}\n```\n\n## \u5bf9\u5e94 panic \u65f6\u7684\u6808\u5c55\u5f00\u6216\u7ec8\u6b62\n\n```toml\n# Cargo.toml\n[profile.release]\npanic = \'abort\'\n```\n\n## \u4f7f\u7528 panic! \u7684 backtrace\n\n```sh\nRUST_BACKTRACE=1 cargo run\n```\n\n## Option \u548c unwrap\n\n```rust\n// \u5e73\u6c11\uff08commoner\uff09\u4eec\u89c1\u591a\u8bc6\u5e7f\uff0c\u6536\u5230\u4ec0\u4e48\u793c\u7269\u90fd\u80fd\u5e94\u5bf9\u3002\n// \u6240\u6709\u793c\u7269\u90fd\u663e\u5f0f\u5730\u4f7f\u7528 `match` \u6765\u5904\u7406\u3002\nfn give_commoner(gift: Option<&str>) {\n    // \u6307\u51fa\u6bcf\u79cd\u60c5\u51b5\u4e0b\u7684\u505a\u6cd5\u3002\n    match gift {\n        Some("snake") => println!("Yuck! I\'m throwing that snake in a fire."),\n        Some(inner)   => println!("{}? How nice.", inner),\n        None          => println!("No gift? Oh well."),\n    }\n}\n\n// \u517b\u5728\u6df1\u95fa\u4eba\u672a\u8bc6\u7684\u516c\u4e3b\u89c1\u5230\u86c7\u5c31\u4f1a `panic`\uff08\u6050\u614c\uff09\u3002\n// \u8fd9\u91cc\u6240\u6709\u7684\u793c\u7269\u90fd\u4f7f\u7528 `unwrap` \u9690\u5f0f\u5730\u5904\u7406\u3002\nfn give_princess(gift: Option<&str>) {\n    // `unwrap` \u5728\u63a5\u6536\u5230 `None` \u65f6\u5c06\u8fd4\u56de `panic`\u3002\n    let inside = gift.unwrap();\n    if inside == "snake" { panic!("AAAaaaaa!!!!"); }\n\n    println!("I love {}s!!!!!", inside);\n}\n\nfn main() {\n    let food  = Some("chicken");\n    let snake = Some("snake");\n    let void  = None;\n\n    give_commoner(food);\n    give_commoner(snake);\n    give_commoner(void);\n\n    let bird = Some("robin");\n    let nothing = None;\n\n    give_princess(bird);\n    give_princess(nothing);\n}\n```\n\n## \u4f7f\u7528 `?` \u89e3\u5f00 Option\n\n```rust\nfn next_birthday(current_age: Option<u8>) -> Option<String> {\n    // \u5982\u679c `current_age` \u662f `None`\uff0c\u8fd9\u5c06\u8fd4\u56de `None`\u3002\n    // \u5982\u679c `current_age` \u662f `Some`\uff0c\u5185\u90e8\u7684 `u8` \u5c06\u8d4b\u503c\u7ed9 `next_age`\u3002\n    let next_age: u8 = current_age?;\n    Some(format!("Next year I will be {}", next_age))\n}\n```\n\n```rust\nstruct Person {\n    job: Option<Job>,\n}\n\n#[derive(Clone, Copy)]\nstruct Job {\n    phone_number: Option<PhoneNumber>,\n}\n\n#[derive(Clone, Copy)]\nstruct PhoneNumber {\n    area_code: Option<u8>,\n    number: u32,\n}\n\nimpl Person {\n    // \u83b7\u53d6\u6b64\u4eba\u7684\u5de5\u4f5c\u7535\u8bdd\u53f7\u7801\u7684\u533a\u53f7\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\u3002\n    fn work_phone_area_code(&self) -> Option<u8> {\n        // \u6ca1\u6709`\uff1f`\u8fd0\u7b97\u7b26\u7684\u8bdd\uff0c\u8fd9\u5c06\u9700\u8981\u5f88\u591a\u7684\u5d4c\u5957\u7684 `match` \u8bed\u53e5\u3002\n        // \u8fd9\u5c06\u9700\u8981\u66f4\u591a\u4ee3\u7801\u2014\u2014\u5c1d\u8bd5\u81ea\u5df1\u7f16\u5199\u4e00\u4e0b\uff0c\u770b\u770b\u54ea\u4e2a\u66f4\u5bb9\u6613\u3002\n        self.job?.phone_number?.area_code\n    }\n}\n\nfn main() {\n    let p = Person {\n        job: Some(Job {\n            phone_number: Some(PhoneNumber {\n                area_code: Some(61),\n                number: 439222222,\n            }),\n        }),\n    };\n    assert_eq!(p.work_phone_area_code(), Some(61));\n}\n```\n\n## \u7ec4\u5408\u7b97\u5b50\uff1amap\n\n```rust\n#![allow(dead_code)]\n\n#[derive(Debug)] enum Food { Apple, Carrot, Potato }\n\n#[derive(Debug)] struct Peeled(Food);\n#[derive(Debug)] struct Chopped(Food);\n#[derive(Debug)] struct Cooked(Food);\n\n// \u524a\u76ae\u3002\u5982\u679c\u6ca1\u6709\u98df\u7269\uff0c\u5c31\u8fd4\u56de `None`\u3002\u5426\u5219\u8fd4\u56de\u524a\u597d\u76ae\u7684\u98df\u7269\u3002\nfn peel(food: Option<Food>) -> Option<Peeled> {\n    match food {\n        Some(food) => Some(Peeled(food)),\n        None       => None,\n    }\n}\n\n// \u5207\u98df\u7269\u3002\u5982\u679c\u6ca1\u6709\u98df\u7269\uff0c\u5c31\u8fd4\u56de `None`\u3002\u5426\u5219\u8fd4\u56de\u5207\u597d\u7684\u98df\u7269\u3002\nfn chop(peeled: Option<Peeled>) -> Option<Chopped> {\n    match peeled {\n        Some(Peeled(food)) => Some(Chopped(food)),\n        None               => None,\n    }\n}\n\n// \u70f9\u996a\u98df\u7269\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528 `map()` \u6765\u66ff\u4ee3 `match` \u4ee5\u5904\u7406\u5404\u79cd\u60c5\u51b5\u3002\nfn cook(chopped: Option<Chopped>) -> Option<Cooked> {\n    chopped.map(|Chopped(food)| Cooked(food))\n}\n\n// \u8fd9\u4e2a\u51fd\u6570\u4f1a\u5b8c\u6210\u524a\u76ae\u5207\u5757\u70f9\u996a\u4e00\u6761\u9f99\u3002\u6211\u4eec\u628a `map()` \u4e32\u8d77\u6765\uff0c\u4ee5\u7b80\u5316\u4ee3\u7801\u3002\nfn process(food: Option<Food>) -> Option<Cooked> {\n    food.map(|f| Peeled(f))\n        .map(|Peeled(f)| Chopped(f))\n        .map(|Chopped(f)| Cooked(f))\n}\n\n// \u5728\u5c1d\u8bd5\u5403\u98df\u7269\u4e4b\u524d\u786e\u8ba4\u98df\u7269\u662f\u5426\u5b58\u5728\u662f\u975e\u5e38\u91cd\u8981\u7684\uff01\nfn eat(food: Option<Cooked>) {\n    match food {\n        Some(food) => println!("Mmm. I love {:?}", food),\n        None       => println!("Oh no! It wasn\'t edible."),\n    }\n}\n\nfn main() {\n    let apple = Some(Food::Apple);\n    let carrot = Some(Food::Carrot);\n    let potato = None;\n\n    let cooked_apple = cook(chop(peel(apple)));\n    let cooked_carrot = cook(chop(peel(carrot)));\n\n    // \u73b0\u5728\u8ba9\u6211\u4eec\u8bd5\u8bd5\u770b\u8d77\u6765\u66f4\u7b80\u5355\u7684 `process()`\u3002\n    let cooked_potato = process(potato);\n\n    eat(cooked_apple);\n    eat(cooked_carrot);\n    eat(cooked_potato);\n}\n```\n\n## \u7ec4\u5408\u7b97\u5b50\uff1aand_then\n\n```rust\n#![allow(dead_code)]\n\n#[derive(Debug)] enum Food { CordonBleu, Steak, Sushi }\n#[derive(Debug)] enum Day { Monday, Tuesday, Wednesday }\n\n// \u6211\u4eec\u6ca1\u6709\u5236\u4f5c\u5bff\u53f8\u6240\u9700\u7684\u539f\u6750\u6599\uff08ingredient\uff09\uff08\u6709\u5176\u4ed6\u7684\u539f\u6750\u6599\uff09\u3002\nfn have_ingredients(food: Food) -> Option<Food> {\n    match food {\n        Food::Sushi => None,\n        _           => Some(food),\n    }\n}\n\n// \u6211\u4eec\u62e5\u6709\u5168\u90e8\u98df\u7269\u7684\u98df\u8c31\uff0c\u9664\u4e86\u6cd5\u56fd\u84dd\u5e26\u732a\u6392\uff08Cordon Bleu\uff09\u7684\u3002\nfn have_recipe(food: Food) -> Option<Food> {\n    match food {\n        Food::CordonBleu => None,\n        _                => Some(food),\n    }\n}\n\n\n// \u8981\u505a\u4e00\u4efd\u597d\u83dc\uff0c\u6211\u4eec\u9700\u8981\u539f\u6750\u6599\u548c\u98df\u8c31\u3002\n// \u6211\u4eec\u53ef\u4ee5\u501f\u52a9\u4e00\u7cfb\u5217 `match` \u6765\u8868\u8fbe\u8fd9\u4e2a\u903b\u8f91\uff1a\nfn cookable_v1(food: Food) -> Option<Food> {\n    match have_ingredients(food) {\n        None       => None,\n        Some(food) => match have_recipe(food) {\n            None       => None,\n            Some(food) => Some(food),\n        },\n    }\n}\n\n// \u4e5f\u53ef\u4ee5\u4f7f\u7528 `and_then()` \u628a\u4e0a\u9762\u7684\u903b\u8f91\u6539\u5199\u5f97\u66f4\u7d27\u51d1\uff1a\nfn cookable_v2(food: Food) -> Option<Food> {\n    have_ingredients(food).and_then(have_recipe)\n}\n\nfn eat(food: Food, day: Day) {\n    match cookable_v2(food) {\n        Some(food) => println!("Yay! On {:?} we get to eat {:?}.", day, food),\n        None       => println!("Oh no. We don\'t get to eat on {:?}?", day),\n    }\n}\n\nfn main() {\n    let (cordon_bleu, steak, sushi) = (Food::CordonBleu, Food::Steak, Food::Sushi);\n\n    eat(cordon_bleu, Day::Monday);\n    eat(steak, Day::Tuesday);\n    eat(sushi, Day::Wednesday);\n}\n```\n\n## Result \u679a\u4e3e\n\n```rust\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\n## Result \u7684 map\n\n```rust\nuse std::num::ParseIntError;\n\n// \u4fee\u6539\u4e86\u4e0a\u4e00\u8282\u4e2d\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u73b0\u5728\u4f7f\u7528\u6a21\u5f0f\u5339\u914d\u800c\u4e0d\u662f `unwrap()`\u3002\nfn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {\n    match first_number_str.parse::<i32>() {\n        Ok(first_number)  => {\n            match second_number_str.parse::<i32>() {\n                Ok(second_number)  => {\n                    Ok(first_number * second_number)\n                },\n                Err(e) => Err(e),\n            }\n        },\n        Err(e) => Err(e),\n    }\n}\n\nfn print(result: Result<i32, ParseIntError>) {\n    match result {\n        Ok(n)  => println!("n is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    // \u8fd9\u79cd\u60c5\u5f62\u4e0b\u4ecd\u7136\u4f1a\u7ed9\u51fa\u6b63\u786e\u7684\u7b54\u6848\u3002\n    let twenty = multiply("10", "2");\n    print(twenty);\n\n    // \u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u4f1a\u63d0\u4f9b\u4e00\u6761\u66f4\u6709\u7528\u7684\u9519\u8bef\u4fe1\u606f\u3002\n    let tt = multiply("t", "2");\n    print(tt);\n}\n```\n\n```rust\nuse std::num::ParseIntError;\n\n// \u5c31\u50cf `Option` \u90a3\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 `map()` \u4e4b\u7c7b\u7684\u7ec4\u5408\u7b97\u5b50\u3002\n// \u9664\u53bb\u5199\u6cd5\u5916\uff0c\u8fd9\u4e2a\u51fd\u6570\u4e0e\u4e0a\u9762\u90a3\u4e2a\u5b8c\u5168\u4e00\u81f4\uff0c\u5b83\u7684\u4f5c\u7528\u662f\uff1a\n// \u5982\u679c\u503c\u662f\u5408\u6cd5\u7684\uff0c\u8ba1\u7b97\u5176\u4e58\u79ef\uff0c\u5426\u5219\u8fd4\u56de\u9519\u8bef\u3002\nfn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {\n    first_number_str.parse::<i32>().and_then(|first_number| {\n        second_number_str.parse::<i32>().map(|second_number| first_number * second_number)\n    })\n}\n\nfn print(result: Result<i32, ParseIntError>) {\n    match result {\n        Ok(n)  => println!("n is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    // \u8fd9\u79cd\u60c5\u51b5\u4e0b\u4ecd\u7136\u4f1a\u7ed9\u51fa\u6b63\u786e\u7684\u7b54\u6848\u3002\n    let twenty = multiply("10", "2");\n    print(twenty);\n\n    // \u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c31\u4f1a\u63d0\u4f9b\u4e00\u6761\u66f4\u6709\u7528\u7684\u9519\u8bef\u4fe1\u606f\u3002\n    let tt = multiply("t", "2");\n    print(tt);\n}\n```\n\n## \u7ed9 Result \u53d6\u522b\u540d\n\n```rust\nuse std::num::ParseIntError;\n\n// \u4e3a\u5e26\u6709\u9519\u8bef\u7c7b\u578b `ParseIntError` \u7684 `Result` \u5b9a\u4e49\u4e00\u4e2a\u6cdb\u578b\u522b\u540d\u3002\ntype AliasedResult<T> = Result<T, ParseIntError>;\n\n// \u4f7f\u7528\u4e0a\u9762\u5b9a\u4e49\u8fc7\u7684\u522b\u540d\u6765\u8868\u793a\u4e0a\u4e00\u8282\u4e2d\u7684 `Result<i32,ParseIntError>` \u7c7b\u578b\u3002\nfn multiply(first_number_str: &str, second_number_str: &str) -> AliasedResult<i32> {\n    first_number_str.parse::<i32>().and_then(|first_number| {\n        second_number_str.parse::<i32>().map(|second_number| first_number * second_number)\n    })\n}\n\n// \u5728\u8fd9\u91cc\u4f7f\u7528\u522b\u540d\u53c8\u8ba9\u6211\u4eec\u8282\u7701\u4e86\u4e00\u4e9b\u4ee3\u7801\u91cf\u3002\nfn print(result: AliasedResult<i32>) {\n    match result {\n        Ok(n)  => println!("n is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    print(multiply("10", "2"));\n    print(multiply("t", "2"));\n}\n```\n\n## \u63d0\u524d\u8fd4\u56de\n\n```rust\nuse std::num::ParseIntError;\n\nfn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {\n    let first_number = match first_number_str.parse::<i32>() {\n        Ok(first_number)  => first_number,\n        Err(e) => return Err(e),\n    };\n\n    let second_number = match second_number_str.parse::<i32>() {\n        Ok(second_number)  => second_number,\n        Err(e) => return Err(e),\n    };\n\n    Ok(first_number * second_number)\n}\n\nfn print(result: Result<i32, ParseIntError>) {\n    match result {\n        Ok(n)  => println!("n is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    print(multiply("10", "2"));\n    print(multiply("t", "2"));\n}\n```\n\n## \u5f15\u5165 `?`\n\n```rust\nuse std::num::ParseIntError;\n\nfn multiply(first_number_str: &str, second_number_str: &str) -> Result<i32, ParseIntError> {\n    let first_number = first_number_str.parse::<i32>()?;\n    let second_number = second_number_str.parse::<i32>()?;\n\n    Ok(first_number * second_number)\n}\n\nfn print(result: Result<i32, ParseIntError>) {\n    match result {\n        Ok(n)  => println!("n is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    print(multiply("10", "2"));\n    print(multiply("t", "2"));\n}\n```\n\n## \u5b9a\u4e49\u4e00\u4e2a\u9519\u8bef\u7c7b\u578b\n\n```rust\nuse std::error;\nuse std::fmt;\n\ntype Result<T> = std::result::Result<T, DoubleError>;\n\n#[derive(Debug, Clone)]\n// \u5b9a\u4e49\u6211\u4eec\u7684\u9519\u8bef\u7c7b\u578b\uff0c\u8fd9\u79cd\u7c7b\u578b\u53ef\u4ee5\u6839\u636e\u9519\u8bef\u5904\u7406\u7684\u5b9e\u9645\u60c5\u51b5\u5b9a\u5236\u3002\n// \u6211\u4eec\u53ef\u4ee5\u5b8c\u5168\u81ea\u5b9a\u4e49\u9519\u8bef\u7c7b\u578b\uff0c\u4e5f\u53ef\u4ee5\u5728\u7c7b\u578b\u4e2d\u5b8c\u5168\u91c7\u7528\u5e95\u5c42\u7684\u9519\u8bef\u5b9e\u73b0\uff0c\n// \u4e5f\u53ef\u4ee5\u4ecb\u4e8e\u4e8c\u8005\u4e4b\u95f4\u3002\nstruct DoubleError;\n\n// \u9519\u8bef\u7684\u751f\u6210\u4e0e\u5b83\u5982\u4f55\u663e\u793a\u662f\u5b8c\u5168\u6ca1\u5173\u7cfb\u7684\u3002\u6ca1\u6709\u5fc5\u8981\u62c5\u5fc3\u590d\u6742\u7684\u903b\u8f91\u4f1a\u5bfc\u81f4\u6df7\u4e71\u7684\u663e\u793a\u3002\n//\n// \u6ce8\u610f\u6211\u4eec\u6ca1\u6709\u50a8\u5b58\u5173\u4e8e\u9519\u8bef\u7684\u4efb\u4f55\u989d\u5916\u4fe1\u606f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e0d\u4fee\u6539\u6211\u4eec\u7684\u9519\u8bef\u7c7b\u578b\u5b9a\u4e49\u7684\u8bdd\uff0c\n// \u5c31\u65e0\u6cd5\u6307\u660e\u662f\u54ea\u4e2a\u5b57\u7b26\u4e32\u89e3\u6790\u5931\u8d25\u4e86\u3002\nimpl fmt::Display for DoubleError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "invalid first item to double")\n    }\n}\n\n// \u4e3a `DoubleError` \u5b9e\u73b0 `Error` trait\uff0c\u8fd9\u6837\u5176\u4ed6\u9519\u8bef\u53ef\u4ee5\u5305\u88f9\u8fd9\u4e2a\u9519\u8bef\u7c7b\u578b\u3002\nimpl error::Error for DoubleError {\n    fn source(&self) -> Option<&(dyn error::Error + \'static)> {\n        // \u6cdb\u578b\u9519\u8bef\uff0c\u6ca1\u6709\u8bb0\u5f55\u5176\u5185\u90e8\u539f\u56e0\u3002\n        None\n    }\n}\n\nfn double_first(vec: Vec<&str>) -> Result<i32> {\n    vec.first()\n       // \u628a\u9519\u8bef\u6362\u6210\u6211\u4eec\u7684\u65b0\u7c7b\u578b\u3002\n       .ok_or(DoubleError)\n       .and_then(|s| {\n            s.parse::<i32>()\n                // \u8fd9\u91cc\u4e5f\u6362\u6210\u65b0\u7c7b\u578b\u3002\n                .map_err(|_| DoubleError)\n                .map(|i| 2 * i)\n        })\n}\n\nfn print(result: Result<i32>) {\n    match result {\n        Ok(n)  => println!("The first doubled is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    print(double_first(numbers));\n    print(double_first(empty));\n    print(double_first(strings));\n}\n```\n\n## \u628a\u9519\u8bef \u201c\u88c5\u7bb1\u201d\n\n```rust\nuse std::error;\nuse std::fmt;\n\n// \u4e3a `Box<error::Error>` \u53d6\u522b\u540d\u3002\ntype Result<T> = std::result::Result<T, Box<dyn error::Error>>;\n\n#[derive(Debug, Clone)]\nstruct EmptyVec;\n\nimpl fmt::Display for EmptyVec {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "invalid first item to double")\n    }\n}\n\nimpl error::Error for EmptyVec {\n    fn description(&self) -> &str {\n        "invalid first item to double"\n    }\n\n    fn cause(&self) -> Option<&dyn error::Error> {\n        // \u6cdb\u578b\u9519\u8bef\u3002\u6ca1\u6709\u8bb0\u5f55\u5176\u5185\u90e8\u539f\u56e0\u3002\n        None\n    }\n}\n\nfn double_first(vec: Vec<&str>) -> Result<i32> {\n    vec.first()\n       .ok_or_else(|| EmptyVec.into())  // \u88c5\u7bb1\n       .and_then(|s| {\n            s.parse::<i32>()\n                .map_err(|e| e.into())  // \u88c5\u7bb1\n                .map(|i| 2 * i)\n        })\n}\n\nfn print(result: Result<i32>) {\n    match result {\n        Ok(n)  => println!("The first doubled is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    print(double_first(numbers));\n    print(double_first(empty));\n    print(double_first(strings));\n}\n```\n\n## `?` \u7684\u5176\u4ed6\u7528\u6cd5\n\n```rust\nuse std::error;\nuse std::fmt;\n\n// \u4e3a `Box<error::Error>` \u53d6\u522b\u540d\u3002\ntype Result<T> = std::result::Result<T, Box<dyn error::Error>>;\n\n#[derive(Debug)]\nstruct EmptyVec;\n\nimpl fmt::Display for EmptyVec {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        write!(f, "invalid first item to double")\n    }\n}\n\nimpl error::Error for EmptyVec {}\n\n// \u8fd9\u91cc\u7684\u7ed3\u6784\u548c\u4e4b\u524d\u4e00\u6837\uff0c\u4f46\u662f\u8fd9\u6b21\u6ca1\u6709\u628a\u6240\u6709\u7684 `Result` \u548c `Option` \u4e32\u8d77\u6765\uff0c\n// \u800c\u662f\u4f7f\u7528 `?` \u7acb\u5373\u5f97\u5230\u5185\u90e8\u503c\u3002\nfn double_first(vec: Vec<&str>) -> Result<i32> {\n    let first = vec.first().ok_or(EmptyVec)?;\n    let parsed = first.parse::<i32>()?;\n    Ok(2 * parsed)\n}\n\nfn print(result: Result<i32>) {\n    match result {\n        Ok(n)  => println!("The first doubled is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    print(double_first(numbers));\n    print(double_first(empty));\n    print(double_first(strings));\n}\n```\n\n## \u5305\u88f9\u9519\u8bef\n\n```rust\nuse std::error;\nuse std::num::ParseIntError;\nuse std::fmt;\n\ntype Result<T> = std::result::Result<T, DoubleError>;\n\n#[derive(Debug)]\nenum DoubleError {\n    EmptyVec,\n    // \u5728\u8fd9\u4e2a\u9519\u8bef\u7c7b\u578b\u4e2d\uff0c\u6211\u4eec\u91c7\u7528 `parse` \u7684\u9519\u8bef\u7c7b\u578b\u4e2d `Err` \u90e8\u5206\u7684\u5b9e\u73b0\u3002\n    // \u82e5\u60f3\u63d0\u4f9b\u66f4\u591a\u4fe1\u606f\uff0c\u5219\u8be5\u7c7b\u578b\u4e2d\u8fd8\u9700\u8981\u52a0\u5165\u66f4\u591a\u6570\u636e\u3002\n    Parse(ParseIntError),\n}\n\nimpl fmt::Display for DoubleError {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        match *self {\n            DoubleError::EmptyVec =>\n                write!(f, "please use a vector with at least one element"),\n            // \u8fd9\u662f\u4e00\u4e2a\u5c01\u88c5\uff08wrapper\uff09\uff0c\u5b83\u91c7\u7528\u5185\u90e8\u5404\u7c7b\u578b\u5bf9 `fmt` \u7684\u5b9e\u73b0\u3002\n            DoubleError::Parse(ref e) => e.fmt(f),\n        }\n    }\n}\n\nimpl error::Error for DoubleError {\n    fn source(&self) -> Option<&(dyn error::Error + \'static)> {\n        match *self {\n            DoubleError::EmptyVec => None,\n            // \u539f\u56e0\u91c7\u53d6\u5185\u90e8\u5bf9\u9519\u8bef\u7c7b\u578b\u7684\u5b9e\u73b0\u3002\u5b83\u9690\u5f0f\u5730\u8f6c\u6362\u6210\u4e86 trait \u5bf9\u8c61 `&error:Error`\u3002\n            // \u8fd9\u53ef\u4ee5\u5de5\u4f5c\uff0c\u56e0\u4e3a\u5185\u90e8\u7684\u7c7b\u578b\u5df2\u7ecf\u5b9e\u73b0\u4e86 `Error` trait\u3002\n            DoubleError::Parse(ref e) => Some(e),\n        }\n    }\n}\n\n// \u5b9e\u73b0\u4ece `ParseIntError` \u5230 `DoubleError` \u7684\u8f6c\u6362\u3002\n// \u5728\u4f7f\u7528 `?` \u65f6\uff0c\u6216\u8005\u4e00\u4e2a `ParseIntError` \u9700\u8981\u8f6c\u6362\u6210 `DoubleError` \u65f6\uff0c\u5b83\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002\nimpl From<ParseIntError> for DoubleError {\n    fn from(err: ParseIntError) -> DoubleError {\n        DoubleError::Parse(err)\n    }\n}\n\nfn double_first(vec: Vec<&str>) -> Result<i32> {\n    let first = vec.first().ok_or(DoubleError::EmptyVec)?;\n    let parsed = first.parse::<i32>()?;\n\n    Ok(2 * parsed)\n}\n\nfn print(result: Result<i32>) {\n    match result {\n        Ok(n)  => println!("The first doubled is {}", n),\n        Err(e) => println!("Error: {}", e),\n    }\n}\n\nfn main() {\n    let numbers = vec!["42", "93", "18"];\n    let empty = vec![];\n    let strings = vec!["tofu", "93", "18"];\n\n    print(double_first(numbers));\n    print(double_first(empty));\n    print(double_first(strings));\n}\n```\n\n## \u5339\u914d\u4e0d\u540c\u7684\u9519\u8bef\n\n```rust\nuse std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let f = File::open("hello.txt");\n    let f = match f {\n        Ok(file) => file,\n        Err(error) => match error.kind() {\n            ErrorKind::NotFound => match File::create("hello.txt") {\n                Ok(fc) => fc,\n                Err(e) => panic!("Problem creating the file: {:?}", e),\n            },\n            other_error => panic!("Problem opening the file: {:?}", other_error),\n        },\n    };\n}\n```\n\n```rust\n// \u66f4\u8001\u7ec3\u7684 Rustacean \u53ef\u80fd\u4f1a\u8fd9\u4e48\u5199\nuse std::fs::File;\nuse std::io::ErrorKind;\n\nfn main() {\n    let f = File::open("hello.txt").unwrap_or_else(|error| {\n        if error.kind() == ErrorKind::NotFound {\n            File::create("hello.txt").unwrap_or_else(|error| {\n                panic!("Problem creating the file: {:?}", error);\n            })\n        } else {\n            panic!("Problem opening the file: {:?}", error);\n        }\n    });\n}\n```\n\n## \u5931\u8d25\u65f6 panic \u7684\u7b80\u5199\uff1aunwrap \u548c expect\n\n```rust\nuse std::fs::File;\n\nfn main() {\n    let f = File::open("hello.txt").unwrap();\n    let f = File::open("hello.txt").expect("Failed to open hello.txt");\n}\n```\n\n## \u4f20\u64ad\u9519\u8bef\n\n```rust\nuse std::io;\nuse std::io::Read;\nuse std::fs::File;\n\nfn read_username_from_file() -> Result<String, io::Error> {\n    let f = File::open("hello.txt");\n    let mut f = match f {\n        Ok(file) => file,\n        Err(e) => return Err(e), // \u9519\u8bef\u76f4\u63a5\u8fd4\u56de\n    };\n\n    let mut s = String::new();\n    match f.read_to_string(&mut s) {\n        Ok(_) => Ok(s),\n        Err(e) => Err(e),\n    }\n}\n\n// \u7b80\u5199\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut f = File::open("hello.txt")?;\n    let mut s = String::new();\n    f.read_to_string(&mut s)?;\n    Ok(s)\n}\n\n// \u7b80\u5199\nfn new(mut args: std::env::Args) -> Result<Config, &\'static str> {\n    args.next();\n    // let query = match args.next() {\n    //     Some(arg) => arg,\n    //     None => return Err("Didn\'t get a query string"),\n    // };\n    let query = args.next().ok_or("Didn\'t get a query string")?;\n    Ok(Config {\n        query,\n    })\n}\n\n// \u94fe\u5f0f\u65b9\u6cd5\u8c03\u7528\nfn read_username_from_file() -> Result<String, io::Error> {\n    let mut s = String::new();\n    File::open("hello.txt")?.read_to_string(&mut s)?;\n    Ok(s)\n}\n\n// \u4f7f\u7528 fs::read_to_string\nfn read_username_from_file() -> Result<String, io::Error> {\n    fs::read_to_string("hello.txt")\n}\n```\n\n```rust\nuse std::fs::File;\nfn main() {\n    // \u53ea\u80fd\u5728\u8fd4\u56de Result \u6216\u8005\u5176\u5b83\u5b9e\u73b0\u4e86 std::ops::Try \u7684\u7c7b\u578b\u7684\u51fd\u6570\u4e2d\u4f7f\u7528 ? \u8fd0\u7b97\u7b26\u3002\n    let f = File::open("hello.txt")?; // \u9519\u8bef\n}\n```\n\n```rust\nuse std::error::Error;\nuse std::fs::File;\n// main \u51fd\u6570\u662f\u7279\u6b8a\u7684\uff0c\u5176\u5fc5\u987b\u8fd4\u56de\u4ec0\u4e48\u7c7b\u578b\u662f\u6709\u9650\u5236\u7684\u3002\n// main \u51fd\u6570\u7684\u4e00\u4e2a\u6709\u6548\u7684\u8fd4\u56de\u503c\u662f ()\uff0c\n// \u540c\u65f6\u51fa\u4e8e\u65b9\u4fbf\uff0c\u53e6\u4e00\u4e2a\u6709\u6548\u7684\u8fd4\u56de\u503c\u662f Result<T, E>\nfn main() -> Result<(), Box<dyn Error>> {\n    let f = File::open("hello.txt")?;\n    Ok(())\n}\n```\n'},c6b6:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u751f\u547d\u5468\u671f/\u4f5c\u7528\u57df\n---"},c6q0:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u901a\u9053(channel)\n---\n"},cEcc:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5e38\u91cf\n---"},cNgN:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u8fed\u4ee3\u5668\n---\n"},cgG3:function(n,t,e){"use strict";e.r(t),t.default='- \u4e00\u4e2a Node.js \u6587\u4ef6\u5c31\u662f\u4e00\u4e2a\u6a21\u5757\n- \u5305\u662f\u5728\u6a21\u5757\u57fa\u7840\u4e0a\u66f4\u6df1\u4e00\u6b65\u7684\u62bd\u8c61\uff0c\u4f7f\u7528 npm \u6765\u89e3\u51b3\u5305\u7684\u53d1\u5e03\u548c\u83b7\u53d6\uff0c\n  `package.json`\u5fc5\u987b\u5728\u5305\u7684\u9876\u5c42\u76ee\u5f55\u4e0b\n\n```js\nimport { stat, exists, readFile } from "fs";\nimport _, { each, forEach } from "lodash";\n// \u6574\u4f53\u52a0\u8f7d\u7684\u5199\u6cd5\nimport * as circle from "./circle";\n\n// profile.js\nexport var firstName = "Michael";\nexport var lastName = "Jackson";\nexport var year = 1958;\n\n// profile.js\nvar firstName = "Michael";\nvar lastName = "Jackson";\nvar year = 1958;\nexport { firstName, lastName, year };\n\n// export-default.js\nexport default function() {\n  console.log("foo");\n}\n// import-default.js\nimport customName from "./export-default";\ncustomName(); // \'foo\'\n\nexport { foo, bar } from "my_module";\n// \u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\nimport { foo, bar } from "my_module";\nexport { foo, bar };\n```\n'},d0Ti:function(n,t,e){"use strict";e.r(t),t.default='- \u82e5\u6211\u4eec\u53ea\u662f\u60f3\u4fdd\u8bc1\u6bcf\u6b21\u53ea\u6709\u4e00\u4e2a Go \u7a0b\u80fd\u591f\u8bbf\u95ee\u4e00\u4e2a\u5171\u4eab\u7684\u53d8\u91cf\uff0c\u4ece\u800c\u907f\u514d\u51b2\u7a81\uff1f\n- \u6211\u4eec\u901a\u5e38\u4f7f\u7528 _\u4e92\u65a5\u9501\uff08Mutex\uff09_ \u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u6765\u63d0\u4f9b\u8fd9\u79cd\u673a\u5236\u3002\n- \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5728\u4ee3\u7801\u524d\u8c03\u7528 Lock \u65b9\u6cd5\uff0c\u5728\u4ee3\u7801\u540e\u8c03\u7528 Unlock \u65b9\u6cd5\u6765\u4fdd\u8bc1\u4e00\u6bb5\u4ee3\u7801\u7684\u4e92\u65a5\u6267\u884c\u3002\n- \u6211\u4eec\u4e5f\u53ef\u4ee5\u7528 defer \u8bed\u53e5\u6765\u4fdd\u8bc1\u4e92\u65a5\u9501\u4e00\u5b9a\u4f1a\u88ab\u89e3\u9501\n\n```go\npackage main\nimport (\n  "fmt"\n  "sync"\n  "time"\n)\n// SafeCounter \u7684\u5e76\u53d1\u4f7f\u7528\u662f\u5b89\u5168\u7684\u3002\ntype SafeCounter struct {\n  v   map[string]int\n  mux sync.Mutex\n}\n// Inc \u589e\u52a0\u7ed9\u5b9a key \u7684\u8ba1\u6570\u5668\u7684\u503c\u3002\nfunc (c *SafeCounter) Inc(key string) {\n  c.mux.Lock()\n  // Lock \u4e4b\u540e\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a goroutine \u80fd\u8bbf\u95ee c.v\n  c.v[key]++\n  c.mux.Unlock()\n}\n// Value \u8fd4\u56de\u7ed9\u5b9a key \u7684\u8ba1\u6570\u5668\u7684\u5f53\u524d\u503c\u3002\nfunc (c *SafeCounter) Value(key string) int {\n  c.mux.Lock()\n  // Lock \u4e4b\u540e\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a goroutine \u80fd\u8bbf\u95ee c.v\n  defer c.mux.Unlock()\n  return c.v[key]\n}\nfunc main() {\n  c := SafeCounter{v: make(map[string]int)}\n  for i := 0; i < 1000; i++ {\n    go c.Inc("somekey")\n  }\n  time.Sleep(time.Second)\n  fmt.Println(c.Value("somekey"))\n}\n```\n\n```go\npackage main\n\nimport (\n    "fmt"\n    "sync"\n)\n\ntype Container struct {\n    mu       sync.Mutex\n    counters map[string]int\n}\n\nfunc (c *Container) inc(name string) {\n    c.mu.Lock()\n    defer c.mu.Unlock()\n    c.counters[name]++\n}\n\nfunc main() {\n    c := Container{\n        counters: map[string]int{"a": 0, "b": 0},\n    }\n\n    var wg sync.WaitGroup\n    doIncrement := func(name string, n int) {\n        for i := 0; i < n; i++ {\n            c.inc(name)\n        }\n        wg.Done()\n    }\n\n    wg.Add(3)\n    go doIncrement("a", 10000)\n    go doIncrement("a", 10000)\n    go doIncrement("b", 10000)\n\n    wg.Wait()\n    fmt.Println(c.counters)\n}\n```\n'},dICk:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5185\u7f6e\u51fd\u6570\n---"},dJlr:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5185\u5b58\u7ba1\u7406\n---"},dyvB:function(n,t,e){"use strict";e.r(t),t.default="## const\n\n- `const` \u8bf4\u660e\u7b26\u8868\u793a\u53d8\u91cf\u662f\u53ea\u8bfb\u7684\uff0c\u4e0d\u5f97\u88ab\u4fee\u6539\n- \u5bf9\u4e8e\u6307\u9488\u53d8\u91cf\uff0c`const` \u6709\u4e24\u79cd\u5199\u6cd5\uff0c\u542b\u4e49\u662f\u4e0d\u4e00\u6837\u7684\n  - `const` \u5728`*`\u524d\u9762\uff0c\u8868\u793a\u6307\u9488\u6307\u5411\u7684\u503c\u4e0d\u53ef\u4fee\u6539\n  - \u5982\u679c `const` \u5728`*`\u540e\u9762\uff0c\u8868\u793a\u6307\u9488\u5305\u542b\u7684\u5730\u5740\u4e0d\u53ef\u4fee\u6539\n\n```c++\nconst double PI = 3.14159;\nPI = 3; // \u62a5\u9519\n\nconst int arr[] = {1, 2, 3, 4};\narr[0] = 5; // \u62a5\u9519\n\n\n// const \u8868\u793a\u6307\u5411\u7684\u503c *x \u4e0d\u80fd\u4fee\u6539\nint const * x\n// \u6216\u8005\nconst int * x\n\nint p = 1\nconst int* x = &p;\n(*x)++; // \u62a5\u9519\n\n\n// const \u8868\u793a\u5730\u5740 x \u4e0d\u80fd\u4fee\u6539\nint* const x\n\nint p = 1\nint* const x = &p;\nx++; // \u62a5\u9519\n```\n\n## static\n\n- \u7528\u4e8e\u5c40\u90e8\u53d8\u91cf\uff08\u4f4d\u4e8e\u5757\u4f5c\u7528\u57df\u5185\u90e8\uff09\n  - \u8868\u793a\u8be5\u53d8\u91cf\u7684\u503c\u4f1a\u5728\u51fd\u6570\u6bcf\u6b21\u6267\u884c\u540e\u5f97\u5230\u4fdd\u7559\n  - \u4e0b\u6b21\u6267\u884c\u65f6\u4e0d\u4f1a\u8fdb\u884c\u521d\u59cb\u5316\uff0c\n- \u7528\u4e8e\u5168\u5c40\u53d8\u91cf\uff08\u4f4d\u4e8e\u5757\u4f5c\u7528\u57df\u5916\u90e8\uff09\n  - \u8868\u793a\u8be5\u53d8\u91cf\u53ea\u7528\u4e8e\u5f53\u524d\u6587\u4ef6\uff0c\u5176\u4ed6\u6e90\u7801\u6587\u4ef6\u4e0d\u53ef\u4ee5\u5f15\u7528\u8be5\u53d8\u91cf\n  - \u5373\u8be5\u53d8\u91cf\u4e0d\u4f1a\u88ab\u94fe\u63a5\uff08link\uff09\n\n## auto\n\nauto \u8bf4\u660e\u7b26\u8868\u793a\u8be5\u53d8\u91cf\u7684\u5b58\u50a8\uff0c\u7531\u7f16\u8bd1\u5668\u81ea\u4e3b\u5206\u914d\u5185\u5b58\u7a7a\u95f4\uff0c\u4e14\u53ea\u5b58\u5728\u4e8e\u5b9a\u4e49\u65f6\u6240\u5728\u7684\u4f5c\u7528\u57df\uff0c\u9000\u51fa\u4f5c\u7528\u57df\u65f6\u4f1a\u81ea\u52a8\u91ca\u653e\u3002\n\n## extern\n\nextern \u8bf4\u660e\u7b26\u8868\u793a\uff0c\u8be5\u53d8\u91cf\u5728\u5176\u4ed6\u6587\u4ef6\u91cc\u9762\u58f0\u660e\uff0c\u6ca1\u6709\u5fc5\u8981\u5728\u5f53\u524d\u6587\u4ef6\u91cc\u9762\u4e3a\u5b83\u5206\u914d\u7a7a\u95f4\u3002\u901a\u5e38\u7528\u6765\u8868\u793a\uff0c\u8be5\u53d8\u91cf\u662f\u591a\u4e2a\u6587\u4ef6\u5171\u4eab\u7684\u3002\n\n## register\n\nregister \u8bf4\u660e\u7b26\u5411\u7f16\u8bd1\u5668\u8868\u793a\uff0c\u8be5\u53d8\u91cf\u662f\u7ecf\u5e38\u4f7f\u7528\u7684\uff0c\u5e94\u8be5\u63d0\u4f9b\u6700\u5feb\u7684\u8bfb\u53d6\u901f\u5ea6\uff0c\u6240\u4ee5\u5e94\u8be5\u653e\u8fdb\u5bc4\u5b58\u5668\u3002\n\n## volatile\n\nvolatile \u8bf4\u660e\u7b26\u8868\u793a\u6240\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u53ef\u80fd\u4f1a\u9884\u60f3\u4e0d\u5230\u5730\u53d1\u751f\u53d8\u5316\uff08\u5373\u5176\u4ed6\u7a0b\u5e8f\u53ef\u80fd\u4f1a\u66f4\u6539\u5b83\u7684\u503c\uff09\uff0c\u4e0d\u53d7\u5f53\u524d\u7a0b\u5e8f\u63a7\u5236\uff0c\u56e0\u6b64\u7f16\u8bd1\u5668\u4e0d\u8981\u5bf9\u8fd9\u7c7b\u53d8\u91cf\u8fdb\u884c\u4f18\u5316\uff0c\u6bcf\u6b21\u4f7f\u7528\u65f6\u90fd\u5e94\u8be5\u67e5\u8be2\u4e00\u4e0b\u5b83\u7684\u503c\n\n## restrict\n\n- restrict \u8bf4\u660e\u7b26\u5141\u8bb8\u7f16\u8bd1\u5668\u4f18\u5316\u67d0\u4e9b\u4ee3\u7801\u3002\u5b83\u53ea\u80fd\u7528\u4e8e\u6307\u9488\uff0c\u8868\u660e\u8be5\u6307\u9488\u662f\u8bbf\u95ee\u6570\u636e\u7684\u552f\u4e00\u65b9\u5f0f\u3002\n- restrict \u7528\u4e8e\u51fd\u6570\u53c2\u6570\u65f6\uff0c\u8868\u793a\u53c2\u6570\u7684\u5185\u5b58\u5730\u5740\u4e4b\u95f4\u6ca1\u6709\u91cd\u53e0\u3002\n"},dzsO:function(n,t,e){"use strict";e.r(t),t.default='```js\n// helloword.js\nconsole.log("Hello, world");\n```\n\n```sh\nnode helloword.js\n```\n'},e7Ld:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u9879\u76ee\u7ed3\u6784\n---"},eBDC:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: 1.\u4e24\u6570\u76f8\u52a0\n---\n"},eDYA:function(n,t,e){"use strict";e.r(t),t.default="```js\nfunction InsertionSort(arr) {\n  for (let i = 1; i < arr.length; i++) {\n    const key = arr[i];\n    let j = i - 1;\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    arr[j + 1] = key;\n  }\n  return arr;\n}\n\nconst arr = [3, 6, 7, 4, 5, 1, 2];\nconsole.log(InsertionSort(arr));\n```\n"},eFZT:function(n,t,e){"use strict";e.r(t),t.default='```js\n// var name = \'Bob\';\nlet name = \'Bob\';\n\n\n// \u5206\u7ec4\u58f0\u660e\nimport (\n  "fmt"\n  "os"\n)\n\nconst (\n  i = 100\n  pi = 3.1415\n  prefix = "Go_"\n)\n\nvar (\n  i int\n  pi float32\n  prefix string\n)\n```\n'},eFv7:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5e93/\u5305/\u6a21\u5757\n---"},eNwl:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: while\u5faa\u73af\n---"},ePLb:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: Visitor \u6a21\u5f0f\n---\n"},eQKy:function(n,t,e){"use strict";e.r(t),t.default='\u4ece\u6839\u672c\u4e0a\u6765\u8bf4\uff0c\u5b8f\u662f\u4e00\u79cd\u4e3a\u5199\u5176\u4ed6\u4ee3\u7801\u800c\u5199\u4ee3\u7801\u7684\u65b9\u5f0f\uff0c\u5373\u6240\u8c13\u7684 \u5143\u7f16\u7a0b\uff08metaprogramming\uff09\n\n\u58f0\u660e\uff08Declarative\uff09\u5b8f\n\n- \u4f7f\u7528 `macro_rules!` \u7684 \u58f0\u660e\uff08Declarative\uff09\u5b8f\uff0c\n  - \u5176\u6838\u5fc3\u6982\u5ff5\u662f\uff0c\u58f0\u660e\u5b8f\u5141\u8bb8\u6211\u4eec\u7f16\u5199\u4e00\u4e9b\u7c7b\u4f3c Rust match \u8868\u8fbe\u5f0f\u7684\u4ee3\u7801\u3002\n\n\u8fc7\u7a0b\u5b8f\uff08procedural macros\uff09\n\n- \u8fc7\u7a0b\u5b8f\u63a5\u6536 Rust \u4ee3\u7801\u4f5c\u4e3a\u8f93\u5165\uff0c\u5728\u8fd9\u4e9b\u4ee3\u7801\u4e0a\u8fdb\u884c\u64cd\u4f5c\uff0c\u7136\u540e\u4ea7\u751f\u53e6\u4e00\u4e9b\u4ee3\u7801\u4f5c\u4e3a\u8f93\u51fa\uff0c\u800c\u975e\u50cf\u58f0\u660e\u5f0f\u5b8f\u90a3\u6837\u5339\u914d\u5bf9\u5e94\u6a21\u5f0f\u7136\u540e\u4ee5\u53e6\u4e00\u90e8\u5206\u4ee3\u7801\u66ff\u6362\u5f53\u524d\u4ee3\u7801\u3002\n\n  - \u81ea\u5b9a\u4e49 `#[derive]` \u5b8f\u5728\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\u4e0a\u6307\u5b9a\u901a\u8fc7 derive \u5c5e\u6027\u6dfb\u52a0\u7684\u4ee3\u7801\n  - \u7c7b\u5c5e\u6027\uff08Attribute-like\uff09\u5b8f\u5b9a\u4e49\u53ef\u7528\u4e8e\u4efb\u610f\u9879\u7684\u81ea\u5b9a\u4e49\u5c5e\u6027\n  - \u7c7b\u51fd\u6570\u5b8f\u770b\u8d77\u6765\u50cf\u51fd\u6570\u4e0d\u8fc7\u4f5c\u7528\u4e8e\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7684 token\n\n\u51fd\u6570\u4e0e\u5b8f\u7684\u533a\u522b\n\n- \u4e00\u4e2a\u51fd\u6570\u6807\u7b7e\u5fc5\u987b\u58f0\u660e\u51fd\u6570\u53c2\u6570\u4e2a\u6570\u548c\u7c7b\u578b\u3002\n  - \u76f8\u6bd4\u4e4b\u4e0b\uff0c\u5b8f\u80fd\u591f\u63a5\u53d7\u4e0d\u540c\u6570\u91cf\u7684\u53c2\u6570\uff1a\u7528\u4e00\u4e2a\u53c2\u6570\u8c03\u7528 `println!("hello")` \u6216\u7528\u4e24\u4e2a\u53c2\u6570\u8c03\u7528 `println!("hello {}", name)` \u3002\n- \u5b8f\u53ef\u4ee5\u5728\u7f16\u8bd1\u5668\u7ffb\u8bd1\u4ee3\u7801\u524d\u5c55\u5f00\uff0c\u4f8b\u5982\uff0c\u5b8f\u53ef\u4ee5\u5728\u4e00\u4e2a\u7ed9\u5b9a\u7c7b\u578b\u4e0a\u5b9e\u73b0 trait \u3002\n  - \u800c\u51fd\u6570\u5219\u4e0d\u884c\uff0c\u56e0\u4e3a\u51fd\u6570\u662f\u5728\u8fd0\u884c\u65f6\u88ab\u8c03\u7528\n- \u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u8c03\u7528\u5b8f \u4e4b\u524d \u5fc5\u987b\u5b9a\u4e49\u5b83\uff0c\u6216\u5c06\u5176\u5f15\u5165\u4f5c\u7528\u57df\uff0c\n  - \u800c\u51fd\u6570\u5219\u53ef\u4ee5\u5728\u4efb\u4f55\u5730\u65b9\u5b9a\u4e49\u548c\u8c03\u7528\u3002\n\n## \u58f0\u660e\uff08Declarative\uff09\u5b8f\n\n```rust\n// vec! \u5b8f\u5b9a\u4e49\u7684\u7b80\u5316\u7248\u672c\n// #[macro_export] \u6807\u6ce8\u8bf4\u660e\uff0c\u53ea\u8981\u5c06\u5b9a\u4e49\u4e86\u5b8f\u7684 crate \u5f15\u5165\u4f5c\u7528\u57df\uff0c\u5b8f\u5c31\u5e94\u5f53\u662f\u53ef\u7528\u7684\u3002\n// \u5982\u679c\u6ca1\u6709\u8be5\u6807\u6ce8\uff0c\u8fd9\u4e2a\u5b8f\u5c31\u4e0d\u80fd\u88ab\u5f15\u5165\u4f5c\u7528\u57df\u3002\n#[macro_export]\nmacro_rules! vec {\n    // \u6b64\u5904\u6709\u4e00\u4e2a\u5355\u8fb9\u6a21\u5f0f ( $( $x:expr ),* )\n    // \u4e00\u5bf9\u62ec\u53f7()\u5305\u542b\u4e86\u6574\u4e2a\u6a21\u5f0f\n    // $() \u6355\u83b7\u4e86\u7b26\u5408\u62ec\u53f7\u5185\u6a21\u5f0f\u7684\u503c\u4ee5\u7528\u4e8e\u66ff\u6362\u540e\u7684\u4ee3\u7801\u3002\n    // $x:expr \u5339\u914d Rust \u7684\u4efb\u610f\u8868\u8fbe\u5f0f\uff0c\u5e76\u5c06\u8be5\u8868\u8fbe\u5f0f\u8bb0\u4f5c $x\n    // \u7d27\u968f\u9017\u53f7\u4e4b\u540e\u7684 * \u8bf4\u660e\u8be5\u6a21\u5f0f\u5339\u914d\u96f6\u4e2a\u6216\u66f4\u591a\u4e2a * \u4e4b\u524d\u7684\u4efb\u4f55\u6a21\u5f0f\n    // vec![1, 2, 3]; \u8c03\u7528\u5b8f\u65f6\uff0c$x \u6a21\u5f0f\u4e0e\u4e09\u4e2a\u8868\u8fbe\u5f0f 1\u30012 \u548c 3 \u8fdb\u884c\u4e86\u4e09\u6b21\u5339\u914d\n    // \u5bf9\u4e8e\u6bcf\u4e2a\uff08\u5728 => \u524d\u9762\uff09\u5339\u914d\u6a21\u5f0f\u4e2d\u7684 $() \u7684\u90e8\u5206\uff0c\n    // \u751f\u6210\u96f6\u4e2a\u6216\u66f4\u591a\u4e2a\uff08\u5728 => \u540e\u9762\uff09\u4f4d\u4e8e $()* \u5185\u7684 temp_vec.push() \uff0c\n    // \u751f\u6210\u7684\u4e2a\u6570\u53d6\u51b3\u4e8e\u8be5\u6a21\u5f0f\u88ab\u5339\u914d\u7684\u6b21\u6570\u3002\n    ( $( $x:expr ), * ) => {\n        {\n            let mut temp_vec = Vec::new();\n            $(\n                temp_vec.push($x); // $x \u7531\u6bcf\u4e2a\u4e0e\u4e4b\u76f8\u5339\u914d\u7684\u8868\u8fbe\u5f0f\u6240\u66ff\u6362\u3002\n            )*\n            temp_vec\n        }\n    };\n}\nlet v: Vec<u32> = vec![1, 2, 3];\n\n// \u8c03\u7528\u8be5\u5b8f\u65f6\uff0c\u66ff\u6362\u8be5\u5b8f\u8c03\u7528\u6240\u751f\u6210\u7684\u4ee3\u7801\u4f1a\u662f\u4e0b\u9762\u8fd9\u6837\uff1a\nlet mut temp_vec = Vec::new();\ntemp_vec.push(1);\ntemp_vec.push(2);\ntemp_vec.push(3);\ntemp_vec\n```\n\n### \u6307\u793a\u7b26\n\n\u5168\u90e8\u6307\u793a\u7b26\uff1a\n\n- `block`\n- `expr` \u7528\u4e8e\u8868\u8fbe\u5f0f\n- `ident` \u7528\u4e8e\u53d8\u91cf\u540d\u6216\u51fd\u6570\u540d\n- `item`\n- `pat` (\u6a21\u5f0f pattern)\n- `path`\n- `stmt` (\u8bed\u53e5 statement)\n- `tt` (\u6807\u8bb0\u6811 token tree)\n- `ty` (\u7c7b\u578b type)\n\n```rust\nmacro_rules! create_function {\n    // \u6b64\u5b8f\u63a5\u53d7\u4e00\u4e2a `ident` \u6307\u793a\u7b26\u8868\u793a\u7684\u53c2\u6570\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a `$func_name` \u7684\u51fd\u6570\u3002\n    // `ident` \u6307\u793a\u7b26\u7528\u4e8e\u53d8\u91cf\u540d\u6216\u51fd\u6570\u540d\n    ($func_name:ident) => (\n        fn $func_name() {\n            // `stringify!` \u5b8f\u628a `ident` \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u3002\n            println!("You called {:?}()",\n                     stringify!($func_name))\n        }\n    )\n}\n\n// \u501f\u52a9\u4e0a\u8ff0\u5b8f\u6765\u521b\u5efa\u540d\u4e3a `foo` \u548c `bar` \u7684\u51fd\u6570\u3002\ncreate_function!(foo);\ncreate_function!(bar);\n\nmacro_rules! print_result {\n    // \u6b64\u5b8f\u63a5\u53d7\u4e00\u4e2a `expr` \u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\uff0c\u5e76\u5c06\u5b83\u4f5c\u4e3a\u5b57\u7b26\u4e32\uff0c\u8fde\u540c\u5176\u7ed3\u679c\u4e00\u8d77\n    // \u6253\u5370\u51fa\u6765\u3002\n    // `expr` \u6307\u793a\u7b26\u8868\u793a\u8868\u8fbe\u5f0f\u3002\n    ($expression:expr) => (\n        // `stringify!` \u628a\u8868\u8fbe\u5f0f*\u539f\u6837*\u8f6c\u6362\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\n        println!("{:?} = {:?}",\n                 stringify!($expression),\n                 $expression)\n    )\n}\n\nfn main() {\n    foo();\n    bar();\n\n    print_result!(1u32 + 1);\n\n    // \u56de\u60f3\u4e00\u4e0b\uff0c\u4ee3\u7801\u5757\u4e5f\u662f\u8868\u8fbe\u5f0f\uff01\n    print_result!({\n        let x = 1u32;\n\n        x * x + 2 * x - 1\n    });\n}\n```\n\n### \u91cd\u8f7d\n\n```rust\n// \u6839\u636e\u4f60\u8c03\u7528\u5b83\u7684\u65b9\u5f0f\uff0c`test!` \u5c06\u4ee5\u4e0d\u540c\u7684\u65b9\u5f0f\u6765\u6bd4\u8f83 `$left` \u548c `$right`\u3002\nmacro_rules! test {\n    // \u53c2\u6570\u4e0d\u9700\u8981\u4f7f\u7528\u9017\u53f7\u9694\u5f00\u3002\n    // \u53c2\u6570\u53ef\u4ee5\u4efb\u610f\u7ec4\u5408\uff01\n    ($left:expr; and $right:expr) => (\n        println!("{:?} and {:?} is {:?}",\n                 stringify!($left),\n                 stringify!($right),\n                 $left && $right)\n    );\n    // ^ \u6bcf\u4e2a\u5206\u652f\u90fd\u5fc5\u987b\u4ee5\u5206\u53f7\u7ed3\u675f\u3002\n    ($left:expr; or $right:expr) => (\n        println!("{:?} or {:?} is {:?}",\n                 stringify!($left),\n                 stringify!($right),\n                 $left || $right)\n    );\n}\n\nfn main() {\n    test!(1i32 + 1 == 2i32; and 2i32 * 2 == 4i32);\n    test!(true; or false);\n}\n```\n\n### \u91cd\u590d\n\n\u5b8f\u5728\u53c2\u6570\u5217\u8868\u4e2d\u53ef\u4ee5\u4f7f\u7528 `+` \u6765\u8868\u793a\u4e00\u4e2a\u53c2\u6570\u53ef\u80fd\u51fa\u73b0\u4e00\u6b21\u6216\u591a\u6b21\uff0c\u4f7f\u7528 `*` \u6765\u8868\u793a\u8be5 \u53c2\u6570\u53ef\u80fd\u51fa\u73b0\u96f6\u6b21\u6216\u591a\u6b21\u3002\n\n```rust\n// `min!` \u5c06\u6c42\u51fa\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\u7684\u6700\u5c0f\u503c\u3002\nmacro_rules! find_min {\n    // \u57fa\u672c\u60c5\u5f62\uff1a\n    ($x:expr) => ($x);\n    // `$x` \u540e\u9762\u8ddf\u7740\u81f3\u5c11\u4e00\u4e2a `$y,`\n    ($x:expr, $($y:expr),+) => (\n        // \u5bf9 `$x` \u540e\u9762\u7684 `$y` \u4eec\u8c03\u7528 `find_min!`\n        std::cmp::min($x, find_min!($($y),+))\n    )\n}\n\nfn main() {\n    println!("{}", find_min!(1u32));\n    println!("{}", find_min!(1u32 + 2 , 2u32));\n    println!("{}", find_min!(5u32, 2u32 * 3, 4u32));\n}\n```\n\n### DRY (\u4e0d\u5199\u91cd\u590d\u4ee3\u7801)\n\n```rust\nuse std::ops::{Add, Mul, Sub};\n\nmacro_rules! assert_equal_len {\n    // `tt`\uff08token tree\uff0c\u6807\u8bb0\u6811\uff09\u6307\u793a\u7b26\u8868\u793a\u8fd0\u7b97\u7b26\u548c\u6807\u8bb0\u3002\n    ($a:ident, $b: ident, $func:ident, $op:tt) => (\n        assert!($a.len() == $b.len(),\n                "{:?}: dimension mismatch: {:?} {:?} {:?}",\n                stringify!($func),\n                ($a.len(),),\n                stringify!($op),\n                ($b.len(),));\n    )\n}\n\nmacro_rules! op {\n    ($func:ident, $bound:ident, $op:tt, $method:ident) => (\n        fn $func<T: $bound<T, Output=T> + Copy>(xs: &mut Vec<T>, ys: &Vec<T>) {\n            assert_equal_len!(xs, ys, $func, $op);\n\n            for (x, y) in xs.iter_mut().zip(ys.iter()) {\n                *x = $bound::$method(*x, *y);\n                // *x = x.$method(*y);\n            }\n        }\n    )\n}\n\n// \u5b9e\u73b0 `add_assign`\u3001`mul_assign` \u548c `sub_assign` \u7b49\u51fd\u6570\u3002\nop!(add_assign, Add, +=, add);\nop!(mul_assign, Mul, *=, mul);\nop!(sub_assign, Sub, -=, sub);\n\nmod test {\n    use std::iter;\n    macro_rules! test {\n        ($func: ident, $x:expr, $y:expr, $z:expr) => {\n            #[test]\n            fn $func() {\n                for size in 0usize..10 {\n                    let mut x: Vec<_> = iter::repeat($x).take(size).collect();\n                    let y: Vec<_> = iter::repeat($y).take(size).collect();\n                    let z: Vec<_> = iter::repeat($z).take(size).collect();\n\n                    super::$func(&mut x, &y);\n\n                    assert_eq!(x, z);\n                }\n            }\n        }\n    }\n\n    // \u6d4b\u8bd5 `add_assign`\u3001`mul_assign` \u548c `sub_assign`\n    test!(add_assign, 1u32, 2u32, 3u32);\n    test!(mul_assign, 2u32, 3u32, 6u32);\n    test!(sub_assign, 3u32, 2u32, 1u32);\n}\n```\n\n### DSL\uff08\u9886\u57df\u4e13\u7528\u8bed\u8a00\uff09\n\n```rust\nmacro_rules! calculate {\n    (eval $e:expr) => {{\n        {\n            let val: usize = $e; // \u5f3a\u5236\u7c7b\u578b\u4e3a\u6574\u578b\n            println!("{} = {}", stringify!{$e}, val);\n        }\n    }};\n}\n\nfn main() {\n    calculate! {\n        eval 1 + 2 // \u770b\u5230\u4e86\u5427\uff0c`eval` \u53ef\u5e76\u4e0d\u662f Rust \u7684\u5173\u952e\u5b57\uff01\n    }\n\n    calculate! {\n        eval (1 + 2) * (3 / 4)\n    }\n}\n```\n\n### \u53ef\u53d8\u53c2\u6570\u63a5\u53e3\n\n```rust\nmacro_rules! calculate {\n    // \u5355\u4e2a `eval` \u7684\u6a21\u5f0f\n    (eval $e:expr) => {{\n        {\n            let val: usize = $e; // Force types to be integers\n            println!("{} = {}", stringify!{$e}, val);\n        }\n    }};\n\n    // \u9012\u5f52\u5730\u62c6\u89e3\u591a\u91cd\u7684 `eval`\n    (eval $e:expr, $(eval $es:expr),+) => {{\n        calculate! { eval $e }\n        calculate! { $(eval $es),+ }\n    }};\n}\n\nfn main() {\n    calculate! { // \u5988\u5988\u5feb\u770b\uff0c\u53ef\u53d8\u53c2\u6570\u7684 `calculate!`\uff01\n        eval 1 + 2,\n        eval 3 + 4,\n        eval (2 * 3) + 1\n    }\n}\n```\n\n## \u8fc7\u7a0b\u5b8f\uff08procedural macros\uff09\n\n- \u521b\u5efa\u8fc7\u7a0b\u5b8f\u65f6\uff0c\u5176\u5b9a\u4e49\u5fc5\u987b\u9a7b\u7559\u5728\u5b83\u4eec\u81ea\u5df1\u7684\u5177\u6709\u7279\u6b8a crate \u7c7b\u578b\u7684 crate \u4e2d\u3002\n- \u53ef\u4ee5\u5728\u540c\u4e00\u4e2a crate \u4e2d\u62e5\u6709\u591a\u79cd\u8fc7\u7a0b\u5b8f\u3002\n\n```rust\n// src/lib.rs\nuse proc_macro;\n// some_attribute \u662f\u4e00\u4e2a\u4f7f\u7528\u7279\u5b9a\u5b8f\u7684\u5360\u4f4d\u7b26\u3002\n#[some_attribute]\npub fn some_name(input: TokenStream) -> TokenStream {\n}\n```\n\n### \u81ea\u5b9a\u4e49 derive \u5b8f\n\n#### \u672a\u4f7f\u7528\u5b8f\u7684\u4ee3\u7801\n\n```rust\n// src/lib.rs\npub trait HelloMacro {\n    fn hello_macro();\n}\n```\n\n```rust\n// src/main.rs\nuse hello_macro::HelloMacro;\nstruct Pancakes;\nimpl HelloMacro for Pancakes {\n    fn hello_macro() {\n        println!("Hello, Macro! My name is Pancakes!");\n    }\n}\nfn main() {\n    Pancakes::hello_macro();\n}\n```\n\n#### \u4f7f\u7528\u5b8f\n\n```sh\n# \u76ee\u5f55\u7ed3\u6784\n\u251c\u2500\u2500 hello_macro\n\u2502\xa0\xa0 \u251c\u2500\u2500 Cargo.lock\n\u2502\xa0\xa0 \u251c\u2500\u2500 Cargo.toml\n\u2502\xa0\xa0 \u251c\u2500\u2500 hello_macro_derive\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Cargo.toml\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 src\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 lib.rs\n\u2502\xa0\xa0 \u2514\u2500\u2500 src\n\u2502\xa0\xa0     \u2514\u2500\u2500 lib.rs\n\u251c\u2500\u2500 pancakes\n\u2502\xa0\xa0 \u251c\u2500\u2500 Cargo.lock\n\u2502\xa0\xa0 \u251c\u2500\u2500 Cargo.toml\n\u2502\xa0\xa0 \u2514\u2500\u2500 src\n\u2502\xa0\xa0     \u2514\u2500\u2500 main.rs\n```\n\n```rust\n// hello_macro/src/lib.rs\npub trait HelloMacro {\n    fn hello_macro();\n}\n```\n\n```toml\n# hello_macro/hello_macro_derive/Cargo.toml\n[lib]\nproc-macro = true\n\n[dependencies]\nsyn = "1.0"\nquote = "1.0"\n```\n\n```rust\n// hello_macro/hello_macro_derive/src/lib.rs\nextern crate proc_macro;\n\nuse crate::proc_macro::TokenStream;\nuse quote::quote; // quote \u5219\u5c06 syn \u89e3\u6790\u7684\u6570\u636e\u7ed3\u6784\u8f6c\u6362\u56de Rust \u4ee3\u7801\u3002\nuse syn; // syn crate \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684 Rust \u4ee3\u7801\u89e3\u6790\u6210\u4e3a\u4e00\u4e2a\u53ef\u4ee5\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u3002\n\n// hello_macro_derive \u51fd\u6570\u8d1f\u8d23\u89e3\u6790 TokenStream\uff0c\n// impl_hello_macro \u51fd\u6570\u5219\u8d1f\u8d23\u8f6c\u6362\u8bed\u6cd5\u6811\uff1a\n// \u5f53\u7528\u6237\u5728\u4e00\u4e2a\u7c7b\u578b\u4e0a\u6307\u5b9a #[derive(HelloMacro)] \u65f6\uff0c\n// hello_macro_derive \u51fd\u6570\u5c06\u4f1a\u88ab\u8c03\u7528\u3002\n#[proc_macro_derive(HelloMacro)]\npub fn hello_macro_derive(input: TokenStream) -> TokenStream {\n    // \u5c06 Rust \u4ee3\u7801\u89e3\u6790\u4e3a\u8bed\u6cd5\u6811\u4ee5\u4fbf\u8fdb\u884c\u64cd\u4f5c\n    let ast = syn::parse(input).unwrap();\n\n    // \u6784\u5efa trait \u5b9e\u73b0\n    impl_hello_macro(&ast)\n}\n\n// \u4f7f\u7528\u89e3\u6790\u8fc7\u7684 Rust \u4ee3\u7801\u5b9e\u73b0 HelloMacro trait\nfn impl_hello_macro(ast: &syn::DeriveInput) -> TokenStream {\n    let name = &ast.ident;\n    // quote! \u5b8f\u8ba9\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u5e0c\u671b\u8fd4\u56de\u7684 Rust \u4ee3\u7801\u3002\n    let gen = quote! {\n        // \u6a21\u677f\u673a\u5236\uff1a\u5199 #name \uff0c\u7136\u540e quote! \u4f1a\u4ee5\u540d\u4e3a name \u7684\u53d8\u91cf\u503c\u6765\u66ff\u6362\u5b83\u3002\n        impl HelloMacro for #name {\n            fn hello_macro() {\n                // stringify! \u4e3a Rust \u5185\u7f6e\u5b8f\u3002\n                // \u5176\u63a5\u6536\u4e00\u4e2a Rust \u8868\u8fbe\u5f0f\uff0c\u5982 1 + 2 \uff0c \u7136\u540e\u5728\u7f16\u8bd1\u65f6\u5c06\u8868\u8fbe\u5f0f\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e38\u91cf\n                println!("Hello, Macro! My name is {}", stringify!(#name));\n            }\n        }\n    };\n    // quote! \u5b8f\u6267\u884c\u7684\u76f4\u63a5\u7ed3\u679c\u5e76\u4e0d\u662f\u7f16\u8bd1\u5668\u6240\u671f\u671b\u7684\u5e76\u9700\u8981\u8f6c\u6362\u4e3a TokenStream\u3002\n    // \u4e3a\u6b64\u9700\u8981\u8c03\u7528 into \u65b9\u6cd5\n    gen.into()\n}\n```\n\n```toml\n# pancakes/Cargo.toml\n[dependencies]\nhello_macro = { path = "../hello_macro" }\nhello_macro_derive = { path = "../hello_macro/hello_macro_derive" }\n```\n\n```rust\n// pancakes/src/main.rs\nuse hello_macro::HelloMacro;\nuse hello_macro_derive::HelloMacro;\n\n#[derive(HelloMacro)]\nstruct Pancakes;\n\nfn main() {\n    Pancakes::hello_macro();\n}\n```\n\n```rust\n// \u8bed\u6cd5\u6811 DeriveInput \u7ed3\u6784\u4f53\nDeriveInput {\n    // --snip--\n    ident: Ident {\n        ident: "Pancakes",\n        span: #0 bytes(95..103)\n    },\n    data: Struct(\n        DataStruct {\n            struct_token: Struct,\n            fields: Unit,\n            semi_token: Some(\n                Semi\n            )\n        }\n    )\n}\n```\n\n### \u7c7b\u5c5e\u6027\u5b8f\n\n- \u7c7b\u5c5e\u6027\u5b8f\u4e0e\u81ea\u5b9a\u4e49\u6d3e\u751f\u5b8f\u76f8\u4f3c\uff0c\u4e0d\u540c\u4e8e\u4e3a derive \u5c5e\u6027\u751f\u6210\u4ee3\u7801\uff0c\u5b83\u4eec\u5141\u8bb8\u4f60\u521b\u5efa\u65b0\u7684\u5c5e\u6027\u3002\n- derive \u53ea\u80fd\u7528\u4e8e\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\uff1b\u5c5e\u6027\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5176\u5b83\u7684\u9879\uff0c\u6bd4\u5982\u51fd\u6570\u3002\n\n```rust\n// \u4f7f\u7528\u4f8b\u5b50\n#[route(GET, "/")]\nfn index() {}\n\n// \u5b8f\u5b9a\u4e49\u7684\u51fd\u6570\u7b7e\u540d\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n// \u4e24\u4e2a TokenStream \u7c7b\u578b\u7684\u53c2\u6570\uff1b\n// \u7b2c\u4e00\u4e2a\u7528\u4e8e\u5c5e\u6027\u5185\u5bb9\u672c\u8eab\uff0c\u4e5f\u5c31\u662f GET, "/" \u90e8\u5206\u3002\n// \u7b2c\u4e8c\u4e2a\u662f\u5c5e\u6027\u6240\u6807\u8bb0\u7684\u9879\uff1a\u5728\u672c\u4f8b\u4e2d\uff0c\u662f fn index() {} \u548c\u5269\u4e0b\u7684\u51fd\u6570\u4f53\u3002\n#[proc_macro_attribute]\npub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {}\n```\n\n### \u7c7b\u51fd\u6570\u5b8f\n\n- \u7c7b\u51fd\u6570\u5b8f\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u51fd\u6570\u8c03\u7528\u7684\u5b8f\u3002\n- \u7c7b\u4f3c\u4e8e `macro_rules!`\uff0c\u5b83\u4eec\u6bd4\u51fd\u6570\u66f4\u7075\u6d3b\uff1b\u4f8b\u5982\uff0c\u53ef\u4ee5\u63a5\u53d7\u672a\u77e5\u6570\u91cf\u7684\u53c2\u6570\u3002\n\n```rust\n// \u4e00\u4e2a\u7c7b\u51fd\u6570\u5b8f\u4f8b\u5b50\nlet sql = sql!(SELECT * FROM posts WHERE id=1);\n\n// sql! \u5b8f\u5e94\u8be5\u88ab\u5b9a\u4e49\u4e3a\u5982\u6b64\uff1a\n#[proc_macro]\npub fn sql(input: TokenStream) -> TokenStream {}\n```\n'},eYaZ:function(n,t,e){"use strict";e.r(t),t.default="```dart\na = value;   // \u7ed9 a \u53d8\u91cf\u8d4b\u503c\nb ??= value; // \u5982\u679c b \u662f null\uff0c\u5219\u8d4b\u503c\u7ed9 b\uff1b\n             // \u5982\u679c\u4e0d\u662f null\uff0c\u5219 b \u7684\u503c\u4fdd\u6301\u4e0d\u53d8\n```\n\n```dart\n// \u4e0d\u8981 \u663e\u5f0f\u7684\u628a\u53d8\u91cf\u521d\u59cb\u5316\u4e3a null\nint _nextId;\nassert(_nextId == null);\n\n// \u6ca1\u6709\u660e\u786e\u7c7b\u578b\nvar name = 'Bob';\nObject name = 'Bob';\ndynamic name = 'Bob';\n\n// \u53ef\u4ee5\u9009\u62e9\u52a0\u4e0a\u5177\u4f53 \u7c7b\u578b\n// \u5bf9\u4e8e\u5c40\u90e8\u53d8\u91cf\uff0c\u8fd9\u91cc\u51c6\u5b88 \u4ee3\u7801\u98ce\u683c\u63a8\u8350 \u90e8\u5206\u7684\u5efa\u8bae\uff0c\n// \u4f7f\u7528 var \u800c\u4e0d\u662f\u5177\u4f53\u7684\u7c7b\u578b\u6765\u5b9a\u4e49\u5c40\u90e8\u53d8\u91cf\u3002\nString name2 = 'Bob';\n\n// \u5b9a\u4e49\u96c6\u5408\nvar points = [];\nvar addresses = {};\n// \u5982\u679c\u6709\u5fc5\u8981\u8fd8\u53ef\u4ee5\u63d0\u4f9b\u6cdb\u578b\u7c7b\u578b\nvar points = <Point>[];\nvar addresses = <String, Address>{};\n```\n\n### \u79c1\u6709\u53d8\u91cf\n\n```dart\n// \u53d8\u91cf\u540d\u4ee5\"_\"\u5f00\u5934\u610f\u5473\u7740\u5bf9\u5b83\u7684 lib \u662f\u79c1\u6709\u7684\nvar _name = 'Bob';\n```\n"},ecQd:function(n,t,e){"use strict";e.r(t),t.default="```dart\nvar l = [1, 2, 3];\n\n// \u5728 list \u5b57\u9762\u91cf\u4e4b\u524d\u6dfb\u52a0 const \u5173\u952e\u5b57\uff0c\n// \u53ef\u4ee5 \u5b9a\u4e49\u4e00\u4e2a\u4e0d\u53d8\u7684 list \u5bf9\u8c61\uff08\u7f16\u8bd1\u65f6\u5e38\u91cf\uff09\nvar constantList = const [1, 2, 3];\nvar names = <String>['Seth', 'Kathy', 'Lars'];\n\n// Use a List constructor.\nvar vegetables = new List();\n\n// Or simply use a list literal.\nvar fruits = ['apples', 'oranges'];\n\n// Add to a list.\nfruits.add('kiwis');\n\n// Add multiple items to a list.\nfruits.addAll(['grapes', 'bananas']);\n\n// Get the list length.\nassert(fruits.length == 5);\n\n// Remove a single item.\nvar appleIndex = fruits.indexOf('apples');\nfruits.removeAt(appleIndex);\nassert(fruits.length == 4);\n\n// Remove all elements from a list.\nfruits.clear();\nassert(fruits.length == 0);\n\n// \u4f7f\u7528 indexOf() \u6765\u67e5\u627e list \u4e2d\u5bf9\u8c61\u7684\u7d22\u5f15\nvar fruits = ['apples', 'oranges'];\n// Access a list item by index.\nassert(fruits[0] == 'apples');\n// Find an item in a list.\nassert(fruits.indexOf('apples') == 0);\n\n// \u6392\u5e8f\nvar fruits = ['bananas', 'apples', 'oranges'];\n// Sort a list.\nfruits.sort((a, b) => a.compareTo(b));\nassert(fruits[0] == 'apples');\n\n// \u53ef\u4ee5\u4f7f\u7528 map().toList() \u6216\u8005 map().toSet() \u6765 \u5f3a\u5236\u7acb\u523b\u6267\u884c map \u7684\u65b9\u6cd5\uff1a\nvar loudTeaList = teas\n    .map((tea) => tea.toUpperCase())\n    .toList();\n```\n\n## \u5217\u8868\u9ad8\u9636\u51fd\u6570\n\n```dart\n// \u4f7f\u7528 forEach() \u51fd\u6570\u53ef\u4ee5\u5bf9\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u6570\u636e\u90fd\u5e94\u7528 \u4e00\u4e2a\u65b9\u6cd5\uff1a\nvar teas = ['green', 'black', 'chamomile', 'earl grey'];\nteas.forEach((tea) => print('I drink $tea'));\n\n// \u5728 Map \u4e0a\u4f7f\u7528 forEach() \u7684\u65f6\u5019\uff0c\u65b9\u6cd5\u9700\u8981\u80fd \u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff08key \u548c value\uff09\uff1a\nhawaiianBeaches.forEach((k, v) {\n  print('I want to visit $k and swim at $v');\n  // I want to visit Oahu and swim at\n  // [Waikiki, Kailua, Waimanalo], etc.\n});\n\n// Iterables \u4e5f\u6709\u4e00\u4e2a map() \u51fd\u6570\uff0c\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6240\u6709\u6570\u636e\u7684\u5bf9\u8c61\uff1a\nvar teas = ['green', 'black', 'chamomile', 'earl grey'];\nvar loudTeas = teas.map((tea) => tea.toUpperCase());\nloudTeas.forEach(print);\n// map() \u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61\u4e5f\u662f\u4e00\u4e2a Iterable\uff0c\u8be5\u5bf9\u8c61\u662f\u61d2\u6c42\u503c\uff08lazily evaluated\uff09 \u7684\uff0c\n// \u53ea\u6709\u5f53\u8bbf\u95ee\u91cc\u9762\u7684\u503c\u7684\u65f6\u5019\uff0c map \u7684\u65b9\u6cd5\u624d\u88ab\u8c03\u7528\u3002\n// \u53ef\u4ee5\u4f7f\u7528 map().toList() \u6216\u8005 map().toSet() \u6765 \u5f3a\u5236\u7acb\u523b\u6267\u884c map \u7684\u65b9\u6cd5\uff1a\nvar loudTeaList = teas\n    .map((tea) => tea.toUpperCase())\n    .toList();\n\n// Iterable \u7684 where() \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u6240\u6709\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\u7684\u6570\u636e\u3002\n// any() \u5224\u65ad\u662f\u5426\u6709\u6570\u636e\u6ee1\u8db3\u7279\u5b9a\u6761\u4ef6\uff0c\n// every() \u5224\u65ad\u662f\u5426\u6240\u6709\u6570\u636e\u90fd\u6ee1\u8db3 \u7279\u5b9a\u6761\u4ef6\u3002\n\nvar teas = ['green', 'black', 'chamomile', 'earl grey'];\n\n// Chamomile is not caffeinated.\nbool isDecaffeinated(String teaName) =>\n    teaName == 'chamomile';\n\n// Use where() to find only the items that return true\n// from the provided function.\nvar decaffeinatedTeas = teas\n    .where((tea) => isDecaffeinated(tea));\n// or teas.where(isDecaffeinated)\n\n// Use any() to check whether at least one item in the\n// collection satisfies a condition.\nassert(teas.any(isDecaffeinated));\n\n// Use every() to check whether all the items in a\n// collection satisfy a condition.\nassert(!teas.every(isDecaffeinated));\n```\n"},emeC:function(n,t){throw new Error("Module parse failed: Unexpected character '\ufffd' (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n(Source code omitted for this binary file)")},enIB:function(n,t,e){"use strict";e.r(t),t.default="\u4e00\u4e2a\u6392\u5e8f\u7b97\u6cd5\n\n```go\ntype tree struct {\n    value       int\n    left, right *tree\n}\n\n// Sort sorts values in place.\nfunc Sort(values []int) {\n    var root *tree\n    for _, v := range values {\n        root = add(root, v)\n    }\n    appendValues(values[:0], root)\n}\n\n// appendValues appends the elements of t to values in order\n// and returns the resulting slice.\nfunc appendValues(values []int, t *tree) []int {\n    if t != nil {\n        values = appendValues(values, t.left)   // \u9012\u5f52\u5de6\u8fb9\uff0c\u5982\u679c\u662fnil\uff0c\u4f1a\u8fd4\u56de\u539f\u5207\u7247\n        values = append(values, t.value)        // \u6dfb\u52a0\u5230\u5207\u7247\n        values = appendValues(values, t.right)  // \u9012\u5f52\u53f3\u8fb9\uff0c\u5982\u679c\u662fnil\uff0c\u4f1a\u8fd4\u56de\u539f\u5207\u7247\n    }\n    return values\n}\n\n// \u6309\u987a\u5e8f\u6dfb\u52a0\u5230\u6811\nfunc add(t *tree, value int) *tree {\n    if t == nil {\n        // Equivalent to return &tree{value: value}.\n        t = new(tree)\n        t.value = value\n        return t\n    }\n    if value < t.value {\n        t.left = add(t.left, value)\n    } else {\n        t.right = add(t.right, value)\n    }\n    return t\n}\n```\n"},epbq:function(n,t,e){"use strict";e.r(t),t.default='\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n\n```go\n/*\n\u7ed9\u5b9a\u4e00\u4e9b\u8ba1\u7b97\u673a\u8bfe\u7a0b\uff0c\u6bcf\u4e2a\u8bfe\u7a0b\u90fd\u6709\u524d\u7f6e\u8bfe\u7a0b\uff0c\n\u53ea\u6709\u5b8c\u6210\u4e86\u524d\u7f6e\u8bfe\u7a0b\u624d\u53ef\u4ee5\u5f00\u59cb\u5f53\u524d\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1b\n\u6211\u4eec\u7684\u76ee\u6807\u662f\u9009\u62e9\u51fa\u4e00\u7ec4\u8bfe\u7a0b\uff0c\n\u8fd9\u7ec4\u8bfe\u7a0b\u5fc5\u987b\u786e\u4fdd\u6309\u987a\u5e8f\u5b66\u4e60\u65f6\uff0c\u80fd\u5168\u90e8\u88ab\u5b8c\u6210\u3002\n*/\nfunc main() {\n    for i, course := range topoSort(prereqs) {\n        fmt.Printf("%d:\\t%s\\n", i+1, course)\n    }\n}\n// prereqs\u8bb0\u5f55\u4e86\u6bcf\u4e2a\u8bfe\u7a0b\u7684\u524d\u7f6e\u8bfe\u7a0b\nvar prereqs = map[string][]string{\n    "algorithms": {"data structures"},\n    "calculus": {"linear algebra"},\n    "compilers": {\n        "data structures",\n        "formal languages",\n        "computer organization",\n    },\n    "data structures":       {"discrete math"},\n    "databases":             {"data structures"},\n    "discrete math":         {"intro to programming"},\n    "formal languages":      {"discrete math"},\n    "networks":              {"operating systems"},\n    "operating systems":     {"data structures", "computer organization"},\n    "programming languages": {"data structures", "computer organization"},\n}\nfunc topoSort(m map[string][]string) []string {\n    var order []string\n    seen := make(map[string]bool)\n    // \u5f53\u533f\u540d\u51fd\u6570\u9700\u8981\u88ab\u9012\u5f52\u8c03\u7528\u65f6\uff0c\u6211\u4eec\u5fc5\u987b\u9996\u5148\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\n    var visitAll func(items []string)\n    visitAll = func(items []string) {\n        for _, item := range items {\n            if !seen[item] {\n                seen[item] = true\n                visitAll(m[item]) // \u9012\u5f52\n                order = append(order, item)\n            }\n        }\n    }\n    var keys []string\n    for key := range m {\n        keys = append(keys, key)\n    }\n    sort.Strings(keys) // \u6392\u5e8f\n    visitAll(keys)\n    return order\n}\n```\n\n\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u56fe\n\n```go\n// breadthFirst calls f for each item in the worklist.\n// Any items returned by f are added to the worklist.\n// f is called at most once for each item.\nfunc breadthFirst(f func(item string) []string, worklist []string) {\n    seen := make(map[string]bool)\n    for len(worklist) > 0 {\n        items := worklist\n        worklist = nil\n        for _, item := range items {\n            if !seen[item] {\n                seen[item] = true\n                worklist = append(worklist, f(item)...)\n            }\n        }\n    }\n}\nfunc crawl(url string) []string {\n    fmt.Println(url)\n    list, err := links.Extract(url)\n    if err != nil {\n        log.Print(err)\n    }\n    return list\n}\nfunc main() {\n    // Crawl the web breadth-first,\n    // starting from the command-line arguments.\n    breadthFirst(crawl, os.Args[1:])\n}\n```\n'},euzM:function(n,t,e){"use strict";e.r(t),t.default='```rust\nuse std::collections::HashMap;\n\n// \u65b0\u5efa\u4e00\u4e2a\u54c8\u5e0c map\nlet mut scores = HashMap::new();\n\n// \u4f7f\u7528 insert \u589e\u52a0\u5143\u7d20\nscores.insert(String::from("Blue"), 10);\nscores.insert(String::from("Yellow"), 50);\n\n// \u8986\u76d6\u4e00\u4e2a\u503c\nscores.insert(String::from("Blue"), 25);\n\n// \u53ea\u5728\u952e\u6ca1\u6709\u5bf9\u5e94\u503c\u65f6\u63d2\u5165\n// entry \u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u679a\u4e3e\uff0cEntry\uff0c\n// \u5b83\u4ee3\u8868\u4e86\u53ef\u80fd\u5b58\u5728\u4e5f\u53ef\u80fd\u4e0d\u5b58\u5728\u7684\u503c\n// or_insert \u65b9\u6cd5\u5728\u952e\u5bf9\u5e94\u7684\u503c\u5b58\u5728\u65f6\u5c31\u8fd4\u56de\u8fd9\u4e2a\u503c\u7684\u53ef\u53d8\u5f15\u7528\uff0c\n// \u5982\u679c\u4e0d\u5b58\u5728\u5219\u5c06\u53c2\u6570\u4f5c\u4e3a\u65b0\u503c\u63d2\u5165\u5e76\u8fd4\u56de\u65b0\u503c\u7684\u53ef\u53d8\u5f15\u7528\u3002\nscores.entry(String::from("Yellow")).or_insert(50);\nscores.entry(String::from("Blue")).or_insert(50);\n\n// \u8bbf\u95ee\u54c8\u5e0c map \u4e2d\u7684\u503c\n// \u56e0\u4e3a get \u8fd4\u56de Option<V>\uff0c\u6240\u4ee5\u7ed3\u679c\u88ab\u88c5\u8fdb Some\uff1b\n// \u5982\u679c\u67d0\u4e2a\u952e\u5728\u54c8\u5e0c map \u4e2d\u6ca1\u6709\u5bf9\u5e94\u7684\u503c\uff0cget \u4f1a\u8fd4\u56de None\nlet team_name = String::from("Blue");\nlet score = scores.get(&team_name);\n\n// \u904d\u5386\u54c8\u5e0c map\nfor (key, value) in &scores {\n    println!("{}: {}", key, value);\n}\n\n// \u6839\u636e\u65e7\u503c\u66f4\u65b0\u4e00\u4e2a\u503c\nlet text = "hello world wonderful world";\nlet mut map = HashMap::new();\nfor word in text.split_whitespace() {\n    let count = map.entry(word).or_insert(0); // \u6ca1\u6709key\u5219\u63d2\u5165\uff0c\u5e76\u521d\u59cb\u5316\n    *count += 1; // \u66f4\u65b0\n}\nprintln!("{:?}", map);\n\n// \u7528\u961f\u4f0d\u5217\u8868\u548c\u5206\u6570\u5217\u8868\u521b\u5efa\u54c8\u5e0c map\nlet teams  = vec![String::from("Blue"), String::from("Yellow")];\nlet initial_scores = vec![10, 50];\n// \u8fd9\u91cc HashMap<_, _> \u7c7b\u578b\u6807\u6ce8\u662f\u5fc5\u8981\u7684\uff0c\n// \u56e0\u4e3a collect \u6709\u53ef\u80fd\u5f53\u6210\u591a\u79cd\u4e0d\u540c\u7684\u6570\u636e\u7ed3\u6784\nlet scores: HashMap<_, _> = teams.iter().zip(initial_scores.iter()).collect();\n```\n'},"f/FD":function(n,t,e){"use strict";e.r(t),t.default="Dart \u5b57\u7b26\u4e32\u662f UTF-16 \u7f16\u7801\u7684\u5b57\u7b26\u5e8f\u5217\u3002\n\u53ef\u4ee5\u4f7f\u7528\u5355\u5f15\u53f7\u6216\u8005\u53cc\u5f15\u53f7\u6765\u521b\u5efa\u5b57\u7b26\u4e32\uff1a\n\n```dart\nvar s1 = 'Single quotes work well for string literals.';\nvar s2 = \"Double quotes work just as well.\";\nvar s3 = 'It\\'s easy to escape the string delimiter.';\nvar s4 = \"It's even easier to use the other delimiter.\";\n```\n\n\u4f7f\u7528\u4e09\u4e2a\u5355\u5f15\u53f7\u6216\u8005\u53cc\u5f15\u53f7\u4e5f\u53ef\u4ee5 \u521b\u5efa\u591a\u884c\u5b57\u7b26\u4e32\u5bf9\u8c61\uff1a\n\n```dart\nvar s1 = '''\nYou can create\nmulti-line strings like this one.\n''';\n\nvar s2 = \"\"\"This is also a\nmulti-line string.\"\"\";\n```\n\n```dart\nvar s = r\"In a raw string, even \\n isn't special.\";\n```\n"},fX9S:function(n,t,e){"use strict";e.r(t),t.default='## match \u63d0\u4f9b\u4e86 `@` \u7b26\u53f7\u6765\u7ed1\u5b9a\u53d8\u91cf\u5230\u540d\u79f0\uff1a\n\n```rust\n// `age` \u51fd\u6570\uff0c\u8fd4\u56de\u4e00\u4e2a `u32` \u503c\u3002\nfn age() -> u32 {\n    15\n}\nfn main() {\n    println!("Tell me what type of person you are");\n    match age() {\n        0             => println!("I haven\'t celebrated my first birthday yet"),\n        // \u53ef\u4ee5\u76f4\u63a5\u5339\u914d\uff08`match`\uff09 1 ..= 12\uff0c\u4f46\u90a3\u6837\u7684\u8bdd\u5b69\u5b50\u4f1a\u662f\u51e0\u5c81\uff1f\n        // \u76f8\u53cd\uff0c\u5728 1 ..= 12 \u5206\u652f\u4e2d\u7ed1\u5b9a\u5339\u914d\u503c\u5230 `n` \u3002\u73b0\u5728\u5e74\u9f84\u5c31\u53ef\u4ee5\u8bfb\u53d6\u4e86\u3002\n        n @ 1  ..= 12 => println!("I\'m a child of age {:?}", n),\n        n @ 13 ..= 19 => println!("I\'m a teen of age {:?}", n),\n        // \u4e0d\u7b26\u5408\u4e0a\u9762\u7684\u8303\u56f4\u3002\u8fd4\u56de\u7ed3\u679c\u3002\n        n             => println!("I\'m an old person of age {:?}", n),\n    }\n}\n```\n\n```rust\nfn some_number() -> Option<u32> {\n    Some(42)\n}\nfn main() {\n    match some_number() {\n        // \u5f97\u5230 `Some` \u53ef\u53d8\u7c7b\u578b\uff0c\u5982\u679c\u5b83\u7684\u503c\uff08\u7ed1\u5b9a\u5230 `n` \u4e0a\uff09\u7b49\u4e8e 42\uff0c\u5219\u5339\u914d\u3002\n        Some(n @ 42) => println!("The Answer: {}!", n),\n        // \u5339\u914d\u4efb\u610f\u5176\u4ed6\u6570\u5b57\u3002\n        Some(n)      => println!("Not interesting... {}", n),\n        // \u5339\u914d\u4efb\u610f\u5176\u4ed6\u503c\uff08`None` \u53ef\u53d8\u7c7b\u578b\uff09\u3002\n        _            => (),\n    }\n}\n```\n'},"fd/u":function(n,t,e){"use strict";e.r(t),t.default='```c++\n// \u5c06\u6e90\u7801\u91cc\u9762\u7684MAX\uff0c\u5168\u90e8\u66ff\u6362\u6210100\n#define MAX 100\n\n\n#define HELLO "Hello, world"\n// \u76f8\u5f53\u4e8e printf("%s", "Hello, world");\nprintf("%s", HELLO);\n\n\n// \u591a\u91cd\u66ff\u6362\n#define TWO 2\n#define FOUR TWO*TWO\n\n\n// \u5982\u679c\u5b8f\u51fa\u73b0\u5728\u5b57\u7b26\u4e32\u91cc\u9762\uff08\u5373\u51fa\u73b0\u5728\u53cc\u5f15\u53f7\u4e2d\uff09\uff0c\u6216\u8005\u662f\u5176\u4ed6\u6807\u8bc6\u7b26\u7684\u4e00\u90e8\u5206\uff0c\u5c31\u4f1a\u5931\u6548\uff0c\u5e76\u4e0d\u4f1a\u53d1\u751f\u66ff\u6362\n#define TWO 2\nprintf("TWO\\n"); // \u8f93\u51fa TWO\nconst TWOs = 22;\nprintf("%d\\n", TWOs); // \u8f93\u51fa 22\n```\n\n## \u5e26\u53c2\u6570\u7684\u5b8f\n\n```c++\n// \u5b8fSQUARE\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570X\uff0c\u66ff\u6362\u6210X*X\n#define SQUARE(X) X*X\n// \u66ff\u6362\u6210 z = 2*2;\nz = SQUARE(2);\n\n\n// \u8f93\u51fa19\n// 3 + 4*3 + 4\nprintf("%d\\n", SQUARE(3 + 4));\n\n\n// \u5c3d\u91cf\u591a\u4f7f\u7528\u5706\u62ec\u53f7\uff0c\u907f\u514d\u610f\u5916\n#define SQUARE(X) ((X) * (X))\n\n\n// \u4e00\u4e9b\u4f8b\u5b50\n#define getchar() getc(stdin)\n#define MAX(x, y) ((x)>(y)?(x):(y))\n#define IS_EVEN(n) ((n)%2==0)\n\n// \u5d4c\u5957 (\u4e00\u5143\u4e8c\u6b21\u65b9\u7a0b\u7ec4\u6c42\u89e3\u7684\u5b8f)\n// \u7531\u4e8e\u5b58\u5728\u6b63\u8d1f\u4e24\u4e2a\u89e3\uff0c\u6240\u4ee5\u5b8fQUAD\u5148\u66ff\u6362\u6210\u53e6\u5916\u4e24\u4e2a\u5b8fQUADP\u548cQUADM\uff0c\u540e\u8005\u518d\u5404\u81ea\u66ff\u6362\u6210\u4e00\u4e2a\u89e3\n#define QUADP(a, b, c) ((-(b) + sqrt((b) * (b) - 4 * (a) * (c))) / (2 * (a)))\n#define QUADM(a, b, c) ((-(b) - sqrt((b) * (b) - 4 * (a) * (c))) / (2 * (a)))\n#define QUAD(a, b, c) QUADP(a, b, c), QUADM(a, b, c)\n```\n\n## `#`\u8fd0\u7b97\u7b26\uff0c`##`\u8fd0\u7b97\u7b26\n\n```c++\n// \u5e0c\u671b\u66ff\u6362\u540e\u7684\u503c\u4e3a\u5b57\u7b26\u4e32\n#define STR(x) #x\n// \u7b49\u540c\u4e8e printf("%s\\n", "3.14159");\nprintf("%s\\n", STR(3.14159));\n\n#define XNAME(n) "x"#n\n// \u8f93\u51fa x4\nprintf("%s\\n", XNAME(4));\n\n\n// \u53c2\u6570\u9700\u8981\u8ddf\u5176\u4ed6\u6807\u8bc6\u7b26\u8fde\u5728\u4e00\u8d77\uff0c\u7ec4\u6210\u4e00\u4e2a\u65b0\u7684\u6807\u8bc6\u7b26\n// \u6279\u91cf\u751f\u6210\u53d8\u91cf\u540d\u548c\u6807\u8bc6\u7b26\n#define MK_ID(n) i##n\nint MK_ID(1), MK_ID(2), MK_ID(3);\n// \u66ff\u6362\u6210\nint i1, i2, i3;\n```\n\n## \u4e0d\u5b9a\u53c2\u6570\u7684\u5b8f\n\n```c++\n#define X(a, b, ...) (10*(a) + 20*(b)), __VA_ARGS__\nX(5, 4, 3.14, "Hi!", 12)\n// \u66ff\u6362\u6210\n(10*(5) + 20*(4)), 3.14, "Hi!", 12\n```\n\n## `#undef`\n\n\u6709\u65f6\u5019\u60f3\u91cd\u65b0\u5b9a\u4e49\u4e00\u4e2a\u5b8f\uff0c\u4f46\u4e0d\u786e\u5b9a\u662f\u5426\u4ee5\u524d\u5b9a\u4e49\u8fc7\uff0c\u5c31\u53ef\u4ee5\u5148\u7528`#undef` \u53d6\u6d88\n\n```c++\n#define LIMIT 400\n#undef LIMIT // \u53d6\u6d88\u5df2\u7ecf\u4f7f\u7528#define\u5b9a\u4e49\u7684\u5b8f\n```\n\n```sh\n# \u5728\u547d\u4ee4\u884c\u53d6\u6d88\u5b8f\u7684\u5b9a\u4e49\uff0c\u76f8\u5f53\u4e8e#undef\ngcc -ULIMIT foo.c\n```\n\n## \u9884\u5b9a\u4e49\u5b8f\n\n- `__DATE__`\uff1a\u7f16\u8bd1\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a\u201cMmm dd yyyy\u201d\u7684\u5b57\u7b26\u4e32\uff08\u6bd4\u5982 Nov 23 2021\uff09\u3002\n- `__TIME__`\uff1a\u7f16\u8bd1\u65f6\u95f4\uff0c\u683c\u5f0f\u4e3a\u201chh:mm:ss\u201d\u3002\n- `__FILE__`\uff1a\u5f53\u524d\u6587\u4ef6\u540d\u3002\n- `__LINE__`\uff1a\u5f53\u524d\u884c\u53f7\u3002\n- `__func__`\uff1a\u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u51fd\u6570\u540d\u3002\u8be5\u9884\u5b9a\u4e49\u5b8f\u5fc5\u987b\u5728\u51fd\u6570\u4f5c\u7528\u57df\u4f7f\u7528\u3002\n- `__STDC__`\uff1a\u5982\u679c\u88ab\u8bbe\u4e3a 1\uff0c\u8868\u793a\u5f53\u524d\u7f16\u8bd1\u5668\u9075\u5faa C \u6807\u51c6\u3002\n- `__STDC_HOSTED__`\uff1a\u5982\u679c\u88ab\u8bbe\u4e3a 1\uff0c\u8868\u793a\u5f53\u524d\u7f16\u8bd1\u5668\u53ef\u4ee5\u63d0\u4f9b\u5b8c\u6574\u7684\u6807\u51c6\u5e93\uff1b\u5426\u5219\u88ab\u8bbe\u4e3a 0\uff08\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u6807\u51c6\u5e93\u5e38\u5e38\u662f\u4e0d\u5b8c\u6574\u7684\uff09\u3002\n- `__STDC_VERSION__`\uff1a\u7f16\u8bd1\u6240\u4f7f\u7528\u7684 C \u8bed\u8a00\u7248\u672c\uff0c\u662f\u4e00\u4e2a\u683c\u5f0f\u4e3a yyyymmL \u7684\u957f\u6574\u6570\uff0cC99 \u7248\u672c\u4e3a\u201c199901L\u201d\uff0cC11 \u7248\u672c\u4e3a\u201c201112L\u201d\uff0cC17 \u7248\u672c\u4e3a\u201c201710L\u201d\u3002\n\n```c++\n#include <stdio.h>\n\nint main(void) {\n  printf("This function: %s\\n", __func__);\n  printf("This file: %s\\n", __FILE__);\n  printf("This line: %d\\n", __LINE__);\n  printf("Compiled on: %s %s\\n", __DATE__, __TIME__);\n  printf("C Version: %ld\\n", __STDC_VERSION__);\n}\n\n/* \u8f93\u51fa\u5982\u4e0b\n\nThis function: main\nThis file: test.c\nThis line: 7\nCompiled on: Mar 29 2021 19:19:37\nC Version: 201710\n\n*/\n```\n\n```c++\n// \u5c06\u4e0b\u4e00\u884c\u7684\u884c\u53f7\u91cd\u7f6e\u4e3a 300\n#line 300\n\n\n// `#error` \u6307\u4ee4\u7528\u4e8e\u8ba9\u9884\u5904\u7406\u5668\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\uff0c\u7ec8\u6b62\u7f16\u8bd1\u3002\n#if __STDC_VERSION__ != 201112L\n  #error Not C11\n#endif\n\n\n// \u4f7f\u7528 C99 \u6807\u51c6\n#pragma c9x on\n```\n'},ffaC:function(n,t,e){"use strict";e.r(t),t.default='```python\n# \u81ea\u5b9a\u4e49\nclass Const:\n  class ConstError(TypeError) :\n    pass\n  class ConstCaseError(ConstError):\n    pass\n\n  def __setattr__(self, name, value):\n    if name in self.__dict__:\n      raise self.ConstError, "Can\'t change const value!"\n    if not name.isupper():\n      raise self.ConstCaseError, \'const "%s" is not all letters are capitalized\' %name\n    self.__dict__[name] = value\n\nimport sys\nsys.modules[__name__] = Const()\n\n# \u4f7f\u7528\nimport constant\nconstant.MAX_COUNT=1\n```\n'},fsqh:function(n,t,e){"use strict";e.r(t),t.default="- \u8981\u6d4b\u8bd5\u4e24\u4e2a\u5bf9\u8c61\u4ee3\u8868\u7684\u662f\u5426\u4e3a\u540c\u6837\u7684\u5185\u5bb9\uff0c\u4f7f\u7528 == \u64cd\u4f5c\u7b26\u3002\n- \u4e24\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff0c \u4f7f\u7528 identical() \u65b9\u6cd5\u3002\n\n```dart\nbool identical(Object a, Object b)\n```\n"},ftwC:function(n,t,e){"use strict";e.r(t),t.default='```c++\n#include <stdio.h>\n\nint main(int argc, char* argv[]) {\n    // \u53c2\u6570\u6570\u91cf\u5224\u65ad\n    if (argc != 3) {\n        printf("usage: mult x y\\n");\n        return 1;\n    }\n\n    // \u904d\u5386\u53c2\u6570\n    for (int i = 0; i < argc; i++) {\n    printf("arg %d: %s\\n", i, argv[i]);\n    }\n\n    // \u53c2\u6570\u7684\u904d\u5386\u4e5f\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u8fd9\u6837\n    for (char** p = argv; *p != NULL; p++) {\n    printf("arg: %s\\n", *p);\n    }\n\n    // \u8bfb\u53d6\u73af\u5883\u53d8\u91cf\n    char* val = getenv("HOME");\n    if (val == NULL) {\n    printf("Cannot find the HOME environment variable\\n");\n    return 1;\n    }\n    printf("Value: %s\\n", val);\n\n    return 0;\n}\n```\n\n```c++\n// \u5b57\u7b26\u4e32\u6307\u9488\u53ef\u4ee5\u770b\u6210\u662f\u5b57\u7b26\u6570\u7ec4\uff0c\u6240\u4ee5\u4e0b\u9762\u4e09\u79cd\u5199\u6cd5\u662f\u7b49\u4ef7\u7684\n// \u5199\u6cd5\u4e00\nint main(int argc, char* argv[])\n// \u5199\u6cd5\u4e8c\nint main(int argc, char** argv)\n// \u5199\u6cd5\u4e09\nint main(int argc, char argv[][])\n```\n\n```sh\n./foo hello world\necho $?\n```\n'},gLGk:function(n,t,e){"use strict";e.r(t),t.default='## \u5f15\u7528\u81ea\u5b9a\u4e49\u5e93\n\n```c++\n// File foo.c\n\n#include <stdio.h>\n#include "bar.h"\n\nint main(void) {\n  printf("%d\\n", add(2, 3));  // 5!\n}\n```\n\n```c++\n// File bar.h\n#ifndef BAR_H\n  #define BAR_H\n  int add(int, int);\n#endif\n```\n\n```c++\n// File bar.c\n#include "bar.h"\n\nint add(int a, int b) {\n  return a + b;\n}\n```\n\n```sh\ngcc -o foo foo.c bar.c\n```\n\n## \u5206\u6b65\u7f16\u8bd1\n\n```sh\ngcc -c foo.c # \u751f\u6210 foo.o\ngcc -c bar.c # \u751f\u6210 bar.o\ngcc -o foo foo.o bar.o # \u94fe\u63a5\uff0c\u5408\u5e76\u751f\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\n```\n\n## make\n\n```makefile\nfoo: foo.o bar.o\n  gcc -o foo foo.o bar.o\n\nfoo.o: bar.h foo.c\n  gcc -c foo.c\n\nbar.o: bar.h bar.c\n  gcc -c bar.c\n```\n\n```sh\nmake foo.o\nmake bar.o\nmake foo\nmake # \u9ed8\u8ba4\u6267\u884c\u7b2c\u4e00\u6761\u7f16\u8bd1\u89c4\u5219\n```\n'},gLqm:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5b8f\n---"},gptX:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: Unicode\n---\n\n- `UTF-8`\uff1a\u4f7f\u7528 1 \u4e2a\u5230 4 \u4e2a\u5b57\u8282\uff0c\u8868\u793a\u4e00\u4e2a\u7801\u70b9\u3002\u4e0d\u540c\u7684\u5b57\u7b26\u5360\u7528\u7684\u5b57\u8282\u6570\u4e0d\u4e00\u6837\u3002\n- `UTF-16`\uff1a\u5bf9\u4e8e U+0000 \u5230 U+FFFF \u7684\u5b57\u7b26\uff08\u79f0\u4e3a\u57fa\u672c\u5e73\u9762\uff09\uff0c\u4f7f\u7528 2 \u4e2a\u5b57\u8282\u8868\u793a\u4e00\u4e2a\u7801\u70b9\u3002\u5176\u4ed6\u5b57\u7b26\u4f7f\u7528 4 \u4e2a\u5b57\u8282\u3002\n- `UTF-32`\uff1a\u7edf\u4e00\u4f7f\u7528 4 \u4e2a\u5b57\u8282\uff0c\u8868\u793a\u4e00\u4e2a\u7801\u70b9\u3002\n"},gqzS:function(n,t,e){"use strict";e.r(t),t.default="```python\nsome_list = [\"a\", \"b\", \"c\"]\n# a,b,c\nprint(\",\".join(some_list))\n\nsome_list = [6, 3, 5]\nprint(len(some_list))\n# 6\n# 3\n# 5\nfor item in some_list:\n    print(item)\n\n# 2 is in the list\nif 2 in [1, 2, 3]:\n    print(\"2 is in the list\")\n\n# 2 is not in the list\nif 2 not in [4, 5, 6]:\n    print(\"2 is not in the list\")\n\nsome_list = [1, 2, 3, 4]\n# reversed(some_list) is just an iterable.\n# To convert an iterable into a list, use list()\nreversed_list = list(reversed(some_list))\n# 4\n# 3\n# 2\n# 1\nfor item in reversed_list:\n    print(item)\n# You can use an iterable instead of a list in a for loop\n# for item in reversed(some_list):\n\n\nsome_list = [1]\nsome_list.extend([2, 3])\n\n# 1\n# 2\n# 3\nfor x in some_list:\n    print(x)\n\n\noriginal_list = [1]\nnew_list = original_list + [2, 3]\noriginal_list[0] = 5\n# 1\n# 2\n# 3\nfor x in new_list:\n    print(x)\n\n\nsome_list = [4, 5]\nsome_list.insert(0, 3)\n# 3\n# 4\n# 5\nfor x in some_list:\n    print(x)\n\n\nsome_list = [\"a\", \"b\", \"c\"]\ndel some_list[1]\n# a\n# c\nfor x in some_list:\n    print(x)\n\n\nsome_list = [1, 2, 3, 4]\n# 4\nprint(some_list.pop())\n# 1\nprint(some_list.pop(0))\n# 2\n# 3\nfor x in some_list:\n    print(x)\n\n\nsome_list = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n# 2\nprint(some_list.index(\"c\"))\n\n\noriginal_list = [1, 2, 3]\nnew_list = original_list[:]  # or original_list.copy()\noriginal_list[2] = 4\n# 1\n# 2\n# 3\nfor x in new_list:\n    print(x)\n\n\nsome_list = [1, 2, 3]\n# 6\nprint(sum(some_list))\n```\n\n```sh\n>>> squares = [1, 4, 9, 16, 25]\n>>> squares\n[1, 4, 9, 16, 25]\n\n# \u5217\u8868\u4e5f\u652f\u6301\u7d22\u5f15\u548c\u5207\u7247:\n>>> squares[0]  # indexing returns the item\n1\n>>> squares[-1]\n25\n>>> squares[-3:]  # slicing returns a new list\n[9, 16, 25]\n\n# \u5207\u7247\u4f1a\u8fd4\u56de\u5217\u8868\u7684\u4e00\u4e2a\u65b0\u7684(\u6d45)\u62f7\u8d1d:\n>>> squares[:]\n[1, 4, 9, 16, 25]\n\n# \u5217\u8868\u540c\u6837\u652f\u6301\u62fc\u63a5\u64cd\u4f5c:\n>>> squares + [36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n# \u4e0e immutable \u7684\u5b57\u7b26\u4e32\u4e0d\u540c, \u5217\u8868\u662f\u4e00\u4e2a mutable \u7c7b\u578b\uff0c\n# \u5c31\u662f\u8bf4\uff0c\u5b83\u81ea\u5df1\u7684\u5185\u5bb9\u53ef\u4ee5\u6539\u53d8:\n>>> cubes = [1, 8, 27, 65, 125]  # something's wrong here\n>>> 4 ** 3  # the cube of 4 is 64, not 65!\n64\n>>> cubes[3] = 64  # replace the wrong value\n>>> cubes\n[1, 8, 27, 64, 125]\n\n# \u901a\u8fc7 append() \u65b9\u6cd5 \u6dfb\u52a0\u65b0\u5143\u7d20\n>>> cubes.append(216)  # add the cube of 6\n>>> cubes.append(7 ** 3)  # and the cube of 7\n>>> cubes\n[1, 8, 27, 64, 125, 216, 343]\n\n# \u7ed9\u5207\u7247\u8d4b\u503c\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u8fd9\u6837\u751a\u81f3\u53ef\u4ee5\u6539\u53d8\u5217\u8868\u5927\u5c0f\uff0c\u6216\u8005\u628a\u5217\u8868\u6574\u4e2a\u6e05\u7a7a:\n>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n>>> letters\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n>>> # replace some values\n>>> letters[2:5] = ['C', 'D', 'E']\n>>> letters\n['a', 'b', 'C', 'D', 'E', 'f', 'g']\n>>> # now remove them\n>>> letters[2:5] = []\n>>> letters\n['a', 'b', 'f', 'g']\n>>> # clear the list by replacing all the elements with an empty list\n>>> letters[:] = []\n>>> letters\n[]\n\n# \u5185\u7f6e\u51fd\u6570 len() \u4e5f\u53ef\u4ee5\u4f5c\u7528\u5230\u5217\u8868\u4e0a:\n>>> letters = ['a', 'b', 'c', 'd']\n>>> len(letters)\n4\n\n# \u4e5f\u53ef\u4ee5\u5d4c\u5957\u5217\u8868 (\u521b\u5efa\u5305\u542b\u5176\u4ed6\u5217\u8868\u7684\u5217\u8868), \u6bd4\u5982\u8bf4:\n>>> a = ['a', 'b', 'c']\n>>> n = [1, 2, 3]\n>>> x = [a, n]\n>>> x\n[['a', 'b', 'c'], [1, 2, 3]]\n>>> x[0]\n['a', 'b', 'c']\n>>> x[0][1]\n'b'\n```\n\n```sh\n# insert \uff0cremove \u6216\u8005 sort \u65b9\u6cd5\uff0c\u53ea\u4fee\u6539\u5217\u8868\uff0c\u6ca1\u6709\u6253\u5370\u51fa\u8fd4\u56de\u503c\n>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']\n>>> fruits.count('apple')\n2\n>>> fruits.count('tangerine')\n0\n>>> fruits.index('banana')\n3\n>>> fruits.index('banana', 4)  # Find next banana starting a position 4\n6\n>>> fruits.reverse()\n>>> fruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']\n>>> fruits.append('grape')\n>>> fruits\n['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']\n>>> fruits.sort()\n>>> fruits\n['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']\n>>> fruits.pop()\n'pear'\n\n# \u5217\u8868\u4f5c\u4e3a\u6808\u4f7f\u7528\n>>> stack = [3, 4, 5]\n>>> stack.append(6)\n>>> stack.append(7)\n>>> stack\n[3, 4, 5, 6, 7]\n>>> stack.pop()\n7\n>>> stack\n[3, 4, 5, 6]\n>>> stack.pop()\n6\n>>> stack.pop()\n5\n>>> stack\n[3, 4]\n\n# \u5217\u8868\u4f5c\u4e3a\u961f\u5217\u4f7f\u7528\n>>> from collections import deque\n>>> queue = deque([\"Eric\", \"John\", \"Michael\"])\n>>> queue.append(\"Terry\")           # Terry arrives\n>>> queue.append(\"Graham\")          # Graham arrives\n>>> queue.popleft()                 # The first to arrive now leaves\n'Eric'\n>>> queue.popleft()                 # The second to arrive now leaves\n'John'\n>>> queue                           # Remaining queue in order of arrival\ndeque(['Michael', 'Terry', 'Graham'])\n\n# del\u8bed\u53e5\n>>> a = [-1, 1, 66.25, 333, 333, 1234.5]\n>>> del a[0]\n>>> a\n[1, 66.25, 333, 333, 1234.5]\n>>> del a[2:4]\n>>> a\n[1, 66.25, 1234.5]\n>>> del a[:]\n>>> a\n[]\n\n# del \u4e5f\u53ef\u4ee5\u88ab\u7528\u6765\u5220\u9664\u6574\u4e2a\u53d8\u91cf\n>>> del a\n```\n\n## \u5217\u8868\u63a8\u5bfc\u5f0f\n\n```python\noriginal_list = [1, 2, 3]\nnew_list = [x * 2 for x in original_list]\n# 2\n# 4\n# 6\nfor x in new_list:\n    print(x)\n\n\nfirst_list = [1, 3]\nsecond_list = [3, 4]\ncombined_list = [[x + y for y in second_list] for x in first_list]\n# 4\nprint(combined_list[0][0])\n# 5\nprint(combined_list[0][1])\n# 6\nprint(combined_list[1][0])\n# 7\nprint(combined_list[1][1])\n\n\noriginal_list = [1, 2, 3, 4, 5, 6]\nnew_list = [x for x in original_list if x % 2 == 0]\n# 2\n# 4\n# 6\nfor x in new_list:\n    print(x)\n\n\nsquares = []\nfor x in range(10):\n    squares.append(x**2)\n# \u7b49\u4ef7\u4e8e\nsquares = list(map(lambda x: x**2, range(10)))\n# \u6216\u8005\uff0c\u7b49\u4ef7\u4e8e\nsquares = [x**2 for x in range(10)]\n\n[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n# \u7b49\u4ef7\u4e8e\ncombs = []\nfor x in [1,2,3]:\n    for y in [3,1,4]:\n        if x != y:\n            combs.append((x, y))\n```\n\n```sh\n>>> vec = [-4, -2, 0, 2, 4]\n>>> # create a new list with the values doubled\n>>> [x*2 for x in vec]\n[-8, -4, 0, 4, 8]\n>>> # filter the list to exclude negative numbers\n>>> [x for x in vec if x >= 0]\n[0, 2, 4]\n>>> # apply a function to all the elements\n>>> [abs(x) for x in vec]\n[4, 2, 0, 2, 4]\n>>> # call a method on each element\n>>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']\n>>> [weapon.strip() for weapon in freshfruit]\n['banana', 'loganberry', 'passion fruit']\n>>> # create a list of 2-tuples like (number, square)\n>>> [(x, x**2) for x in range(6)]\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n>>> # the tuple must be parenthesized, otherwise an error is raised\n>>> [x, x**2 for x in range(6)]\n  File \"<stdin>\", line 1, in <module>\n    [x, x**2 for x in range(6)]\n               ^\nSyntaxError: invalid syntax\n>>> # flatten a list using a listcomp with two 'for'\n>>> vec = [[1,2,3], [4,5,6], [7,8,9]]\n>>> [num for elem in vec for num in elem]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# \u5217\u8868\u63a8\u5bfc\u5f0f\u53ef\u4ee5\u4f7f\u7528\u590d\u6742\u7684\u8868\u8fbe\u5f0f\u548c\u5d4c\u5957\u51fd\u6570\n>>> from math import pi\n>>> [str(round(pi, i)) for i in range(1, 6)]\n['3.1', '3.14', '3.142', '3.1416', '3.14159']\n```\n\n```python\nmatrix = [\n    [1, 2, 3, 4],\n    [5, 6, 7, 8],\n    [9, 10, 11, 12],\n]\n# \u4e0b\u9762\u7684\u5217\u8868\u63a8\u5bfc\u5f0f\u5c06\u4ea4\u6362\u5176\u884c\u548c\u5217\n[[row[i] for row in matrix] for i in range(4)]\n# [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n# \u7b49\u4ef7\u4e8e\ntransposed = []\nfor i in range(4):\n    transposed.append([row[i] for row in matrix])\n# \u4e5f\u7b49\u4ef7\u4e8e\ntransposed = []\nfor i in range(4):\n    # the following 3 lines implement the nested listcomp\n    transposed_row = []\n    for row in matrix:\n        transposed_row.append(row[i])\n    transposed.append(transposed_row)\n\n# \u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4f60\u5e94\u8be5\u4f1a\u66f4\u559c\u6b22\u4f7f\u7528\u5185\u7f6e\u51fd\u6570\u53bb\u7ec4\u6210\u590d\u6742\u7684\u6d41\u7a0b\u8bed\u53e5\u3002\n# zip() \u51fd\u6570\u5c06\u4f1a\u5f88\u597d\u5730\u5904\u7406\u8fd9\u79cd\u60c5\u51b5\nlist(zip(*matrix))\n# [(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]\n```\n"},gytX:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: 19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9\n---\n"},"h43+":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: HelloWord\n---\n\n`Hello, World`\u662f\u6307\u5728\u7535\u8111\u5c4f\u5e55\u663e\u793a\u201cHello, World!\u201d\uff08\u4f60\u597d\uff0c\u4e16\u754c\uff01\uff09\u5b57\u7b26\u4e32\u7684\u8ba1\u7b97\u673a\u7a0b\u5e8f\u3002\n\u76f8\u5173\u7684\u7a0b\u5e8f\u901a\u5e38\u90fd\u662f\u6bcf\u79cd\u7535\u8111\u7f16\u7a0b\u8bed\u8a00\u6700\u57fa\u672c\u3001\u6700\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u4e5f\u4f1a\u7528\u4f5c\u793a\u8303\u4e00\u4e2a\u7f16\u7a0b\u8bed\u8a00\u5982\u4f55\u8fd0\u4f5c\u3002\n\u540c\u65f6\u5b83\u4ea6\u53ef\u4ee5\u7528\u6765\u786e\u8ba4\u4e00\u4e2a\u7f16\u7a0b\u8bed\u8a00\u7684\u7f16\u8bd1\u5668\u3001\u7a0b\u5e8f\u5f00\u53d1\u73af\u5883\u53ca\u8fd0\u884c\u73af\u5883\u662f\u5426\u5df2\u7ecf\u5b89\u88c5\u59a5\u5f53\u3002\n\u56e0\u4e3a\u5199\u6cd5\u7b80\u5355\u53ef\u89c1\uff0c\u8fd9\u4e5f\u662f\u5f88\u591a\u521d\u5b66\u8005\u9996\u6b21\u63a5\u89e6\u7f16\u7a0b\u8bed\u8a00\u65f6\u4f1a\u64b0\u5199\u7684\u7a0b\u5e8f\u3002\n"},hDC0:function(n,t,e){"use strict";e.r(t),t.default="```js\nfunction BubbleSort(arr) {\n  let j = 0;\n  for (;;) {\n    j++;\n    let done = true;\n    for (let i = 0; i < arr.length - j; i++) {\n      if (arr[i] > arr[i + 1]) {\n        [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n        done = false;\n      }\n    }\n    if (done) {\n      break;\n    }\n  }\n  return arr;\n}\nconst arr = [3, 6, 7, 4, 5, 1, 2];\nconsole.log(BubbleSort(arr));\n```\n"},hGOb:function(n,t,e){"use strict";e.r(t),t.default="```dart\n// \u6392\u5e8f\nvar fruits = ['bananas', 'apples', 'oranges'];\n// Sort a list.\nfruits.sort((a, b) => a.compareTo(b));\nassert(fruits[0] == 'apples');\n```\n"},hL2c:function(n,t,e){"use strict";e.r(t),t.default='Go \u62e5\u6709\u6307\u9488\u3002\u6307\u9488\u4fdd\u5b58\u4e86\u503c\u7684\u5185\u5b58\u5730\u5740\u3002\n\u7c7b\u578b `*T` \u662f\u6307\u5411 T \u7c7b\u578b\u503c\u7684\u6307\u9488\u3002\u5176\u96f6\u503c\u4e3a `nil`\u3002\n\u4e0e C \u4e0d\u540c\uff0cGo \u6ca1\u6709\u6307\u9488\u8fd0\u7b97\u3002\n\n- `&` \u64cd\u4f5c\u7b26\u4f1a\u751f\u6210\u4e00\u4e2a\u6307\u5411\u5176\u64cd\u4f5c\u6570\u7684\u6307\u9488\u3002\n- `*` \u64cd\u4f5c\u7b26\u8868\u793a\u6307\u9488\u6307\u5411\u7684\u5e95\u5c42\u503c\u3002\n\n```go\n// \u7c7b\u578b *T \u662f\u6307\u5411 T \u7c7b\u578b\u503c\u7684\u6307\u9488\u3002\u5176\u96f6\u503c\u4e3a nil\u3002\nvar p *int\n\n\npackage main\nimport "fmt"\nfunc main() {\n  i, j := 42, 2701\n\n  p := &i         // \u6307\u5411 i\n  fmt.Println(*p) // \u901a\u8fc7\u6307\u9488\u8bfb\u53d6 i \u7684\u503c\n  *p = 21         // \u901a\u8fc7\u6307\u9488\u8bbe\u7f6e i \u7684\u503c\n  fmt.Println(i)  // \u67e5\u770b i \u7684\u503c\n\n  p = &j         // \u6307\u5411 j\n  *p = *p / 37   // \u901a\u8fc7\u6307\u9488\u5bf9 j \u8fdb\u884c\u9664\u6cd5\u8fd0\u7b97\n  fmt.Println(j) // \u67e5\u770b j \u7684\u503c\n}\n// 42\n// 21\n// 73\n```\n'},hV51:function(n,t,e){"use strict";e.r(t),t.default='## \u9519\u8bef\u5305\u88c5\n\n`Wrap` \u548c `WrapWithCode` \u5219\u662f\u9519\u8bef\u4e8c\u6b21\u5305\u88c5\u51fd\u6570\uff0c\u7528\u4e8e\u5c06\u5e95\u5c42\u7684\u9519\u8bef\u5305\u88c5\u4e3a\u65b0\u7684\u9519\u8bef\uff0c\u4f46\u662f\u4fdd\u7559\u7684\u539f\u59cb\u7684\u5e95\u5c42\u9519\u8bef\u4fe1\u606f\u3002\n\n```go\nimport (\n    "github.com/chai2010/errors"\n)\n\nfunc loadConfig() error {\n    _, err := ioutil.ReadFile("/path/to/file")\n    if err != nil {\n        return errors.Wrap(err, "read failed")\n    }\n\n    // ...\n}\n\nfunc setup() error {\n    err := loadConfig()\n    if err != nil {\n        return errors.Wrap(err, "invalid config")\n    }\n\n    // ...\n}\n\nfunc main() {\n    if err := setup(); err != nil {\n        log.Fatal(err)\n    }\n\n    // ...\n}\n```\n\n\u904d\u5386\u539f\u59cb\u9519\u8bef\u7ecf\u5386\u4e86\u54ea\u4e9b\u5305\u88c5\u6d41\u7a0b\uff1a\n\n```go\n    for i, e := range err.(errors.Error).Wraped() {\n        fmt.Printf("wrapped(%d): %v\\n", i, e)\n    }\n```\n\n\u83b7\u53d6\u6bcf\u4e2a\u5305\u88c5\u9519\u8bef\u7684\u51fd\u6570\u8c03\u7528\u5806\u6808\u4fe1\u606f\uff1a\n\n```go\n    for i, x := range err.(errors.Error).Caller() {\n        fmt.Printf("caller:%d: %s\\n", i, x.FuncName)\n    }\n```\n\n\u7528 errors.ToJson(err) \u7f16\u7801\u4e3a JSON \u5b57\u7b26\u4e32\uff1a\n\n```go\n// \u4ee5 JSON \u5b57\u7b26\u4e32\u65b9\u5f0f\u53d1\u9001\u9519\u8bef\nfunc sendError(ch chan<- string, err error) {\n    ch <- errors.ToJson(err)\n}\n\n// \u63a5\u6536 JSON \u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u9519\u8bef\nfunc recvError(ch <-chan string) error {\n    p, err := errors.FromJson(<-ch)\n    if err != nil {\n        log.Fatal(err)\n    }\n    return p\n}\n```\n\n\u7ed9\u9519\u8bef\u7ed1\u5b9a\u4e00\u4e2a\u5bf9\u5e94\u7684 http \u72b6\u6001\u7801\uff1a\n\n```go\nerr := errors.NewWithCode(404, "http error code")\n\nfmt.Println(err)\nfmt.Println(err.(errors.Error).Code())\n```\n'},hXhD:function(n,t,e){"use strict";e.r(t),t.default='- \u5b57\u8282 byte\uff08`u8`\uff09\n- \u5b57\u7b26 character\uff08`char`\uff09\n  - \u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u8282\n- \u5b57\u5f62\u7c07\uff08\u5b57\u6bcd\uff09\n- \u5b57\u7b26\u4e32 string\uff08`String`\uff09\n  - `String` \u662f `string` \u7684\u4e00\u79cd\u7c7b\u578b\n  - \u7c7b\u4f3c\u8fd8\u6709 `OsString`, `OsStr`, `CString`, and `CStr`\n  - `String` \u88ab\u5b58\u50a8\u4e3a\u7531\u5b57\u8282\u7ec4\u6210\u7684 `vector`\uff08`Vec<u8>`\uff09\uff0c\u4f46\u4fdd\u8bc1\u4e86\u5b83\u4e00\u5b9a\u662f\u4e00\u4e2a\u6709\u6548\u7684 `UTF-8` \u5e8f\u5217\u3002\n- \u5b57\u7b26\u4e32\u5207\u7247 string slice (`&str`)\n  - string slice \u662f `String` \u4e2d\u4e00\u90e8\u5206\u503c\u7684\u5f15\u7528\n  - \u901a\u5e38\u662f\u501f\u7528\u7684\u5f62\u5f0f `&str`\n  - `str` \u662f\u4e00\u4e2a `DST`\uff1b\u76f4\u5230\u8fd0\u884c\u65f6\u6211\u4eec\u90fd\u4e0d\u77e5\u9053\u5b57\u7b26\u4e32\u6709\u591a\u957f\u3002\n  - `&str` \u662f\u4e00\u4e2a\u603b\u662f\u6307\u5411\u6709\u6548 `UTF-8` \u5e8f\u5217\u7684\u5207\u7247\uff08`&[u8]`\uff09\n\n## \u521b\u5efa String\n\n```rust\n// \u65b0\u5efa\u4e00\u4e2a\u7a7a\u7684 String\nlet mut s = String::new();\n\n// \u4f7f\u7528 String::from \u51fd\u6570\u4ece\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u521b\u5efa String\nlet mut s = String::from("hello");\n\n// \u4f7f\u7528 to_string \u65b9\u6cd5\u521b\u5efa String\n// \u8fd9\u91ccdata\u7684\u7c7b\u578b\u662f &str \u800c\u4e0d\u662f str\nlet data = "initial contents";\nlet s = data.to_string();\n\n// \u8be5\u65b9\u6cd5\u4e5f\u53ef\u76f4\u63a5\u7528\u4e8e\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff1a\nlet s = "initial contents".to_string();\n```\n\n## \u66f4\u65b0 String\n\n```rust\n// \u4f7f\u7528 push_str \u65b9\u6cd5\u5411 String \u9644\u52a0\u5b57\u7b26\u4e32 slice\nlet mut s = String::from("foo");\ns.push_str("bar");\n\n// push_str \u4e0d\u4f1a\u83b7\u53d6\u6240\u6709\u6743\nlet mut s1 = String::from("foo");\nlet s2 = "bar";\ns1.push_str(s2);\nprintln!("s2 is {}", s2);\n\n// \u4f7f\u7528 push \u5c06\u5355\u4e2a\u5b57\u7b26\u52a0\u5165 String \u503c\u4e2d\nlet mut s = String::from("lo");\ns.push(\'l\');\n\n// \u4f7f\u7528 + \u8fd0\u7b97\u7b26\u6216 format! \u5b8f\u62fc\u63a5 String\nlet s1 = String::from("Hello, ");\nlet s2 = String::from("world!");\n// \u4e0d\u9700\u8981 s2 \u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5\u52a0\u4e0a &\n// \u5e76\u4e14 &String \u7c7b\u578b\u88ab\u5f3a\u8f6c\u6210 &str\uff0c\u5373 &s2 \u88ab\u8f6c\u6210 &s2[..]\nlet s3 = s1 + &s2; // \u6ce8\u610f s1 \u88ab\u79fb\u52a8\u4e86\uff0c\u4e0d\u80fd\u7ee7\u7eed\u4f7f\u7528\n// \u56e0\u4e3a add \u6ca1\u6709\u83b7\u53d6\u53c2\u6570\u7684\u6240\u6709\u6743\uff0c\u6240\u4ee5 s2 \u5728\u8fd9\u4e2a\u64cd\u4f5c\u540e\u4ecd\u7136\u662f\u6709\u6548\u7684 String\n```\n\n`+` \u7684\u5b9a\u4e49\u7c7b\u4f3c\n\n```rust\nlet s3 = s1 + &s2;\n\nfn add(self, s: &str) -> String {\n```\n\n- `&String` \u53ef\u4ee5\u88ab \u5f3a\u8f6c\uff08coerced\uff09\u6210 `&str`\n- \u53ef\u4ee5\u53d1\u73b0\u7b7e\u540d\u4e2d `add` \u83b7\u53d6\u4e86 `self` \u7684\u6240\u6709\u6743\uff0c\u56e0\u4e3a `self` \u6ca1\u6709 \u4f7f\u7528 `&`\u3002\n- \u8fd9\u610f\u5473\u7740 `s1` \u7684\u6240\u6709\u6743\u5c06\u88ab\u79fb\u52a8\u5230 `add` \u8c03\u7528\u4e2d\uff0c\u4e4b\u540e\u5c31\u4e0d\u518d\u6709\u6548\u3002\n- \u5b9e\u9645\u4e0a\u8fd9\u4e2a\u8bed\u53e5\u4f1a\u83b7\u53d6 `s1` \u7684\u6240\u6709\u6743\uff0c\u9644\u52a0\u4e0a\u4ece `s2` \u4e2d\u62f7\u8d1d\u7684\u5185\u5bb9\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u7684\u6240\u6709\u6743\u3002\n\n```rust\nlet s1 = String::from("tic");\nlet s2 = String::from("tac");\nlet s3 = String::from("toe");\n\nlet s = s1 + "-" + &s2 + "-" + &s3;\nlet s = format!("{}-{}-{}", s1, s2, s3); // \u4f7f\u7528 format! \u5b8f\n```\n\n```rust\nfn first_word(s: &str) -> &str {\n    let bytes = s.as_bytes();\n\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b\' \' {\n            return &s[0..i];\n        }\n    }\n\n    &s[..]\n}\n\nfn main() {\n    let my_string = String::from("hello world");\n\n    // `first_word` \u63a5\u53d7 `String` \u7684\u5207\u7247\uff0c\u65e0\u8bba\u662f\u90e8\u5206\u8fd8\u662f\u5168\u90e8\n    let word = first_word(&my_string[0..6]);\n    let word = first_word(&my_string[..]);\n    // `first_word` \u4e5f\u63a5\u53d7 `String` \u7684\u5f15\u7528\uff0c\n    // \u8fd9\u7b49\u540c\u4e8e `String` \u7684\u5168\u90e8\u5207\u7247\n    let word = first_word(&my_string);\n\n    let my_string_literal = "hello world";\n\n    // `first_word` \u63a5\u53d7\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u7684\u5207\u7247\uff0c\u65e0\u8bba\u662f\u90e8\u5206\u8fd8\u662f\u5168\u90e8\n    let word = first_word(&my_string_literal[0..6]);\n    let word = first_word(&my_string_literal[..]);\n\n    // \u56e0\u4e3a\u5b57\u7b26\u4e32\u5b57\u9762\u503c**\u5c31\u662f**\u5b57\u7b26\u4e32 slice\uff0c\n    // \u8fd9\u6837\u5199\u4e5f\u53ef\u4ee5\uff0c\u5373\u4e0d\u4f7f\u7528 slice \u8bed\u6cd5\uff01\n    let word = first_word(my_string_literal);\n}\n```\n\n```rust\nlet s = "hello world"; // \u8fd9\u91cc s \u7684\u7c7b\u578b\u662f &str\uff0c&str \u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u5f15\u7528\nlet word = first_word(&s[0..6]);  // \u8fd9\u91cc word \u7684\u7c7b\u578b\u4e5f\u662f &str\n\nlet a = [1, 2, 3, 4, 5];\nlet slice = &a[1..3]; // \u8fd9\u4e2a slice \u7684\u7c7b\u578b\u662f &[i32]\n```\n\n## \u7d22\u5f15 String\n\nRust \u7684\u5b57\u7b26\u4e32\u4e0d\u652f\u6301\u7d22\u5f15\u3002\n\n```rust\nlet s1 = String::from("hello");\nlet h = s1[0]; // \u9519\u8bef\n```\n\n```rust\nlet len = String::from("Hola").len();         // 4\nlet len = String::from("\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435").len(); // 24\n\nlet hello = "\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435";\nlet s = &hello[0..4]; // \u0417\u0434\n&hello[0..1] // panic\n```\n\n## \u904d\u5386 String \u7684\u65b9\u6cd5\n\n```rust\nfor c in "\u0928\u092e\u0938\u094d\u0924\u0947".chars() {\n    println!("{}", c);\n}\n\n// \u8fd9\u4e9b\u4ee3\u7801\u4f1a\u6253\u5370\u51fa\u7ec4\u6210 String \u7684 18 \u4e2a\u5b57\u8282\uff1a\nfor b in "\u0928\u092e\u0938\u094d\u0924\u0947".bytes() {\n    println!("{}", b);\n}\n```\n\n## \u8f6c\u4e49\n\n```rust\nfn main() {\n    // \u901a\u8fc7\u8f6c\u4e49\uff0c\u53ef\u4ee5\u7528\u5341\u516d\u8fdb\u5236\u503c\u6765\u8868\u793a\u5b57\u8282\u3002\n    let byte_escape = "I\'m writing \\x52\\x75\\x73\\x74!";\n    println!("What are you doing\\x3F (\\\\x3F means ?) {}", byte_escape);\n\n    // \u4e5f\u53ef\u4ee5\u4f7f\u7528 Unicode \u7801\u4f4d\u8868\u793a\u3002\n    let unicode_codepoint = "\\u{211D}";\n    let character_name = "\\"DOUBLE-STRUCK CAPITAL R\\"";\n\n    println!("Unicode character {} (U+211D) is called {}",\n                unicode_codepoint, character_name );\n\n\n    let long_string = "String literals\n                        can span multiple lines.\n                        The linebreak and indentation here ->\\\n                        <- can be escaped too!";\n    println!("{}", long_string);\n}\n\nfn main() {\n    let raw_str = r"Escapes don\'t work here: \\x3F \\u{211D}";\n    println!("{}", raw_str);\n\n    // \u5982\u679c\u4f60\u8981\u5728\u539f\u59cb\u5b57\u7b26\u4e32\u4e2d\u5199\u5f15\u53f7\uff0c\u8bf7\u5728\u4e24\u8fb9\u52a0\u4e00\u5bf9 #\n    let quotes = r#"And then I said: "There is no escape!""#;\n    println!("{}", quotes);\n\n    // \u5982\u679c\u5b57\u7b26\u4e32\u4e2d\u9700\u8981\u5199 "#\uff0c\u90a3\u5c31\u5728\u5b9a\u754c\u7b26\u4e2d\u4f7f\u7528\u66f4\u591a\u7684 #\u3002\n    // \u53ef\u4f7f\u7528\u7684 # \u7684\u6570\u76ee\u6ca1\u6709\u9650\u5236\u3002\n    let longer_delimiter = r###"A string with "# in it. And even "##!"###;\n    println!("{}", longer_delimiter);\n}\n```\n\n## \u975e UTF-8 \u5b57\u7b26\u4e32\n\n```rust\nuse std::str;\n\nfn main() {\n    // \u6ce8\u610f\u8fd9\u5e76\u4e0d\u662f\u4e00\u4e2a &str\n    let bytestring: &[u8; 20] = b"this is a bytestring";\n\n    // \u5b57\u8282\u4e32\u6ca1\u6709\u5b9e\u73b0 Display\uff0c\u6240\u4ee5\u5b83\u4eec\u7684\u6253\u5370\u529f\u80fd\u6709\u4e9b\u53d7\u9650\n    println!("A bytestring: {:?}", bytestring);\n\n    // \u5b57\u8282\u4e32\u53ef\u4ee5\u4f7f\u7528\u5355\u5b57\u8282\u7684\u8f6c\u4e49\u5b57\u7b26...\n    let escaped = b"\\x52\\x75\\x73\\x74 as bytes";\n    // ...\u4f46\u4e0d\u80fd\u4f7f\u7528 Unicode \u8f6c\u4e49\u5b57\u7b26\n    // let escaped = b"\\u{211D} is not allowed";\n    println!("Some escaped bytes: {:?}", escaped);\n\n\n    // \u539f\u59cb\u5b57\u8282\u4e32\u548c\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u5199\u6cd5\u4e00\u6837\n    let raw_bytestring = br"\\u{211D} is not escaped here";\n    println!("{:?}", raw_bytestring);\n\n    // \u628a\u5b57\u8282\u4e32\u8f6c\u6362\u4e3a &str \u53ef\u80fd\u5931\u8d25\n    if let Ok(my_str) = str::from_utf8(raw_bytestring) {\n        println!("And the same as text: \'{}\'", my_str);\n    }\n\n    let quotes = br#"You can also use "fancier" formatting, \\\n                    like with normal raw strings"#;\n\n    // \u5b57\u8282\u4e32\u53ef\u4ee5\u4e0d\u4f7f\u7528 UTF-8 \u7f16\u7801\n    let shift_jis = b"\\x82\\xe6\\x82\\xa8\\x82\\xb1\\x82"; // SHIFT-JIS \u7f16\u7801\u7684 "\u3088\u3046\u3053\u305d"\n\n    // \u4f46\u8fd9\u6837\u7684\u8bdd\u5b83\u4eec\u5c31\u65e0\u6cd5\u8f6c\u6362\u6210 &str \u4e86\n    match str::from_utf8(shift_jis) {\n        Ok(my_str) => println!("Conversion successful: \'{}\'", my_str),\n        Err(e) => println!("Conversion failed: {:?}", e),\n    };\n}\n```\n'},i15U:function(n,t,e){"use strict";e.r(t),t.default="\u82b1\u62ec\u53f7\u6216 set() \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u96c6\u5408\u3002\n\u6ce8\u610f\uff1a\u8981\u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\u5408\u4f60\u53ea\u80fd\u7528 set() \u800c\u4e0d\u80fd\u7528 {}\uff0c \u56e0\u4e3a\u540e\u8005\u662f\u521b\u5efa\u4e00\u4e2a\u7a7a\u5b57\u5178\n\n```sh\n>>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}\n>>> print(basket)                      # show that duplicates have been removed\n{'orange', 'banana', 'pear', 'apple'}\n>>> 'orange' in basket                 # fast membership testing\nTrue\n>>> 'crabgrass' in basket\nFalse\n\n>>> # Demonstrate set operations on unique letters from two words\n...\n>>> a = set('abracadabra')\n>>> b = set('alacazam')\n>>> a                                  # unique letters in a\n{'a', 'r', 'b', 'c', 'd'}\n>>> a - b                              # letters in a but not in b\n{'r', 'd', 'b'}\n>>> a | b                              # letters in a or b or both\n{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}\n>>> a & b                              # letters in both a and b\n{'a', 'c'}\n>>> a ^ b                              # letters in a or b but not both\n{'r', 'd', 'b', 'm', 'z', 'l'}\n\n# \u7c7b\u4f3c\u4e8e \u5217\u8868\u63a8\u5bfc\u5f0f\uff0c\u96c6\u5408\u4e5f\u652f\u6301\u63a8\u5bfc\u5f0f\u5f62\u5f0f\n>>> a = {x for x in 'abracadabra' if x not in 'abc'}\n>>> a\n{'r', 'd'}\n```\n\n## \u96c6\u5408\u7684\u6bd4\u8f83\n\n```python\n(1, 2, 3)              < (1, 2, 4)\n[1, 2, 3]              < [1, 2, 4]\n'ABC' < 'C' < 'Pascal' < 'Python'\n(1, 2, 3, 4)           < (1, 2, 4)\n(1, 2)                 < (1, 2, -1)\n(1, 2, 3)             == (1.0, 2.0, 3.0)\n(1, 2, ('aa', 'ab'))   < (1, 2, ('abc', 'a'), 4)\n```\n"},"i16+":function(n,t,e){"use strict";e.r(t),t.default="\u7528 goto \u8df3\u8f6c\u5230\u5fc5\u987b\u5728\u5f53\u524d\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u6807\u7b7e\u3002\n\n```go\nfunc myFunc() {\n    i := 0\nHere:   //\u8fd9\u884c\u7684\u7b2c\u4e00\u4e2a\u8bcd\uff0c\u4ee5\u5192\u53f7\u7ed3\u675f\u4f5c\u4e3a\u6807\u7b7e\n    println(i)\n    i++\n    goto Here   //\u8df3\u8f6c\u5230Here\u53bb\n}\n```\n"},iw6o:function(n,t,e){"use strict";e.r(t),t.default='- \u96c6\u5408\u6307\u5411\u7684\u6570\u636e\u662f\u50a8\u5b58\u5728\u5806\u4e0a\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6570\u636e\u7684\u6570\u91cf\u4e0d\u5fc5\u5728\u7f16\u8bd1\u65f6\u5c31\u5df2\u77e5\uff0c\u5e76\u4e14\u8fd8\u53ef\u4ee5\u968f\u7740\u7a0b\u5e8f\u7684\u8fd0\u884c\u589e\u957f\u6216\u7f29\u5c0f\u3002\n- vector \u53ea\u80fd\u50a8\u5b58\u76f8\u540c\u7c7b\u578b\u7684\u503c\u3002\n\n## `Vec<T>`\n\n```rust\n// \u5b9a\u4e49\nlet v: Vec<i32> = Vec::new();\n// or\nlet v = vec![1, 2, 3];\n\n// \u66f4\u65b0 vector\nlet mut v = Vec::new();\nv.push(5);\nv.push(6);\nv.push(7);\nv.push(8);\n\n// \u8bfb\u53d6 vector \u7684\u5143\u7d20\nlet v = vec![1, 2, 3, 4, 5];\nlet third: &i32 = &v[2]; // \u7d22\u5f15\u8bed\u6cd5\nprintln!("The third element is {}", third);\nmatch v.get(2) { // get \u65b9\u6cd5\n    Some(third) => println!("The third element is {}", third),\n    None => println!("There is no third element."),\n}\n\n// \u5f15\u7528\u89c4\u5219\nlet mut v = vec![1, 2, 3, 4, 5];\nlet first = &v[0];\nv.push(6); // \u9519\u8bef\nprintln!("The first element is: {}", first);\n\n// \u904d\u5386\nlet v = vec![100, 32, 57];\nfor i in &v {\n    println!("{}", i);\n}\n\n// \u904d\u5386\nlet mut v = vec![100, 32, 57];\nfor i in &mut v {\n    *i += 50;\n}\n\n// \u4f7f\u7528\u679a\u4e3e\u6765\u50a8\u5b58\u591a\u79cd\u7c7b\u578b\nenum SpreadsheetCell {\n    Int(i32),\n    Float(f64),\n    Text(String),\n}\nlet row = vec![\n    SpreadsheetCell::Int(3),\n    SpreadsheetCell::Text(String::from("blue")),\n    SpreadsheetCell::Float(10.12),\n];\n```\n\n```rust\nfn main() {\n    // \u8fed\u4ee3\u5668\u53ef\u4ee5\u88ab\u6536\u96c6\u5230 vector \u4e2d\n    let collected_iterator: Vec<i32> = (0..10).collect();\n    println!("Collected (0..10) into: {:?}", collected_iterator);\n\n    // `vec!` \u5b8f\u53ef\u7528\u6765\u521d\u59cb\u5316\u4e00\u4e2a vector\n    let mut xs = vec![1i32, 2, 3];\n    println!("Initial vector: {:?}", xs);\n\n    // \u5728 vector \u7684\u5c3e\u90e8\u63d2\u5165\u4e00\u4e2a\u65b0\u7684\u5143\u7d20\n    println!("Push 4 into the vector");\n    xs.push(4);\n    println!("Vector: {:?}", xs);\n\n    // \u62a5\u9519\uff01\u4e0d\u53ef\u53d8 vector \u4e0d\u53ef\u589e\u957f\n    collected_iterator.push(0);\n    // \u6539\u6b63 ^ \u5c06\u6b64\u884c\u6ce8\u91ca\u6389\n\n    // `len` \u65b9\u6cd5\u83b7\u5f97\u4e00\u4e2a vector \u7684\u5f53\u524d\u5927\u5c0f\n    println!("Vector size: {}", xs.len());\n\n    // \u4e0b\u6807\u4f7f\u7528\u4e2d\u62ec\u53f7\u8868\u793a\uff08\u4ece 0 \u5f00\u59cb\uff09\n    println!("Second element: {}", xs[1]);\n\n    // `pop` \u79fb\u9664 vector \u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5e76\u5c06\u5b83\u8fd4\u56de\n    println!("Pop last element: {:?}", xs.pop());\n\n    // \u8d85\u51fa\u4e0b\u6807\u8303\u56f4\u5c06\u629b\u51fa\u4e00\u4e2a panic\n    println!("Fourth element: {}", xs[3]);\n    // \u6539\u6b63 ^ \u6ce8\u91ca\u6389\u6b64\u884c\n\n    // \u8fed\u4ee3\u4e00\u4e2a `Vector` \u5f88\u5bb9\u6613\n    println!("Contents of xs:");\n    for x in xs.iter() {\n        println!("> {}", x);\n    }\n\n    // \u53ef\u4ee5\u5728\u8fed\u4ee3 `Vector` \u7684\u540c\u65f6\uff0c\u4f7f\u7528\u72ec\u7acb\u53d8\u91cf\uff08`i`\uff09\u6765\u8bb0\u5f55\u8fed\u4ee3\u6b21\u6570\n    for (i, x) in xs.iter().enumerate() {\n        println!("In position {} we have value {}", i, x);\n    }\n\n    // \u591a\u4e8f\u4e86 `iter_mut`\uff0c\u53ef\u53d8\u7684 `Vector` \u5728\u8fed\u4ee3\u7684\u540c\u65f6\uff0c\u5176\u4e2d\u6bcf\u4e2a\u503c\u90fd\u80fd\u88ab\u4fee\u6539\n    for x in xs.iter_mut() {\n        *x *= 3;\n    }\n    println!("Updated vector: {:?}", xs);\n}\n```\n'},"j+Kk":function(n,t,e){"use strict";e.r(t),t.default="for \u5faa\u73af\u7684 range \u5f62\u5f0f\u53ef\u904d\u5386\u5207\u7247\u6216\u6620\u5c04\u3002\n\u5f53\u4f7f\u7528 for \u5faa\u73af\u904d\u5386\u5207\u7247\u65f6\uff0c\u6bcf\u6b21\u8fed\u4ee3\u90fd\u4f1a\u8fd4\u56de\u4e24\u4e2a\u503c\u3002\n\n- \u7b2c\u4e00\u4e2a\u503c\u4e3a\u5f53\u524d\u5143\u7d20\u7684\u4e0b\u6807\uff0c\n- \u7b2c\u4e8c\u4e2a\u503c\u4e3a\u8be5\u4e0b\u6807\u6240\u5bf9\u5e94\u5143\u7d20\u7684\u4e00\u4efd\u526f\u672c\u3002\n\n```go\npackage main\nimport \"fmt\"\nvar pow = []int{1, 2, 4, 8, 16, 32, 64, 128}\nfunc main() {\n  for i, v := range pow {\n    fmt.Printf(\"2**%d = %d\\n\", i, v)\n  }\n}\n// 2**0 = 1\n// 2**1 = 2\n// 2**2 = 4\n// 2**3 = 8\n// 2**4 = 16\n// 2**5 = 32\n// 2**6 = 64\n// 2**7 = 128\n\n\n// \u53ef\u4ee5\u5c06\u4e0b\u6807\u6216\u503c\u8d4b\u4e88 _ \u6765\u5ffd\u7565\u5b83\u3002\npackage main\nimport \"fmt\"\nfunc main() {\n  pow := make([]int, 5)\n  for i := range pow {\n    pow[i] = 1 << uint(i) // == 2**i\n  }\n  for _, value := range pow {\n    fmt.Printf(\"%d\\n\", value)\n  }\n}\n// 1\n// 2\n// 4\n// 8\n// 16\n\n\n// Go\u8bed\u8a00\u7684range\u5faa\u73af\u5728\u5904\u7406\u5b57\u7b26\u4e32\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u9690\u5f0f\u89e3\u7801UTF8\u5b57\u7b26\u4e32\u3002\nfor i, r := range \"Hello, \u4e16\u754c\" {\n  fmt.Printf(\"%d\\t%q\\t%d\\n\", i, r, r)\n}\n// 0\t'H'\t72\n// 1\t'e'\t101\n// 2\t'l'\t108\n// 3\t'l'\t108\n// 4\t'o'\t111\n// 5\t','\t44\n// 6\t' '\t32\n// 7\t'\u4e16'\t19990\n// 10\t'\u754c'\t30028\n```\n"},jOMF:function(n,t,e){"use strict";e.r(t),t.default='- \u5305\uff08Packages\uff09\uff1a Cargo \u7684\u4e00\u4e2a\u529f\u80fd\uff0c\u5b83\u5141\u8bb8\u4f60\u6784\u5efa\u3001\u6d4b\u8bd5\u548c\u5206\u4eab crate\u3002\n  - \u5305\uff08package\uff09 \u662f\u63d0\u4f9b\u4e00\u7cfb\u5217\u529f\u80fd\u7684\u4e00\u4e2a\u6216\u8005\u591a\u4e2a crate\u3002\n  - \u4e00\u4e2a\u5305\u4f1a\u5305\u542b\u6709\u4e00\u4e2a Cargo.toml \u6587\u4ef6\uff0c\u9610\u8ff0\u5982\u4f55\u53bb\u6784\u5efa\u8fd9\u4e9b crate\u3002\n    - \u4e00\u4e2a\u5305\u4e2d\u81f3\u591a \u53ea\u80fd \u5305\u542b\u4e00\u4e2a\u5e93 crate(library crate)\uff1b\n    - \u5305\u4e2d\u53ef\u4ee5\u5305\u542b\u4efb\u610f\u591a\u4e2a\u4e8c\u8fdb\u5236 crate(binary crate)\uff1b\n    - \u5305\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a crate\uff0c\u65e0\u8bba\u662f\u5e93\u7684\u8fd8\u662f\u4e8c\u8fdb\u5236\u7684\u3002\n- Crates \uff1a\u4e00\u4e2a\u6a21\u5757\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u5b83\u5f62\u6210\u4e86\u5e93\u6216\u4e8c\u8fdb\u5236\u9879\u76ee\u3002\n  - Cargo \u9075\u5faa\u7684\u4e00\u4e2a\u7ea6\u5b9a\uff1a\n    - `src/main.rs` \u5c31\u662f\u4e00\u4e2a\u4e0e\u5305\u540c\u540d\u7684\u4e8c\u8fdb\u5236 crate \u7684 crate \u6839\u3002\n    - `src/lib.rs`\uff0c\u5219\u5305\u5e26\u6709\u4e0e\u5176\u540c\u540d\u7684\u5e93 crate\uff0c\u4e14 `src/lib.rs` \u662f crate \u6839\n    - \u5982\u679c\u4e00\u4e2a\u5305\u540c\u65f6\u542b\u6709 `src/main.rs` \u548c `src/lib.rs`\uff0c\u5219\u5b83\u6709\u4e24\u4e2a crate\uff1a\u4e00\u4e2a\u5e93\u548c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u9879\uff0c\u4e14\u540d\u5b57\u90fd\u4e0e\u5305\u76f8\u540c\u3002\n    - \u901a\u8fc7\u5c06\u6587\u4ef6\u653e\u5728 `src/bin` \u76ee\u5f55\u4e0b\uff0c\u4e00\u4e2a\u5305\u53ef\u4ee5\u62e5\u6709\u591a\u4e2a\u4e8c\u8fdb\u5236 crate\uff1a\u6bcf\u4e2a `src/bin` \u4e0b\u7684\u6587\u4ef6\u90fd\u4f1a\u88ab\u7f16\u8bd1\u6210\u4e00\u4e2a\u72ec\u7acb\u7684\u4e8c\u8fdb\u5236 crate\u3002\n- \u6a21\u5757\uff08Modules\uff09\u548c use\uff1a \u5141\u8bb8\u4f60\u63a7\u5236\u4f5c\u7528\u57df\u548c\u8def\u5f84\u7684\u79c1\u6709\u6027\u3002\n  - \u6a21\u5757 \u8ba9\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u4e2a crate \u4e2d\u7684\u4ee3\u7801\u8fdb\u884c\u5206\u7ec4\uff0c\u4ee5\u63d0\u9ad8\u53ef\u8bfb\u6027\u4e0e\u91cd\u7528\u6027\u3002\n  - \u6a21\u5757\u8fd8\u53ef\u4ee5\u63a7\u5236\u9879\u7684 \u79c1\u6709\u6027\uff0c\u5373\u9879\u662f\u53ef\u4ee5\u88ab\u5916\u90e8\u4ee3\u7801\u4f7f\u7528\u7684\uff08public\uff09\n- \u8def\u5f84\uff08path\uff09\uff1a\u4e00\u4e2a\u547d\u540d\u4f8b\u5982\u7ed3\u6784\u4f53\u3001\u51fd\u6570\u6216\u6a21\u5757\u7b49\u9879\u7684\u65b9\u5f0f\n\n```sh\n# \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u540d\u4e3a restaurant \u7684\u5e93\ncargo new --lib restaurant\n```\n\n```sh\n# \u6a21\u5757\u6811\ncrate\n \u2514\u2500\u2500 front_of_house\n     \u251c\u2500\u2500 hosting\n     \u2502   \u251c\u2500\u2500 add_to_waitlist\n     \u2502   \u2514\u2500\u2500 seat_at_table\n     \u2514\u2500\u2500 serving\n         \u251c\u2500\u2500 take_order\n         \u251c\u2500\u2500 serve_order\n         \u2514\u2500\u2500 take_payment\n```\n\n```rust\n// src/lib.rs\n#![allow(unused)]\nfn main() {\n    mod front_of_house {\n        mod hosting { // \u6a21\u5757\u5d4c\u5957\n            fn add_to_waitlist() {}\n\n            fn seat_at_table() {}\n        }\n\n        mod serving {\n            fn take_order() {}\n\n            fn server_order() {}\n\n            fn take_payment() {}\n        }\n    }\n}\n```\n\n## crate\n\n- crate\uff08\u4e2d\u6587\u6709 \u201c\u5305\uff0c\u5305\u88c5\u7bb1\u201d \u4e4b\u610f\uff09\u662f Rust \u7684\u7f16\u8bd1\u5355\u5143\u3002\n  - \u5f53\u8c03\u7528 `rustc some_file.rs` \u65f6\uff0c`some_file.rs` \u88ab\u5f53\u4f5c crate \u6587\u4ef6\u3002\n  - \u5982\u679c `some_file.rs` \u91cc\u9762\u542b\u6709 `mod` \u58f0\u660e\uff0c\u90a3\u4e48\u6a21\u5757\u6587\u4ef6\u7684\u5185\u5bb9\u5c06\u5728\u7f16\u8bd1\u4e4b\u524d\u88ab\u63d2\u5165 crate \u6587\u4ef6\u7684\u76f8\u5e94\u58f0\u660e\u5904\u3002\n  - \u6362\u53e5\u8bdd\u8bf4\uff0c\u6a21\u5757\u4e0d\u4f1a\u5355\u72ec\u88ab\u7f16\u8bd1\uff0c\u53ea\u6709 crate \u624d\u4f1a\u88ab\u7f16\u8bd1\u3002\n  - crate \u53ef\u4ee5\u7f16\u8bd1\u6210\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\uff08binary\uff09\u6216\u5e93\u6587\u4ef6\uff08library\uff09\u3002\n\n## \u5e93\uff08library\uff09\n\n- \u9ed8\u8ba4\u60c5\u51b5 \u4e0b\uff0crustc \u5c06\u4ece crate \u4ea7\u751f\u4e8c\u8fdb\u5236\u53ef\u6267\u884c\u6587\u4ef6\u3002\n- \u8fd9\u79cd\u884c\u4e3a\u53ef\u4ee5\u901a\u8fc7 rustc \u7684\u9009\u9879 `--crate-type` \u91cd\u8f7d\u3002\n\n```sh\n# \u7f16\u8bd1\u4e00\u4e2a\u5e93\nrustc --crate-type=lib rary.rs # \u751f\u6210 library.rlib\n# library.rlib \u662f\u5df2\u7f16\u8bd1\u597d\u7684\u5e93\u7684\u8def\u5f84\uff0c\u8fd9\u91cc\u5047\u8bbe\u5b83\u5728\u540c\u4e00\u76ee\u5f55\u4e0b\uff1a\n\n# \u94fe\u63a5\u4e00\u4e2a\u5df2\u7f16\u8bd1\u597d\u7684\u5e93\uff0c\u5e76\u7f16\u8bd1\u6210\u53ef\u6267\u884c\u6587\u4ef6\nrustc executable.rs --extern rary=library.rlib --edition=2018 && ./executable\n```\n\n```rust\n// rary.rs\npub fn public_function() {\n    println!("called rary\'s `public_function()`");\n}\nfn private_function() {\n    println!("called rary\'s `private_function()`");\n}\npub fn indirect_access() {\n    print!("called rary\'s `indirect_access()`, that\\n> ");\n\n    private_function();\n}\n```\n\n```rust\n// executable.rs\n// extern crate rary; // \u5728 Rust 2015 \u7248\u6216\u66f4\u65e9\u7248\u672c\u9700\u8981\u8fd9\u4e2a\u5bfc\u5165\u8bed\u53e5\nfn main() {\n    rary::public_function();\n    // \u62a5\u9519\uff01 `private_function` \u662f\u79c1\u6709\u7684\n    //rary::private_function();\n    rary::indirect_access();\n}\n```\n\n## \u6a21\u5757\u8def\u5f84\u7684\u4e24\u79cd\u5f62\u5f0f\n\n- \u7edd\u5bf9\u8def\u5f84\uff08absolute path\uff09\u4ece crate \u6839\u90e8\u5f00\u59cb\uff0c\u4ee5 crate \u540d\u6216\u8005\u5b57\u9762\u91cf crate \u5f00\u5934\u3002\n- \u76f8\u5bf9\u8def\u5f84\uff08relative path\uff09\u4ece\u5f53\u524d\u6a21\u5757\u5f00\u59cb\uff0c\u4ee5 self\u3001super \u6216\u5f53\u524d\u6a21\u5757\u7684\u6807\u8bc6\u7b26\u5f00\u5934\u3002\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n```\n\n### \u4f7f\u7528 super \u8d77\u59cb\u7684\u76f8\u5bf9\u8def\u5f84\n\n```rust\nfn serve_order() {}\nmod back_of_house {\n    fn fix_incorrect_order() {\n        cook_order();\n        super::serve_order();\n    }\n    fn cook_order() {}\n}\n```\n\n## \u521b\u5efa\u516c\u6709\u7684\u7ed3\u6784\u4f53\u548c\u679a\u4e3e\n\n```rust\nmod back_of_house {\n    // \u5982\u679c\u6211\u4eec\u5728\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9a\u4e49\u7684\u524d\u9762\u4f7f\u7528\u4e86 pub \uff0c\n    // \u8fd9\u4e2a\u7ed3\u6784\u4f53\u4f1a\u53d8\u6210\u516c\u6709\u7684\uff0c\u4f46\u662f\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5b57\u6bb5\u4ecd\u7136\u662f\u79c1\u6709\u7684\u3002\n    pub struct Breakfast {\n        pub toast: String,\n        seasonal_fruit: String,\n    }\n\n    impl Breakfast {\n        // \u60f3\u5f53\u4e8e\u9759\u6001\u65b9\u6cd5\n        pub fn summer(toast: &str) -> Breakfast {\n            Breakfast {\n                toast: String::from(toast),\n                seasonal_fruit: String::from("peaches"),\n            }\n        }\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Order a breakfast in the summer with Rye toast\n    let mut meal = back_of_house::Breakfast::summer("Rye");\n    // Change our mind about what bread we\'d like\n    meal.toast = String::from("Wheat"); // \u516c\u6709\u5b57\u6bb5\n    println!("I\'d like {} toast please", meal.toast);\n\n    // The next line won\'t compile if we uncomment it; we\'re not allowed\n    // to see or modify the seasonal fruit that comes with the meal\n    // meal.seasonal_fruit = String::from("blueberries"); // \u79c1\u6709\u5b57\u6bb5\n}\n```\n\n```rust\nmod back_of_house {\n    // \u5982\u679c\u6211\u4eec\u5c06\u679a\u4e3e\u8bbe\u4e3a\u516c\u6709\uff0c\u5219\u5b83\u7684\u6240\u6709\u6210\u5458\u90fd\u5c06\u53d8\u4e3a\u516c\u6709\u3002\n    pub enum Appetizer {\n        Soup,\n        Salad,\n    }\n}\n\npub fn eat_at_restaurant() {\n    let order1 = back_of_house::Appetizer::Soup;\n    let order2 = back_of_house::Appetizer::Salad;\n}\n```\n\n## \u4f7f\u7528 use \u5173\u952e\u5b57\u5c06\u540d\u79f0\u5f15\u5165\u4f5c\u7528\u57df\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting::add_to_waitlist;\n\npub fn eat_at_restaurant() {\n    add_to_waitlist();\n    add_to_waitlist();\n    add_to_waitlist();\n}\nfn main() {}\n```\n\n```rust\n#![allow(unused)]\nfn main() {\n    use std::fmt::Result;\n    use std::io::Result as IoResult;\n\n    fn function1() -> Result {\n        // --snip--\n        Ok(())\n    }\n\n    fn function2() -> IoResult<()> {\n        // --snip--\n        Ok(())\n    }\n}\n```\n\n```rust\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\n// \u4f7f\u7528 pub use \u91cd\u5bfc\u51fa\u540d\u79f0\npub use crate::front_of_house::hosting; // \u5f15\u5165\u5e76\u5bfc\u51fa\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\nfn main() {}\n```\n\n## \u4f7f\u7528 as \u5173\u952e\u5b57\u63d0\u4f9b\u65b0\u7684\u540d\u79f0\n\n```rust\nuse std::fmt::Result;\nuse std::io::Result as IoResult;\n\nfn function1() -> Result {\n    // --snip--\n}\n\nfn function2() -> IoResult<()> {\n    // --snip--\n}\n```\n\n## \u4f7f\u7528\u5916\u90e8\u5305\n\n```toml\n[dependencies]\nrand = "0.8.3"\n```\n\n```rust\nuse rand::Rng;\nfn main() {\n    let secret_number = rand::thread_rng().gen_range(1..101);\n}\n```\n\n```rust\nuse std::cmp::Ordering;\nuse std::io;\n\n// \u4e0e\u4e0a\u9762\u5199\u6cd5\u76f8\u540c\nuse std::{cmp::Ordering, io};\n\n\nuse std::io;\nuse std::io::Write;\n\n// \u4e0e\u4e0a\u9762\u5199\u6cd5\u76f8\u540c\nuse std::io::{self, Write};\n\n// \u5c06\u4e00\u4e2a\u8def\u5f84\u4e0b \u6240\u6709 \u516c\u6709\u9879\u5f15\u5165\u4f5c\u7528\u57df\nuse std::collections::*;\n```\n\n## \u5c06\u6a21\u5757\u5206\u5272\u8fdb\u4e0d\u540c\u6587\u4ef6\n\n```rust\n// src/lib.rs\n\n// \u5728 mod front_of_house \u540e\u4f7f\u7528\u5206\u53f7\uff0c\u800c\u4e0d\u662f\u4ee3\u7801\u5757\uff0c\n// \u8fd9\u5c06\u544a\u8bc9 Rust \u5728\u53e6\u4e00\u4e2a\u4e0e\u6a21\u5757\u540c\u540d\u7684\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6a21\u5757\u7684\u5185\u5bb9\u3002\nmod front_of_house;\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n    hosting::add_to_waitlist();\n}\n```\n\n```rust\n// src/front_of_house.rs\n\n// pub mod hosting {\n//     pub fn add_to_waitlist() {}\n// }\n\n// \u7ee7\u7eed\u91cd\u6784\uff0c\u5c06 hosting \u6a21\u5757\u4e5f\u63d0\u53d6\u5230\u5176\u81ea\u5df1\u7684\u6587\u4ef6\u4e2d\npub mod hosting;\n```\n\n```rust\n// src/front_of_house/hosting.rs\npub fn add_to_waitlist() {}\n```\n\n## \u4f7f\u7528 pub use \u5bfc\u51fa\u5408\u9002\u7684\u516c\u6709 API\n\n```rust\n// src/lib.rs\n//! # Art\n//!\n//! A library for modeling artistic concepts.\n\npub mod kinds {\n    /// The primary colors according to the RYB color model.\n    pub enum PrimaryColor {\n        Red,\n        Yellow,\n        Blue,\n    }\n\n    /// The secondary colors according to the RYB color model.\n    pub enum SecondaryColor {\n        Orange,\n        Green,\n        Purple,\n    }\n}\n\npub mod utils {\n    use crate::kinds::*;\n\n    /// Combines two primary colors in equal amounts to create\n    /// a secondary color.\n    pub fn mix(c1: PrimaryColor, c2: PrimaryColor) -> SecondaryColor {\n        // --snip--\n    }\n}\n```\n\n```rust\n// src/main.rs\nuse art::kinds::PrimaryColor; // \u5168\u8def\u5f84\nuse art::utils::mix;\n\nfn main() {\n    let red = PrimaryColor::Red;\n    let yellow = PrimaryColor::Yellow;\n    mix(red, yellow);\n}\n```\n\n\u4f7f\u7528 pub use \u8bed\u53e5\u5bfc\u51fa\n\n```rust\n// src/lib.rs\n//! # Art\n//!\n//! A library for modeling artistic concepts.\n\npub use self::kinds::PrimaryColor;\npub use self::kinds::SecondaryColor;\npub use self::utils::mix;\n\npub mod kinds {\n    // --snip--\n}\n\npub mod utils {\n    // --snip--\n}\n```\n\n```rust\n// src/main.rs\nuse art::PrimaryColor; // \u5bfc\u51fa\u540e\u8def\u5f84\u53d8\u77ed\nuse art::mix;\n\nfn main() {\n    // --snip--\n}\n```\n\n## \u5de5\u4f5c\u7a7a\u95f4\n\n### \u521b\u5efa\u5de5\u4f5c\u7a7a\u95f4\n\n```sh\nmkdir add\ncd add\ncargo new adder\ncargo new add-one --lib\n\n# \u6784\u5efa\u6574\u4e2a\u5de5\u4f5c\u7a7a\u95f4\ncargo build\n```\n\n- \u8fd9\u4e2a `Cargo.toml` \u6587\u4ef6\u914d\u7f6e\u4e86\u6574\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u3002\n- \u5b83\u4e0d\u4f1a\u5305\u542b `[package]` \u6216\u5176\u4ed6\u6211\u4eec\u5728 `Cargo.toml` \u4e2d\u89c1\u8fc7\u7684\u5143\u4fe1\u606f\u3002\n- \u76f8\u53cd\uff0c\u5b83\u4ee5 `[workspace]` \u90e8\u5206\u4f5c\u4e3a\u5f00\u59cb\uff0c\u5e76\u901a\u8fc7\u6307\u5b9a `adder` \u7684\u8def\u5f84\u6765\u4e3a\u5de5\u4f5c\u7a7a\u95f4\u589e\u52a0\u6210\u5458\n- \u5de5\u4f5c\u7a7a\u95f4\u53ea\u5728\u6839\u76ee\u5f55\u6709\u4e00\u4e2a`Cargo.lock`\uff0c\u800c\u4e0d\u662f\u5728\u6bcf\u4e00\u4e2a `crate` \u76ee\u5f55\u90fd\u6709 `Cargo.lock`\u3002\n  - \u8fd9\u786e\u4fdd\u4e86\u6240\u6709\u7684 `crate` \u90fd\u4f7f\u7528\u5b8c\u5168\u76f8\u540c\u7248\u672c\u7684\u4f9d\u8d56\u3002\n- `adder` \u5e76\u6ca1\u6709\u81ea\u5df1\u7684 `target` \u76ee\u5f55\n- \u5373\u4f7f\u8fdb\u5165 `adder` \u76ee\u5f55\u8fd0\u884c `cargo build`\uff0c\u6784\u5efa\u7ed3\u679c\u4e5f\u4f4d\u4e8e `add/target` \u800c\u4e0d\u662f `add/adder/target`\n- \u5982\u679c\u4f60\u9009\u62e9\u5411 `crates.io` \u53d1\u5e03\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 `crate`\uff0c\u6bcf\u4e00\u4e2a\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684 `crate` \u9700\u8981\u5355\u72ec\u53d1\u5e03\u3002\n  - \u5fc5\u987b\u8fdb\u5165\u6bcf\u4e00\u4e2a crate \u7684\u76ee\u5f55\u5e76\u8fd0\u884c `cargo publish` \u6765\u53d1\u5e03\u5de5\u4f5c\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e00\u4e2a crate\u3002\n\n```toml\n# Cargo.toml\n[workspace]\nmembers = [\n    "adder",\n    "add-one",\n]\n```\n\n```sh\n\u251c\u2500\u2500 Cargo.lock\n\u251c\u2500\u2500 Cargo.toml\n\u251c\u2500\u2500 add-one\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 lib.rs\n\u251c\u2500\u2500 adder\n\u2502   \u251c\u2500\u2500 Cargo.toml\n\u2502   \u2514\u2500\u2500 src\n\u2502       \u2514\u2500\u2500 main.rs\n\u2514\u2500\u2500 target\n```\n\n### \u8c03\u7528\u5de5\u4f5c\u7a7a\u95f4\u7684 create\n\n```rust\n// add-one/src/lib.rs\npub fn add_one(x: i32) -> i32 {\n    x + 1\n}\n```\n\n```toml\n# adder/Cargo.toml\n[dependencies]\nadd-one = { path = "../add-one" }\n```\n\n```rust\n// adder/src/main.rs\nuse add_one;\nfn main() {\n    let num = 10;\n    println!("Hello, world! {} plus one is {}!", num, add_one::add_one(num));\n}\n```\n\n### \u4f9d\u8d56\u5916\u90e8 crate\n\n```toml\n# add-one/Cargo.toml\n[dependencies]\nrand = "0.5.5"\n```\n\n## \u4f7f\u7528 cargo install \u4ece Crates.io \u5b89\u88c5\u4e8c\u8fdb\u5236\u6587\u4ef6\n\n`cargo install` \u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u90fd\u5b89\u88c5\u5230 Rust \u5b89\u88c5\u6839\u76ee\u5f55\u7684 `bin` \u6587\u4ef6\u5939\u4e2d\u3002\n\u5982\u679c\u4f60\u4f7f\u7528 `rustup.rs` \u5b89\u88c5\u7684 Rust \u4e14\u6ca1\u6709\u81ea\u5b9a\u4e49\u4efb\u4f55\u914d\u7f6e\uff0c\u8fd9\u5c06\u662f`$HOME/.cargo/bin`\n\n```sh\ncargo install ripgrep\n```\n'},jQG5:function(n,t,e){"use strict";e.r(t),t.default='\u4e00\u4e2a\u591a\u884c\u6587\u6863\u5b57\u7b26\u4e32\u7684\u4f8b\u5b50\n\n```python\ndef my_function():\n    """Do nothing, but document it.\n\n    No, really, it doesn\'t do anything.\n    """\n    pass\n\nprint(my_function.__doc__)\n```\n\n```sh\nDo nothing, but document it.\n\n    No, really, it doesn\'t do anything.\n```\n'},jRLb:function(n,t,e){"use strict";e.r(t),t.default="```dart\n// \u4f7f\u7528 break \u6765\u7ec8\u6b62\u5faa\u73af\uff1a\nwhile (true) {\n  if (shutDownRequested()) break;\n  processIncomingRequests();\n}\n// \u4f7f\u7528 continue \u6765\u5f00\u59cb\u4e0b\u4e00\u6b21\u5faa\u73af\uff1a\nfor (int i = 0; i < candidates.length; i++) {\n  var candidate = candidates[i];\n  if (candidate.yearsExperience < 5) {\n    continue;\n  }\n  candidate.interview();\n}\n// \u4e0a\u9762\u7684\u4ee3\u7801\u5728\u5b9e\u73b0 Iterable \u63a5\u53e3\u5bf9\u8c61\u4e0a\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u5199\u6cd5\uff1a\ncandidates.where((c) => c.yearsExperience >= 5)\n          .forEach((c) => c.interview());\n```\n"},jtKn:function(n,t,e){"use strict";e.r(t),t.default='```js\nvar a = ["a", "b", "c"];\na.indexOf("b"); // 1\na.indexOf("y"); // -1\n\n// 2 is in the list\nif ([1, 2, 3].includes(2)) {\n  console.log("2 is in the list");\n}\n\n// 2 is not in the list\nif (![4, 5, 6].includes(2)) {\n  console.log("2 is not in the list");\n}\n\nconst someList = ["a", "b", "c", "d", "e"];\n// 2\nconsole.log(someList.indexOf("c"));\n\nconst originalList = [1, 2, 3];\nconst newList = [...originalList];\noriginalList[2] = 4;\n```\n'},kLhq:function(n,t,e){"use strict";e.r(t),t.default="Dart \u4e2d\u7684 Switch \u8bed\u53e5\u4f7f\u7528 == \u6bd4\u8f83 integer\u3001string\u3001\u6216\u8005\u7f16\u8bd1\u65f6\u5e38\u91cf\u3002\n\u6bd4\u8f83\u7684\u5bf9\u8c61\u5fc5\u987b\u90fd\u662f\u540c\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff08\u5e76\u4e14\u4e0d\u662f \u5176\u5b50\u7c7b\uff09\n\n\u6bcf\u4e2a\u975e\u7a7a\u7684 case \u8bed\u53e5\u90fd\u5fc5\u987b\u6709\u4e00\u4e2a break \u8bed\u53e5\u3002\n\u53e6\u5916\u8fd8\u53ef\u4ee5\u901a\u8fc7 continue\u3001 throw \u6216 \u8005 return \u6765\u7ed3\u675f\u975e\u7a7a case \u8bed\u53e5\u3002\n\u5f53\u6ca1\u6709 case \u8bed\u53e5\u5339\u914d\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4f7f\u7528 default \u8bed\u53e5\u6765\u5339\u914d\u8fd9\u79cd\u9ed8\u8ba4\u60c5\u51b5\u3002\n\n```dart\nvar command = 'OPEN';\nswitch (command) {\n  case 'CLOSED':\n    executeClosed();\n    break;\n  case 'PENDING':\n    executePending();\n    break;\n  case 'APPROVED':\n    executeApproved();\n    break;\n  case 'DENIED':\n    executeDenied();\n    break;\n  case 'OPEN':\n    executeOpen();\n    break;\n  default:\n    executeUnknown();\n}\n\n// \u5728 Dart \u4e2d\u7684\u7a7a case \u8bed\u53e5\u4e2d\u53ef\u4ee5\u4e0d\u8981 break \u8bed\u53e5\uff1a\nvar command = 'CLOSED';\nswitch (command) {\n  case 'CLOSED': // Empty case falls through.\n  case 'NOW_CLOSED':\n    // Runs for both CLOSED and NOW_CLOSED.\n    executeNowClosed();\n    break;\n}\n\n//  \u4f7f\u7528 continue \u8bed\u53e5\u8df3\u8f6c\u5230\u5bf9\u5e94\u7684\u6807\u7b7e\uff08label\uff09\u5904\u7ee7\u7eed\u6267\u884c\nvar command = 'CLOSED';\nswitch (command) {\n  case 'CLOSED':\n    executeClosed();\n    continue nowClosed;\n    // Continues executing at the nowClosed label.\nnowClosed:\n  case 'NOW_CLOSED':\n    // Runs for both CLOSED and NOW_CLOSED.\n    executeNowClosed();\n    break;\n}\n```\n"},klDU:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: 11.\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668\n---\n"},"l+KN":function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// InsertionSort \u63d2\u5165\u6392\u5e8f\n// \u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u8be5\u5143\u7d20\u53ef\u4ee5\u8ba4\u4e3a\u5df2\u7ecf\u88ab\u6392\u5e8f\n// \u53d6\u51fa\u4e0b\u4e00\u4e2a\u5143\u7d20\uff0c\u5728\u5df2\u7ecf\u6392\u5e8f\u7684\u5143\u7d20\u5e8f\u5217\u4e2d\u4ece\u540e\u5411\u524d\u626b\u63cf\n// \u5982\u679c\u8be5\u5143\u7d20\uff08\u5df2\u6392\u5e8f\uff09\u5927\u4e8e\u65b0\u5143\u7d20\uff0c\u5c06\u8be5\u5143\u7d20\u79fb\u5230\u4e0b\u4e00\u4f4d\u7f6e\n// \u76f4\u5230\u627e\u5230\u5df2\u6392\u5e8f\u7684\u5143\u7d20\u5c0f\u4e8e\u6216\u8005\u7b49\u4e8e\u65b0\u5143\u7d20\nfunc InsertionSort(arr []int) []int {\n\tfor i := 1; i < len(arr); i++ {\n\t\tkey := arr[i]                // \u53d6\u51fa\u5143\u7d20\uff0c\u4ece\u7b2c\u4e8c\u4e2a\u5f00\u59cb\n\t\tj := i - 1                   // \u524d\u9762\u7684\u5143\u7d20\n\t\tfor j >= 0 && arr[j] > key { // \u4e0e\u53d6\u51fa\u5143\u7d20\u6bd4\u8f83\uff0c\u5927\u4e8e\u5219\u540e\u79fb\n\t\t\tarr[j+1] = arr[j]\n\t\t\tj--\n\t\t}\n\t\tarr[j+1] = key // \u5c06\u53d6\u51fa\u7684\u5143\u7d20\u63d2\u5165\u5408\u9002\u7684\u4f4d\u7f6e\n\t}\n\treturn arr\n}\n\nfunc main() {\n\ta := []int{3, 6, 7, 4, 5, 1, 2}\n\tfmt.Println(InsertionSort(a))\n}\n\n```\n'},lMAp:function(n,t,e){"use strict";e.r(t),t.default='## \u5b57\u7b26\u7684\u8868\u793a\u65b9\u6cd5\n\n- `\\123`\uff1a\u4ee5\u516b\u8fdb\u5236\u503c\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c\u659c\u6760\u540e\u9762\u9700\u8981\u4e09\u4e2a\u6570\u5b57\u3002\n- `\\x4D`\uff1a\u4ee5\u5341\u516d\u8fdb\u5236\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff0c`\\x`\u540e\u9762\u662f\u5341\u516d\u8fdb\u5236\u6574\u6570\u3002\n- `\\u2620`\uff1a\u4ee5 Unicode \u7801\u70b9\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff08\u4e0d\u9002\u7528\u4e8e ASCII \u5b57\u7b26\uff09\uff0c\u7801\u70b9\u4ee5\u5341\u516d\u8fdb\u5236\u8868\u793a\uff0c`\\u`\u540e\u9762\u9700\u8981 4 \u4e2a\u5b57\u7b26\u3002\n- `\\U0001243F`\uff1a\u4ee5 Unicode \u7801\u70b9\u8868\u793a\u4e00\u4e2a\u5b57\u7b26\uff08\u4e0d\u9002\u7528\u4e8e ASCII \u5b57\u7b26\uff09\uff0c\u7801\u70b9\u4ee5\u5341\u516d\u8fdb\u5236\u8868\u793a\uff0c`\\U`\u540e\u9762\u9700\u8981 8 \u4e2a\u5b57\u7b26\u3002\n\n```c++\n// \u8f93\u51fa\u201cABC\u201d\nprintf("ABC\\n");\nprintf("\\101\\102\\103\\n");\nprintf("\\x41\\x42\\x43\\n");\n\n// \u8f93\u51fa\u201c\u2022 Bullet 1\u201d\nprintf("\\u2022 Bullet 1\\n");\nprintf("\\U00002022 Bullet 1\\n");\n```\n\n## \u591a\u5b57\u8282\u5b57\u7b26\n\n```c++\nchar* s = "\\u6625\\u5929";\nprintf("%s\\n", s); // \u6625\u5929\n\nchar* s = "\u6625\u5929"; // \u5982\u679c\u5f53\u524d\u7cfb\u7edf\u662f UTF-8 \u7f16\u7801\nprintf("%s\\n", s);\n\nchar* s = u8"\u6625\u5929";\nprintf("%s\\n", s);\n```\n\n## \u5bbd\u5b57\u7b26\n\n\u6240\u8c13\u201c\u5bbd\u5b57\u7b26\u201d\uff0c\u5c31\u662f\u6bcf\u4e2a\u5b57\u7b26\u5360\u7528\u7684\u5b57\u8282\u6570\u662f\u56fa\u5b9a\u7684\uff0c\u8981\u4e48\u662f 2 \u4e2a\u5b57\u8282\uff0c\u8981\u4e48\u662f 4 \u4e2a\u5b57\u8282\u3002\n\n```c++\nsetlocale(LC_ALL, "");\n\nwchar_t c = L\'\u725b\'\uff1b\nprintf("%lc\\n", c);\n\nwchar_t* s = L"\u6625\u5929";\nprintf("%ls\\n", s);\n```\n'},lQaX:function(n,t,e){"use strict";e.r(t),t.default='```python\nsome_string = "a b c d e"\n# a,b,c,d,e\nprint(some_string.replace(" ", ","))\n```\n'},lSkh:function(n,t,e){"use strict";e.r(t),t.default="```dart\nimport 'dart:math' as math;\n\nvar random = new math.Random();\nrandom.nextDouble(); // Between 0.0 and 1.0: [0, 1)\nrandom.nextInt(10);  // Between 0 and 9.\n\nvar random = new math.Random();\nrandom.nextBool();  // true or false\n```\n\n## \u751f\u6210\u968f\u673a\u5e03\u5c14\u503c\n\n```dart\nimport 'dart:math' as math;\n\nvar random = new math.Random();\nrandom.nextBool();  // true or false\n```\n"},"liU+":function(n,t,e){"use strict";e.r(t),t.default='Go \u7684 if \u8bed\u53e5\u4e0e for \u5faa\u73af\u7c7b\u4f3c\uff0c\u8868\u8fbe\u5f0f\u5916\u65e0\u9700\u5c0f\u62ec\u53f7 ( ) \uff0c\u800c\u5927\u62ec\u53f7 { } \u5219\u662f\u5fc5\u987b\u7684\u3002\n\n```go\npackage main\nimport (\n  "fmt"\n  "math"\n)\nfunc sqrt(x float64) string {\n  if x < 0 {\n    return sqrt(-x) + "i"\n  }\n  return fmt.Sprint(math.Sqrt(x))\n}\nfunc main() {\n  fmt.Println(sqrt(2), sqrt(-4)) // 1.4142135623730951 2i\n}\n\n\n// \u540c for \u4e00\u6837\uff0c if \u8bed\u53e5\u53ef\u4ee5\u5728\u6761\u4ef6\u8868\u8fbe\u5f0f\u524d\u6267\u884c\u4e00\u4e2a\u7b80\u5355\u7684\u8bed\u53e5\u3002\n// \u8be5\u8bed\u53e5\u58f0\u660e\u7684\u53d8\u91cf\u4f5c\u7528\u57df\u4ec5\u5728 if \u4e4b\u5185\u3002\npackage main\nimport (\n  "fmt"\n  "math"\n)\nfunc pow(x, n, lim float64) float64 {\n  if v := math.Pow(x, n); v < lim {\n    return v\n  }\n  return lim\n}\nfunc main() {\n  fmt.Println(\n    pow(3, 2, 10),\n    pow(3, 3, 20),\n  )\n}\n\n\n// \u5728 if \u7684\u7b80\u77ed\u8bed\u53e5\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u540c\u6837\u53ef\u4ee5\u5728\u4efb\u4f55\u5bf9\u5e94\u7684 else \u5757\u4e2d\u4f7f\u7528\u3002\npackage main\nimport (\n  "fmt"\n  "math"\n)\nfunc pow(x, n, lim float64) float64 {\n  if v := math.Pow(x, n); v < lim {\n    return v\n  } else {\n    fmt.Printf("%g >= %g\\n", v, lim)\n  }\n  // \u8fd9\u91cc\u5f00\u59cb\u5c31\u4e0d\u80fd\u4f7f\u7528 v \u4e86\n  return lim\n}\nfunc main() {\n  fmt.Println(\n    pow(3, 2, 10),\n    pow(3, 3, 20),\n  )\n}\n\n// \u591a\u4e2a\u6761\u4ef6\u7684\u65f6\u5019\nif integer == 3 {\n  fmt.Println("The integer is equal to 3")\n} else if integer < 3 {\n  fmt.Println("The integer is less than 3")\n} else {\n  fmt.Println("The integer is greater than 3")\n}\n```\n'},"ltO+":function(n,t,e){"use strict";e.r(t),t.default="```go\nfunc maxArea(height []int) int {\n    res := 0\n    for i:=0; i<len(height)-1; i++ {\n        for j:=i+1; j<len(height); j++ {\n            res = max(res,(j-i)*min(height[i],height[j]))\n        }\n    }\n    return res\n}\n\nfunc min(x,y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n\nfunc max(x,y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n\n```go\nfunc maxArea(height []int) int {\n    res := 0\n    i := 0\n    j := len(height)-1\n    for i<j {\n        res = max(res,(j-i)*min(height[i],height[j]))\n        if height[i] < height[j] {\n            i++\n        } else {\n            j--\n        }\n    }\n    return res\n}\n\nfunc min(x,y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n\nfunc max(x,y int) int {\n    if x > y {\n        return x\n    }\n    return y\n}\n```\n"},lw7P:function(n,t,e){"use strict";e.r(t),t.default='## \u4e00\u4e2a\u4f8b\u5b50\n\n```sh\nexample/\n   |--calc.go\n   |--calc_test.go\n```\n\n```go\n// calc.go\npackage main\n\nfunc Add(a int, b int) int {\n    return a + b\n}\n\nfunc Mul(a int, b int) int {\n    return a * b\n}\n```\n\n```go\n// calc_test.go\npackage main\n\nimport "testing"\n\nfunc TestAdd(t *testing.T) {\n\tif ans := Add(1, 2); ans != 3 {\n\t\tt.Errorf("1 + 2 expected be 3, but %d got", ans)\n\t}\n\n\tif ans := Add(-10, -20); ans != -30 {\n\t\tt.Errorf("-10 + -20 expected be -30, but %d got", ans)\n\t}\n}\n```\n\n```sh\n# \u6267\u884c\u6240\u6709\u6d4b\u8bd5\u7528\u4f8b\n$ go test -v\n=== RUN   TestAdd\n--- PASS: TestAdd (0.00s)\n=== RUN   TestMul\n--- PASS: TestMul (0.00s)\nPASS\nok      example 0.007s\n\n# \u53ea\u60f3\u8fd0\u884c\u5176\u4e2d\u7684\u4e00\u4e2a\u7528\u4f8b\n$ go test -run TestAdd -v\n=== RUN   TestAdd\n--- PASS: TestAdd (0.00s)\nPASS\nok      example 0.007s\n```\n\n## \u5355\u5143\u6d4b\u8bd5\n\n\u8fd0\u884c `go testing` \u4f1a\u626b\u63cf\u5e76\u7f16\u8bd1\u8fd0\u884c\u5de5\u7a0b\u76ee\u5f55\u4e0b `xxx_test.go` \u4ee3\u7801\u6587\u4ef6\u4e2d\u7684 `TestXxx` \u6d4b\u8bd5\u51fd\u6570\u3002\n\n- \u6d4b\u8bd5\u4ee3\u7801\u6587\u4ef6\u540d `xxx_test.go`\uff0c\u5fc5\u987b\u9075\u5b88\u3002\n- \u6d4b\u8bd5\u51fd\u6570\u7b7e\u540d `TestXxx(t *testing.T)`\uff0c\u5fc5\u987b\u9075\u5b88\u3002\n\n```sh\n# \u5f53\u524d\u76ee\u5f55\uff08\u67d0\u76ee\u5f55\uff09\u67e5\u627e xxx_test.go \u6d4b\u8bd5\u4ee3\u7801\ngo test .\ngo test ./xxx/xxx\n\n# \u5f53\u524d\u76ee\u5f55\uff08\u67d0\u76ee\u5f55\uff09\u4ee5\u53ca\u5b50\u76ee\u5f55\u4e0b\u6240\u7684 xxx_test.go \u6d4b\u8bd5\u4ee3\u7801\ngo test ./...\ngo test ./xxx/xxx/...\n\n# -v \u53c2\u6570\uff0c\u6253\u5f00\u7ec8\u7aef\u4fe1\u606f\u6253\u5370\u7684\u5f00\u5173\u3002\n# \u6d4b\u8bd5\u4ee3\u7801\u4e2d\u7684\u6253\u5370\u51fd\u6570\uff08t.Log\u3001t.Skip\u3001t.Error\u3001t.Fatal\uff09\n# fmt.Print \u53ea\u4f1a\u5728\u4efb\u4e00\u6d4b\u8bd5\u51fd\u6570\u4e3a FAIL \u65f6\uff0c\u4fe1\u606f\u624d\u4f1a\u663e\u793a\u3002\ngo test . -v\n\n# -run \u7528\u6765\u6307\u5b9a\u6267\u884c\u67d0\u4e2a TestXXX \u5355\u5143\u6d4b\u8bd5\u51fd\u6570\uff0c\u652f\u6301\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u5339\u914d\u6d4b\u8bd5\u51fd\u6570\u540d\u79f0\u3002\n# \u50cf TestMain\u3001init() \u8fd9\u7c7b\u6846\u67b6\u6027\u4ee3\u7801\u4ecd\u7136\u4f1a\u88ab\u6267\u884c\uff0c\u4ee5\u786e\u4fdd\u73af\u5883\u6b63\u786e\u3002\ngo test -run ^TestXxx$\n```\n\n```go\n// youwu_test.go\n// \u5176\u5b9e t.Error \u7b49\u540c\u4e8e t.Log + t.Fail\uff0c\u5f53\u53ea\u6807\u8bb0\u9519\u8bef\u4e0d\u6253\u5370\u4fe1\u606f\u65f6\uff0c\u4f7f\u7528t.Fail\u3002\n// \u6253\u5370\u7684\u51fd\u6570 `t.Log`\u3001`t.Error`\u3001`t.Fatal` \u90fd\u6709\u5bf9\u5e94\u7684\u683c\u5f0f\u5316\u5f62\u5f0f `t.Logf`\u3001`t.Errorf`\u3001`t.Fatalf`\npackage main_test\n\nimport (\n    "fmt"\n    "testing"\n)\nfunc TestWorld(t *testing.T) {\n    t.Log("TestWorlds")\n}\n\n// \u521d\u59cb\u5316 init \u65b9\u5f0f\nfunc init() {\n    fmt.Println("hello, i\'m \\"init\\".")\n}\n\n// \u4f7f\u7528 t \u5b9e\u4f8b\u7684 Cleanup \u65b9\u6cd5\u6ce8\u518c\u4e00\u4e2a\u5728\u5355\u5143\u6d4b\u8bd5\u7a0b\u5e8f\u9000\u51fa\u524d\u6267\u884c\u7684\u51fd\u6570\u3002\n// \u5305\u7ea7\u522b\uff1a\u4f7f\u7528 TestMain \u6a21\u5f0f\u3002\nfunc cleanuptest() {\n    fmt.Println("Cleanup.\ud83d\ude00")\n}\nfunc TestClean(t *testing.T) {\n    t.Cleanup(cleanuptest)\n    t.Log("testing done.")\n}\n```\n\n```sh\n...\n=== RUN   TestReportError\n    youwu_test.go:42: report in: t.Error\n--- FAIL: TestReportError (0.00s)\n...\nexit status 1\nFAIL    hellotest       0.498s\n```\n\n```go\n// \u8df3\u51fa\u5f53\u524d\u5355\u5143\u6d4b\u8bd5\u51fd\u6570\uff0c\u72b6\u6001\u4e3a\u8df3\u51fa\uff08SKIP\uff0c\u4e0d\u8ba1\u4e3a\u5931\u8d25\uff09\uff0c\u6267\u884c\u4e0b\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\nt.SkipNow()\n\n// .Log -> t.SkipNow \u6253\u5370\u5e76\u8df3\u51fa\u5f53\u524d\u5355\u5143\u6d4b\u8bd5\u51fd\u6570\nt.Skip("\u4fe1\u606f")\n\n// \u6807\u8bb0\u5f53\u524d\u5355\u5143\u6d4b\u8bd5\u51fd\u6570\u72b6\u6001\u4e3a\u9519\u8bef\uff08FAILED\uff09\uff0c\u7ee7\u7eed\u6267\u884c\nt.Fail()\n\n// \u6807\u8bb0\u5f53\u524d\u5355\u5143\u6d4b\u8bd5\u51fd\u6570\u72b6\u6001\u4e3a\u9519\u8bef\uff08FAILED\uff09\u5e76\u8df3\u51fa\uff0c\u6267\u884c\u4e0b\u4e00\u4e2a\u6d4b\u8bd5\u51fd\u6570\nt.FailNow()\n\n// t.Log(\u4fe1\u606f) -> t.Fail()\uff0c\u8be5\u5355\u5143\u6d4b\u8bd5\u4f1a\u7ee7\u7eed\u6267\u884c\nt.Error("\u4fe1\u606f")\n\n// t.Log(\u4fe1\u606f) -> t.FailNow()\uff0c\u8df3\u51fa\u8be5\u5355\u5143\u6d4b\u8bd5\uff0c\u6267\u884c\u4e0b\u4e00\u4e2a\u5355\u5143\u6d4b\u8bd5\u51fd\u6570\nt.Fatal("\u4fe1\u606f")\n```\n\n## \u5b50\u6d4b\u8bd5\n\n```go\n// calc_test.go\n// t.Error/t.Errorf \u9047\u9519\u4e0d\u505c\uff0c\u8fd8\u4f1a\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u7684\u6d4b\u8bd5\u7528\u4f8b\n// t.Fatal/t.Fatalf \u9047\u9519\u5373\u505c\nfunc TestMul(t *testing.T) {\n\tt.Run("pos", func(t *testing.T) {\n\t\tif Mul(2, 3) != 6 {\n\t\t\tt.Fatal("fail")\n\t\t}\n\n\t})\n\tt.Run("neg", func(t *testing.T) {\n\t\tif Mul(2, -3) != -6 {\n\t\t\tt.Fatal("fail")\n\t\t}\n\t})\n}\n```\n\n\u5bf9\u4e8e\u591a\u4e2a\u5b50\u6d4b\u8bd5\u7684\u573a\u666f\uff0c\u66f4\u63a8\u8350\u5982\u4e0b\u7684\u5199\u6cd5(table-driven tests)\uff1a\n\u5982\u679c\u6570\u636e\u91cf\u8f83\u5927\uff0c\u6216\u662f\u4e00\u4e9b\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u63a8\u8350\u4f7f\u7528\u76f8\u5bf9\u8def\u5f84\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u3002\n\n```go\n//  calc_test.go\nfunc TestMul(t *testing.T) {\n\tcases := []struct {\n\t\tName           string\n\t\tA, B, Expected int\n\t}{\n\t\t{"pos", 2, 3, 6},\n\t\t{"neg", 2, -3, -6},\n\t\t{"zero", 2, 0, 0},\n\t}\n\n\tfor _, c := range cases {\n\t\tt.Run(c.Name, func(t *testing.T) {\n\t\t\tif ans := Mul(c.A, c.B); ans != c.Expected {\n\t\t\t\tt.Fatalf("%d * %d expected %d, but %d got",\n\t\t\t\t\tc.A, c.B, c.Expected, ans)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n## \u5e2e\u52a9\u51fd\u6570\n\nGo \u8bed\u8a00\u5728 1.9 \u7248\u672c\u4e2d\u5f15\u5165\u4e86 `t.Helper()`\uff0c\u7528\u4e8e\u6807\u6ce8\u8be5\u51fd\u6570\u662f\u5e2e\u52a9\u51fd\u6570\uff0c\n\u62a5\u9519\u65f6\u5c06\u8f93\u51fa\u5e2e\u52a9\u51fd\u6570\u8c03\u7528\u8005\u7684\u4fe1\u606f\uff0c\u800c\u4e0d\u662f\u5e2e\u52a9\u51fd\u6570\u7684\u5185\u90e8\u4fe1\u606f\u3002\n\n\u5173\u4e8e helper \u51fd\u6570\u7684 2 \u4e2a\u5efa\u8bae\uff1a\n\n- \u4e0d\u8981\u8fd4\u56de\u9519\u8bef\uff0c \u5e2e\u52a9\u51fd\u6570\u5185\u90e8\u76f4\u63a5\u4f7f\u7528 t.Error \u6216 t.Fatal \u5373\u53ef\uff0c\n- \u8c03\u7528 t.Helper() \u8ba9\u62a5\u9519\u4fe1\u606f\u66f4\u51c6\u786e\uff0c\u6709\u52a9\u4e8e\u5b9a\u4f4d\u3002\n\n```go\n// calc_test.go\npackage main\n\nimport "testing"\n\ntype calcCase struct{ A, B, Expected int }\n\nfunc createMulTestCase(t *testing.T, c *calcCase) {\n\tt.Helper()\n\tif ans := Mul(c.A, c.B); ans != c.Expected {\n\t\tt.Fatalf("%d * %d expected %d, but %d got",\n\t\t\tc.A, c.B, c.Expected, ans)\n\t}\n\n}\n\nfunc TestMul(t *testing.T) {\n\tcreateMulTestCase(t, &calcCase{2, 3, 6})\n\tcreateMulTestCase(t, &calcCase{2, -3, -6})\n\tcreateMulTestCase(t, &calcCase{2, 0, 1}) // wrong case\n}\n```\n\n## TestMain \u65b9\u5f0f\n\n`TestMain` \u662f `go testing` \u6d4b\u8bd5\u6846\u67b6\u7684\u6307\u5b9a\u51fd\u6570\u3002\n\u7528\u4e8e\u63a7\u5236\u6574\u4e2a\u6d4b\u8bd5\u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u51fd\u6570\u662f\u5305\u7ea7\u522b\u7684\u3002\n\u5373\u4e00\u4e2a\u5305\u4e0b\uff0c\u5982\u679c\u6709\u591a\u4e2a `xxx_test.go` \u6d4b\u8bd5\u4ee3\u7801\uff0c\u53ea\u80fd\u5728\u5176\u4e2d\u67d0\u4e2a `xxx_test.go` \u4e2d\u5b9a\u4e49\u3002\n\n```go\n// youwu_test.go\npackage main_test\n\nimport (\n    "fmt"\n    "os"\n    "testing"\n)\n\nfunc TestHello(t *testing.T) {\n    t.Log("TestHello")\n}\n\n// func TestWorld(t *testing.T) {\n//  t.Log("TestWorlds")\n// }\n\nfunc cleanuptest() {\n    fmt.Println("Cleanup.\ud83d\ude00")\n}\nfunc TestClean(t *testing.T) {\n    t.Cleanup(cleanuptest)\n    t.Log("testing done.")\n}\n\nfunc init() {\n    fmt.Println("hello, i\'m \\"init\\".")\n}\n\nfunc TestMain(m *testing.M) {\n    // \u5728\u5f00\u59cb\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\u4e4b\u524d\n    // \u53ef\u4ee5\u5728\u6b64\u5904\u6dfb\u52a0\u73af\u5883\u521d\u59cb\u5316\u76f8\u5173\u4ee3\u7801\u6216\u8005\u51fd\u6570\u8c03\u7528\n    fmt.Println("\ud83d\ude00 \u5f00\u59cb\u6240\u6709\u6d4b\u8bd5\u524d")\n\n    retCode := m.Run()\n\n    // \u5728\u5168\u90e8\u6d4b\u8bd5\u4ee3\u7801\u8fd0\u884c\u7ed3\u675f\u9000\u51fa\u4e4b\u524d\n    // \u53ef\u4ee5\u5728\u6b64\u5904\u6dfb\u52a0\u6e05\u7406\u4ee3\u7801\u6216\u51fd\u6570\u8c03\u7528\n    fmt.Println("\ud83d\ude00 \u7ed3\u675f\u6240\u6709\u6d4b\u8bd5\u524d")\n\n    os.Exit(retCode)\n}\n```\n\n```sh\n~/Projects/go/examples/hellotest\n\u279c  go test -v\nhello, i\'m "init".\n\ud83d\ude00 \u5f00\u59cb\u6240\u6709\u6d4b\u8bd5\u524d\n=== RUN   TestHello\n    youwu_test.go:10: TestHello\n--- PASS: TestHello (0.00s)\n=== RUN   TestClean\n    youwu_test.go:22: testing done.\nCleanup.\ud83d\ude00\n--- PASS: TestClean (0.00s)\nPASS\n\ud83d\ude00 \u7ed3\u675f\u6240\u6709\u6d4b\u8bd5\u524d\nok      hellotest       0.369s\n```\n\n## benckmark \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\n\n\u591a\u6b21\u8fd0\u884c\uff0c\u5e76\u8ba1\u7b97\u5176\u5e73\u5747\u6267\u884c\u65f6\u95f4\u4ece\u800c\u8bc4\u4f30\u5176\u8fd0\u884c\u6548\u7387\u3002\ngo \u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\u4ee3\u7801\u7684\u51fd\u6570\u547d\u540d\uff1a\n\n- `func BenchmarkXxx(*testing.T)`\n\n\u57fa\u51c6\u6d4b\u8bd5\u62a5\u544a\u6bcf\u4e00\u5217\u503c\u5bf9\u5e94\u7684\u542b\u4e49\u5982\u4e0b\uff1a\n\n```go\ntype BenchmarkResult struct {\n    N         int           // \u8fed\u4ee3\u6b21\u6570\n    T         time.Duration // \u57fa\u51c6\u6d4b\u8bd5\u82b1\u8d39\u7684\u65f6\u95f4\n    Bytes     int64         // \u4e00\u6b21\u8fed\u4ee3\u5904\u7406\u7684\u5b57\u8282\u6570\n    MemAllocs uint64        // \u603b\u7684\u5206\u914d\u5185\u5b58\u7684\u6b21\u6570\n    MemBytes  uint64        // \u603b\u7684\u5206\u914d\u5185\u5b58\u7684\u5b57\u8282\u6570\n}\n```\n\n```go\n// youwu_test.go\npackage main_test\n\nimport (\n    "fmt"\n    "math/rand"\n    "os"\n    "testing"\n)\n\nfunc TestHello(t *testing.T) {\n    t.Log("TestHello")\n}\n\nfunc init() {\n    fmt.Println("hello, i\'m \\"init\\".")\n}\n\nfunc TestMain(m *testing.M) {\n    // \u5728\u5f00\u59cb\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u4ee3\u7801\u4e4b\u524d\n    // \u53ef\u4ee5\u5728\u6b64\u5904\u6dfb\u52a0\u73af\u5883\u521d\u59cb\u5316\u76f8\u5173\u4ee3\u7801\u6216\u8005\u51fd\u6570\u8c03\u7528\n    fmt.Println("\ud83d\ude00 \u5f00\u59cb\u6240\u6709\u6d4b\u8bd5\u524d")\n\n    retCode := m.Run()\n\n    // \u5728\u5168\u90e8\u6d4b\u8bd5\u4ee3\u7801\u8fd0\u884c\u7ed3\u675f\u9000\u51fa\u4e4b\u524d\n    // \u53ef\u4ee5\u5728\u6b64\u5904\u6dfb\u52a0\u6e05\u7406\u4ee3\u7801\u6216\u51fd\u6570\u8c03\u7528\n    fmt.Println("\ud83d\ude00 \u7ed3\u675f\u6240\u6709\u6d4b\u8bd5\u524d")\n\n    os.Exit(retCode)\n}\n\nfunc BenchmarkRandInt(b *testing.B) {\n    for i := 0; i < b.N; i++ {\n        rand.Int()\n    }\n}\n```\n\n```sh\n~/Projects/go/examples/hellotest\n\u279c  go test -bench=\'Rand\' -v .\nhello, i\'m "init".\n\ud83d\ude00 \u5f00\u59cb\u6240\u6709\u6d4b\u8bd5\u524d\n=== RUN   TestHello\n    youwu_test.go:19: TestHello\n--- PASS: TestHello (0.00s)\ngoos: darwin\ngoarch: amd64\npkg: hellotest\ncpu: Intel(R) Core(TM) i5-7500 CPU @ 3.40GHz\nBenchmarkRandInt\nBenchmarkRandInt-4      70186930                16.21 ns/op\nPASS\n\ud83d\ude00 \u7ed3\u675f\u6240\u6709\u6d4b\u8bd5\u524d\nok      hellotest       1.476s\n```\n\n\u53ef\u4ee5\u4f7f\u7528 b.ResetTimer() \u5148\u91cd\u7f6e\u5b9a\u65f6\u5668\n\n```go\nfunc BenchmarkHello(b *testing.B) {\n    ... // \u8017\u65f6\u64cd\u4f5c\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        fmt.Sprintf("hello")\n    }\n}\n```\n\n\u4f7f\u7528 RunParallel \u6d4b\u8bd5\u5e76\u53d1\u6027\u80fd\n\n```go\nfunc BenchmarkParallel(b *testing.B) {\n\ttempl := template.Must(template.New("test").Parse("Hello, {{.}}!"))\n\tb.RunParallel(func(pb *testing.PB) {\n\t\tvar buf bytes.Buffer\n\t\tfor pb.Next() {\n\t\t\t// \u6240\u6709 goroutine \u4e00\u8d77\uff0c\u5faa\u73af\u4e00\u5171\u6267\u884c b.N \u6b21\n\t\t\tbuf.Reset()\n\t\t\ttempl.Execute(&buf, "World")\n\t\t}\n\t})\n}\n```\n'},m17L:function(n,t,e){"use strict";e.r(t),t.default="```dart\n// \u4f7f\u7528 indexOf() \u6765\u67e5\u627e list \u4e2d\u5bf9\u8c61\u7684\u7d22\u5f15\nvar fruits = ['apples', 'oranges'];\n// Access a list item by index.\nassert(fruits[0] == 'apples');\n// Find an item in a list.\nassert(fruits.indexOf('apples') == 0);\n```\n"},m9FK:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u4fe1\u9053\u9009\u62e9\n---\n"},mMP3:function(n,t,e){"use strict";e.r(t),t.default='## CGO \u57fa\u7840\n\n\u8981\u4f7f\u7528 CGO \u7279\u6027\uff0c\u9700\u8981\u5b89\u88c5 C/C++ \u6784\u5efa\u5de5\u5177\u94fe\uff0c\n\u5728 macOS \u548c Linux \u4e0b\u662f\u8981\u5b89\u88c5 GCC\uff0c\n\u5728 windows \u4e0b\u662f\u9700\u8981\u5b89\u88c5 MinGW \u5de5\u5177\u3002\n\n\u540c\u65f6\u9700\u8981\u4fdd\u8bc1\u73af\u5883\u53d8\u91cf `CGO_ENABLED` \u88ab\u8bbe\u7f6e\u4e3a 1\uff0c\u8fd9\u8868\u793a CGO \u662f\u88ab\u542f\u7528\u7684\u72b6\u6001\u3002\n\u5728\u672c\u5730\u6784\u5efa\u65f6 `CGO_ENABLED` \u9ed8\u8ba4\u662f\u542f\u7528\u7684\uff0c\u5f53\u4ea4\u53c9\u6784\u5efa\u65f6 CGO \u9ed8\u8ba4\u662f\u7981\u6b62\u7684\u3002\n\n\u6bd4\u5982\u8981\u4ea4\u53c9\u6784\u5efa ARM \u73af\u5883\u8fd0\u884c\u7684 Go \u7a0b\u5e8f\uff0c\n\u9700\u8981\u624b\u5de5\u8bbe\u7f6e\u597d C/C++ \u4ea4\u53c9\u6784\u5efa\u7684\u5de5\u5177\u94fe\uff0c\n\u540c\u65f6\u5f00\u542f `CGO_ENABLED` \u73af\u5883\u53d8\u91cf\u3002\n\u7136\u540e\u901a\u8fc7 `import "C"` \u8bed\u53e5\u542f\u7528 CGO \u7279\u6027\u3002\n\n## CGO \u793a\u4f8b\n\n\u57fa\u4e8e C \u6807\u51c6\u5e93\u51fd\u6570\u8f93\u51fa\u5b57\u7b26\u4e32\n\n```go\n// hello.go\npackage main\n\n//#include <stdio.h>\nimport "C"\n\nfunc main() {\n    C.puts(C.CString("Hello, World\\n"))\n}\n```\n\n\u4f7f\u7528\u81ea\u5df1\u7684 C \u51fd\u6570\n\n```go\n// hello.go\npackage main\n\n/*\n#include <stdio.h>\n\nstatic void SayHello(const char* s) {\n    puts(s);\n}\n*/\nimport "C"\n\nfunc main() {\n    C.SayHello(C.CString("Hello, World\\n"))\n}\n```\n\n\u5c06 `SayHello` \u51fd\u6570\u653e\u5230\u5f53\u524d\u76ee\u5f55\u4e0b\u7684\u4e00\u4e2a `C` \u8bed\u8a00\u6e90\u6587\u4ef6\u4e2d\uff08\u540e\u7f00\u540d\u5fc5\u987b\u662f `.c`\uff09\n\n\u6ce8\u610f\uff0c\u5982\u679c\u4e4b\u524d\u8fd0\u884c\u7684\u547d\u4ee4\u662f `go run hello.go` \u6216 `go build hello.go` \u7684\u8bdd\uff0c\n\u6b64\u5904\u987b\u4f7f\u7528 `go run "your/package"` \u6216 `go build "your/package"` \u624d\u53ef\u4ee5\u3002\n\u82e5\u672c\u5c31\u5728\u5305\u8def\u5f84\u4e0b\u7684\u8bdd\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c `go run .` \u6216 `go build`\n\n```c++\n// hello.c\n\n#include <stdio.h>\n\nvoid SayHello(const char* s) {\n    puts(s);\n}\n```\n\n```go\n// hello.go\npackage main\n\n//void SayHello(const char* s);\nimport "C"\n\nfunc main() {\n    C.SayHello(C.CString("Hello, World\\n"))\n}\n```\n\n## C \u4ee3\u7801\u7684\u6a21\u5757\u5316\n\n```c++\n// hello.h\nvoid SayHello(const char* s);\n```\n\n```c++\n// hello.c\n\n#include "hello.h"\n#include <stdio.h>\n\nvoid SayHello(const char* s) {\n    puts(s);\n}\n```\n\n## \u7528 Go \u91cd\u65b0\u5b9e\u73b0 C \u51fd\u6570\n\n```c++\n// hello.h\nvoid SayHello(/*const*/ char* s);\n```\n\n\u901a\u8fc7 `CGO` \u7684 `//export SayHello` \u6307\u4ee4\u5c06 Go \u8bed\u8a00\u5b9e\u73b0\u7684\u51fd\u6570 `SayHello` \u5bfc\u51fa\u4e3a C \u8bed\u8a00\u51fd\u6570\u3002\n\n```go\n// hello.go\npackage main\n\nimport "C"\n\nimport "fmt"\n\n//export SayHello\nfunc SayHello(s *C.char) {\n    fmt.Print(C.GoString(s))\n}\n```\n\n## \u9762\u5411 C \u63a5\u53e3\u7684 Go \u7f16\u7a0b\n\n\u51e0\u4e2a\u6587\u4ef6\u91cd\u65b0\u5408\u5e76\u5230\u4e00\u4e2a Go \u6587\u4ef6\n\n```go\npackage main\n\n//void SayHello(char* s);\nimport "C"\n\nimport (\n    "fmt"\n)\n\nfunc main() {\n    C.SayHello(C.CString("Hello, World\\n"))\n}\n\n//export SayHello\nfunc SayHello(s *C.char) {\n    fmt.Print(C.GoString(s))\n}\n```\n\nGo1.10 \u4e2d CGO \u65b0\u589e\u52a0\u4e86\u4e00\u4e2a `_GoString_` \u9884\u5b9a\u4e49\u7684 C \u8bed\u8a00\u7c7b\u578b\uff0c\u7528\u6765\u8868\u793a Go \u8bed\u8a00\u5b57\u7b26\u4e32\n\n```go\n// +build go1.10\n\npackage main\n\n//void SayHello(_GoString_ s);\nimport "C"\n\nimport (\n    "fmt"\n)\n\nfunc main() {\n    C.SayHello("Hello, World\\n")\n}\n\n//export SayHello\nfunc SayHello(s string) {\n    fmt.Print(s)\n}\n```\n\n\u867d\u7136\u770b\u8d77\u6765\u5168\u90e8\u662f Go \u8bed\u8a00\u4ee3\u7801\uff0c\n\u4f46\u662f\u6267\u884c\u7684\u65f6\u5019\u662f\u5148\u4ece Go \u8bed\u8a00\u7684 `main` \u51fd\u6570\uff0c\n\u5230 CGO \u81ea\u52a8\u751f\u6210\u7684 C \u8bed\u8a00\u7248\u672c `SayHello` \u6865\u63a5\u51fd\u6570\uff0c\n\u6700\u540e\u53c8\u56de\u5230\u4e86 Go \u8bed\u8a00\u73af\u5883\u7684 `SayHello` \u51fd\u6570\u3002\n\n## `#cgo` \u8bed\u53e5\n\n\u5728 `import "C"` \u8bed\u53e5\u524d\u7684\u6ce8\u91ca\u4e2d\u53ef\u4ee5\u901a\u8fc7 `#cgo` \u8bed\u53e5\u8bbe\u7f6e\u7f16\u8bd1\u9636\u6bb5\u548c\u94fe\u63a5\u9636\u6bb5\u7684\u76f8\u5173\u53c2\u6570\u3002\n\n```go\n// #cgo CFLAGS: -DPNG_DEBUG=1 -I./include\n// #cgo LDFLAGS: -L/usr/local/lib -lpng\n// #include <png.h>\nimport "C"\n```\n\nCFLAGS \u90e8\u5206\uff0c\n`-D` \u90e8\u5206\u5b9a\u4e49\u4e86\u5b8f PNG_DEBUG\uff0c\u503c\u4e3a 1\uff1b\n`-I` \u5b9a\u4e49\u4e86\u5934\u6587\u4ef6\u5305\u542b\u7684\u68c0\u7d22\u76ee\u5f55\u3002\n\nLDFLAGS \u90e8\u5206\uff0c\n`-L` \u6307\u5b9a\u4e86\u94fe\u63a5\u65f6\u5e93\u6587\u4ef6\u68c0\u7d22\u76ee\u5f55\uff0c\n`-l` \u6307\u5b9a\u4e86\u94fe\u63a5\u65f6\u9700\u8981\u94fe\u63a5 png \u5e93\u3002\n\n\u56e0\u4e3a C/C++ \u9057\u7559\u7684\u95ee\u9898\uff0c\nC \u5934\u6587\u4ef6\u68c0\u7d22\u76ee\u5f55\u53ef\u4ee5\u662f\u76f8\u5bf9\u76ee\u5f55\uff0c\n\u4f46\u662f\u5e93\u6587\u4ef6\u68c0\u7d22\u76ee\u5f55\u5219\u9700\u8981\u7edd\u5bf9\u8def\u5f84\u3002\n\u5728\u5e93\u6587\u4ef6\u7684\u68c0\u7d22\u76ee\u5f55\u4e2d\u53ef\u4ee5\u901a\u8fc7 `${SRCDIR}` \u53d8\u91cf\u8868\u793a\u5f53\u524d\u5305\u76ee\u5f55\u7684\u7edd\u5bf9\u8def\u5f84\uff1a\n\n```go\n// #cgo LDFLAGS: -L${SRCDIR}/libs -lfoo\n```\n\n\u5c55\u5f00\u540e\n\n```go\n// #cgo LDFLAGS: -L/go/src/foo/libs -lfoo\n```\n\n\u6761\u4ef6\u7f16\u8bd1\u9009\u9879\n\n```go\n// #cgo windows CFLAGS: -DX86=1\n// #cgo !windows LDFLAGS: -lm\n```\n\n```go\npackage main\n\n/*\n#cgo windows CFLAGS: -DCGO_OS_WINDOWS=1\n#cgo darwin CFLAGS: -DCGO_OS_DARWIN=1\n#cgo linux CFLAGS: -DCGO_OS_LINUX=1\n\n#if defined(CGO_OS_WINDOWS)\n    const char* os = "windows";\n#elif defined(CGO_OS_DARWIN)\n    const char* os = "darwin";\n#elif defined(CGO_OS_LINUX)\n    const char* os = "linux";\n#else\n#\terror(unknown os)\n#endif\n*/\nimport "C"\n\nfunc main() {\n    print(C.GoString(C.os))\n}\n```\n\n## build tag \u6761\u4ef6\u7f16\u8bd1\n\n\u4e0b\u9762\u7684\u6e90\u6587\u4ef6\u53ea\u6709\u5728\u8bbe\u7f6e `debug` \u6784\u5efa\u6807\u5fd7\u65f6\u624d\u4f1a\u88ab\u6784\u5efa\n\n```go\n// +build debug\n\npackage main\n\nvar buildMode = "debug"\n```\n\n```sh\ngo build -tags="debug"\ngo build -tags="windows debug"\n```\n\n`linux,386` \u4e2d `linux` \u548c `386` \u7528\u9017\u53f7\u94fe\u63a5\u8868\u793a AND \u7684\u610f\u601d\uff1b\n\u800c `linux,386` \u548c `darwin,!cgo` \u4e4b\u95f4\u901a\u8fc7\u7a7a\u767d\u5206\u5272\u6765\u8868\u793a OR \u7684\u610f\u601d\u3002\n\n```go\n// +build linux,386 darwin,!cgo\n```\n'},mPyA:function(n,t,e){"use strict";e.r(t),t.default="```python\n# \u4e00\u4e2a if ... elif ... elif ... \u5e8f\u5217\n# \u53ef\u4ee5\u770b\u4f5c\u662f\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684 switch \u6216 case \u8bed\u53e5\u7684\u66ff\u4ee3\nx = int(input(\"Please enter an integer: \"))\n\nif x < 0:\n    x = 0\n    print('Negative changed to zero')\nelif x == 0:\n    print('Zero')\nelif x == 1:\n    print('Single')\nelse:\n    print('More')\n```\n"},mSSx:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n---"},mUEX:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u683c\u5f0f\u5316\u8f93\u51fa\n---\n"},mfi5:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6ce8\u91ca\n---\n"},mjWa:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u63a5\u53e3/\u7279\u5f81\uff08interface/trait\uff09\n---\n"},nAmX:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: 3.\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\n---\n"},nFtE:function(n,t,e){"use strict";e.r(t),t.default="\u5e38\u89c1\u5305\u7ed3\u6784\n\n```sh\n\u251c\u2500\u2500 root\n\u2502\xa0\xa0 \u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 lib\n\u2502\xa0\xa0 \u251c\u2500\u2500 dist\n\u2502\xa0\xa0 \u251c\u2500\u2500 node_modules\n\u2502\xa0\xa0 \u251c\u2500\u2500 package.json\n```\n"},nLpw:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u96c6\u5408\n---\n"},"nM2+":function(n,t,e){"use strict";e.r(t),t.default='## \u4e00\u4e2a\u7b80\u5355\u793a\u4f8b\n\n```go\npackage main\n\nimport (\n\t"encoding/json"\n\t"encoding/xml"\n\t"fmt"\n)\n\n// \u5b9a\u4e49\u4e00\u4e2a visitor \u51fd\u6570\uff0c\u53c2\u6570\u662f\u4e00\u4e2a\u63a5\u53e3\u7c7b\u578b\ntype Visitor func(shape Shape)\n\n// \u63a5\u53e3\u5305\u542b\u4e00\u4e2aaccept\u65b9\u6cd5\uff0c\u53c2\u6570\u662f visitor \u51fd\u6570\n// Shape \u65b9\u6cd5\u7684\u7684\u53c2\u6570 \u7684\u53c2\u6570\u662f\u81ea\u5df1\ntype Shape interface {\n\taccept(Visitor)\n}\n\n// \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\ntype Circle struct {\n\tRadius int\n}\n\n// \u628a\u7ed3\u6784\u4f53\u81ea\u5df1\u5f53\u4f5c\u53c2\u6570\uff0c\u4f20\u7ed9\u53c2\u6570\u51fd\u6570\u7684\u53c2\u6570\nfunc (c Circle) accept(v Visitor) {\n\tv(c)\n}\n\n// // \u5b9a\u4e49\u53e6\u4e00\u4e2a\u7ed3\u6784\u4f53\ntype Rectangle struct {\n\tWidth, Heigh int\n}\n\nfunc (r Rectangle) accept(v Visitor) {\n\tv(r)\n}\n\n// \u5b9e\u73b0\u4e00\u4e2avisitor\u51fd\u6570\nfunc JsonVisitor(shape Shape) {\n\tbytes, err := json.Marshal(shape)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(bytes))\n}\n\n// \u5b9e\u73b0\u53e6\u4e00\u4e2avisitor\u51fd\u6570\nfunc XmlVisitor(shape Shape) {\n\tbytes, err := xml.Marshal(shape)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfmt.Println(string(bytes))\n}\n\nfunc main() {\n\tc := Circle{10}\n\tr := Rectangle{100, 200}\n\tshapes := []Shape{c, r}\n\n\tfor _, s := range shapes {\n\t\ts.accept(JsonVisitor)\n\t\ts.accept(XmlVisitor)\n\t}\n}\n```\n\n```sh\n{"Radius":10}\n<Circle><Radius>10</Radius></Circle>\n{"Width":100,"Heigh":200}\n<Rectangle><Width>100</Width><Heigh>200</Heigh></Rectangle>\n```\n\n## kubectl \u7684\u5b9e\u73b0\u65b9\u6cd5\n\n```go\npackage main\n\nimport (\n\t"fmt"\n)\n\n// \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\ntype VisitorFunc func(*Info, error) error\n\n// \u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\ntype Visitor interface {\n\tVisit(VisitorFunc) error\n}\n\n// \u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\ntype Info struct {\n\tNamespace   string\n\tName        string\n\tOtherThings string\n}\n\n// \u5b9e\u73b0\u63a5\u53e3\nfunc (info *Info) Visit(fn VisitorFunc) error {\n\tfmt.Println("Info Visit()")\n\treturn fn(info, nil)\n}\n\n// \u5d4c\u5165 visitor \u5b57\u6bb5\ntype NameVisitor struct {\n\tvisitor Visitor\n}\n\n// \u5b9e\u73b0\u63a5\u53e3\nfunc (v NameVisitor) Visit(fn VisitorFunc) error {\n\tfmt.Println("NameVisitor Visit()")\n\t// \u8c03\u7528\u5d4c\u5165\u5b57\u6bb5\u7684\u540c\u540d\u51fd\u6570\n\t// \u76f8\u5f53\u4e8e\u8c03\u7528\u5957\u5a03\u91cc\u9762\u7684\u540c\u540d\u51fd\u6570\n\treturn v.visitor.Visit(func(info *Info, err error) error {\n\t\tfmt.Println("NameVisitor() before call function")\n\t\terr = fn(info, err) // \u8fd9\u91cc\u8c03\u7528\u4e0a\u5c42\u5957\u5a03\u51fd\u6570\n\t\tif err == nil {\n\t\t\tfmt.Printf("==> Name=%s, NameSpace=%s\\n", info.Name, info.Namespace)\n\t\t}\n\t\tfmt.Println("NameVisitor() after call function")\n\t\treturn err\n\t})\n}\n\ntype OtherThingsVisitor struct {\n\tvisitor Visitor\n}\n\nfunc (v OtherThingsVisitor) Visit(fn VisitorFunc) error {\n\tfmt.Println("OtherThingsVisitor Visit()")\n\treturn v.visitor.Visit(func(info *Info, err error) error {\n\t\tfmt.Println("OtherThingsVisitor() before call function")\n\t\terr = fn(info, err)\n\t\tif err == nil {\n\t\t\tfmt.Printf("==> OtherThings=%s\\n", info.OtherThings)\n\t\t}\n\t\tfmt.Println("OtherThingsVisitor() after call function")\n\t\treturn err\n\t})\n}\n\ntype LogVisitor struct {\n\tvisitor Visitor\n}\n\nfunc (v LogVisitor) Visit(fn VisitorFunc) error {\n\tfmt.Println("LogVisitor Visit()")\n\treturn v.visitor.Visit(func(info *Info, err error) error {\n\t\tfmt.Println("LogVisitor() before call function")\n\t\terr = fn(info, err)\n\t\tfmt.Println("LogVisitor() after call function")\n\t\treturn err\n\t})\n}\n\nfunc main() {\n\tinfo := Info{}\n\tvar v Visitor = &info\n\t// v \u7ed3\u6784\u4f53\u505a\u4e86\u4e09\u6b21\u5957\u5a03\n\tv = LogVisitor{v}\n\tv = NameVisitor{v}\n\tv = OtherThingsVisitor{v}\n\n\tloadFile := func(info *Info, err error) error {\n\t\tfmt.Println("loadFile()")\n\t\tinfo.Name = "Hao Chen"\n\t\tinfo.Namespace = "MegaEase"\n\t\tinfo.OtherThings = "We are running as remote team."\n\t\treturn nil\n\t}\n\tv.Visit(loadFile)\n}\n```\n\n## visitor \u4fee\u9970\u5668\n\n```go\npackage main\n\nimport (\n\t"fmt"\n)\n\ntype VisitorFunc func(*Info, error) error\n\ntype Visitor interface {\n\tVisit(VisitorFunc) error\n}\n\ntype Info struct {\n\tNamespace   string\n\tName        string\n\tOtherThings string\n}\n\nfunc (info *Info) Visit(fn VisitorFunc) error {\n\tfmt.Println("Info Visit()")\n\treturn fn(info, nil)\n}\n\nfunc NameVisitor(info *Info, err error) error {\n\tfmt.Println("NameVisitor() before call function")\n\tfmt.Printf("==> Name=%s, NameSpace=%s\\n", info.Name, info.Namespace)\n\treturn err\n}\n\nfunc OtherVisitor(info *Info, err error) error {\n\tfmt.Println("OtherThingsVisitor() before call function")\n\treturn err\n}\n\ntype DecoratedVisitor struct {\n\tvisitor    Visitor\n\tdecorators []VisitorFunc\n}\n\nfunc NewDecoratedVisitor(v Visitor, fn ...VisitorFunc) Visitor {\n\tif len(fn) == 0 {\n\t\treturn v\n\t}\n\treturn DecoratedVisitor{v, fn}\n}\n\nfunc (v DecoratedVisitor) Visit(fn VisitorFunc) error {\n\tfmt.Println("DecoratedVisitor Visit()")\n\treturn v.visitor.Visit(func(info *Info, err error) error {\n\t\tfmt.Println("DecoratedVisitor v.visitor.Visit()")\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tif err := fn(info, nil); err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfor i := range v.decorators {\n\t\t\tif err := v.decorators[i](info, nil); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n}\n\nfunc main() {\n\tinfo := Info{}\n\tvar v Visitor = &info\n\tv = NewDecoratedVisitor(v, NameVisitor, OtherVisitor)\n\n\tloadFile := func(info *Info, err error) error {\n\t\tfmt.Println("loadFile()")\n\t\tinfo.Name = "Hao Chen"\n\t\tinfo.Namespace = "MegaEase"\n\t\tinfo.OtherThings = "We are running as remote team."\n\t\treturn nil\n\t}\n\n\tv.Visit(loadFile)\n}\n```\n'},nWr7:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u53d8\u91cf\n---"},nwiM:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u65ad\u8a00\n---"},o4bW:function(n,t,e){"use strict";e.r(t),t.default='```js\nlet s = "Hello world!";\ns.startsWith("Hello"); // true\ns.endsWith("!"); // true\ns.includes("o"); // true\n\nlet s = "Hello world!";\ns.startsWith("world", 6); // true\ns.endsWith("Hello", 5); // true\ns.includes("Hello", 6); // false\n\n"hello world".indexOf("o"); // 4\n"JavaScript".indexOf("script"); // -1\n"hello world".indexOf("o", 6); // 7\n\n"hello world".lastIndexOf("o"); // 7\n"hello world".lastIndexOf("o", 6); // 4\n\n"cat, bat, sat, fat".search("at"); // 1\n// replace\u65b9\u6cd5\u7528\u4e8e\u66ff\u6362\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u66ff\u6362\u7b2c\u4e00\u4e2a\u5339\u914d\uff08\u9664\u975e\u4f7f\u7528\u5e26\u6709g\u4fee\u9970\u7b26\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff09\u3002\n"aaa".replace("a", "b"); // "baa"\n\n// 2 is in the string\nif ("123".includes("2")) {\n  console.log("2 is in the string");\n}\n\n// 2 is not in the string\nif (!"456".includes("2")) {\n  console.log("2 is not in the string");\n}\n\n// Has a number\nif ("iphone 8".match(/\\d/g)) {\n  console.log("Has a number");\n}\n\n// Doesn\'t have a number\nif (!"iphone x".match(/\\d/g)) {\n  console.log("Doesn\'t have a number");\n}\n```\n'},oGPs:function(n,t,e){"use strict";e.r(t),t.default='## \u6784\u5efa\n\n```go\n// main.go\npackage main\nimport "fmt"\n\nfunc main() {\n\tfmt.Println("Hello, WebAssembly!")\n}\n```\n\n```sh\nGOOS=js GOARCH=wasm go build -o main.wasm .\n```\n\n## \u4f7f\u7528\n\n```sh\n# \u62f7\u8d1d\u5fc5\u8981\u7684js\ncp "$(go env GOROOT)/misc/wasm/wasm_exec.js" .\n\n# \u5b89\u88c5web\u5de5\u5177\ngo get -u github.com/shurcooL/goexec\n\n# \u542f\u52a8web\u670d\u52a1\ngoexec \'http.ListenAndServe(`:8080`, http.FileServer(http.Dir(`.`)))\'\n```\n\n```html\n\x3c!-- index.html --\x3e\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <script src="wasm_exec.js"><\/script>\n    <script>\n      const go = new Go();\n      WebAssembly.instantiateStreaming(\n        fetch("main.wasm"),\n        go.importObject\n      ).then((result) => {\n        go.run(result.instance);\n      });\n    <\/script>\n  </head>\n  <body></body>\n</html>\n```\n\n## \u66f4\u591a\u4f8b\u5b50\n\n### \u6ce8\u518c\u51fd\u6570(Register Functions)\n\n```go\n// main.go\npackage main\n\nimport "syscall/js"\n\nfunc fib(i int) int {\n\tif i == 0 || i == 1 {\n\t\treturn i\n\t}\n\treturn fib(i-1) + fib(i-2)\n}\n\nfunc fibFunc(this js.Value, args []js.Value) interface{} {\n\treturn js.ValueOf(fib(args[0].Int()))\n}\n\nfunc main() {\n\tdone := make(chan int)\n\tjs.Global().Set("fibFunc", js.FuncOf(fibFunc))\n\t<-done\n}\n```\n\n```html\n\x3c!-- index.html --\x3e\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <script src="wasm_exec.js"><\/script>\n    <script>\n      const go = new Go();\n      WebAssembly.instantiateStreaming(\n        fetch("main.wasm"),\n        go.importObject\n      ).then((result) => {\n        go.run(result.instance);\n      });\n    <\/script>\n  </head>\n  <body>\n    <input id="num" type="number" />\n    <button id="btn" onclick="ans.innerHTML=fibFunc(num.value * 1)">\n      Click\n    </button>\n    <p id="ans">1</p>\n  </body>\n</html>\n```\n\n### \u64cd\u4f5c DOM\n\n```go\n// main.go\npackage main\n\nimport (\n\t"strconv"\n\t"syscall/js"\n)\n\nfunc fib(i int) int {\n\tif i == 0 || i == 1 {\n\t\treturn i\n\t}\n\treturn fib(i-1) + fib(i-2)\n}\n\nvar (\n\tdocument = js.Global().Get("document")\n\tnumEle   = document.Call("getElementById", "num")\n\tansEle   = document.Call("getElementById", "ans")\n\tbtnEle   = js.Global().Get("btn")\n)\n\nfunc fibFunc(this js.Value, args []js.Value) interface{} {\n\tv := numEle.Get("value")\n\tif num, err := strconv.Atoi(v.String()); err == nil {\n\t\tansEle.Set("innerHTML", js.ValueOf(fib(num)))\n\t}\n\treturn nil\n}\n\nfunc main() {\n\tdone := make(chan int)\n\tbtnEle.Call("addEventListener", "click", js.FuncOf(fibFunc))\n\t<-done\n}\n```\n\n```html\n\x3c!-- index.html --\x3e\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <script src="wasm_exec.js"><\/script>\n    <script>\n      const go = new Go();\n      WebAssembly.instantiateStreaming(\n        fetch("main.wasm"),\n        go.importObject\n      ).then((result) => {\n        go.run(result.instance);\n      });\n    <\/script>\n  </head>\n  <body>\n    <input id="num" type="number" />\n    <button id="btn">Click</button>\n    <p id="ans">1</p>\n  </body>\n</html>\n```\n\n### \u56de\u8c03\u51fd\u6570(Callback Functions)\n\n```go\n// main.go\npackage main\n\nimport (\n\t"syscall/js"\n\t"time"\n)\n\nfunc fib(i int) int {\n\tif i == 0 || i == 1 {\n\t\treturn i\n\t}\n\treturn fib(i-1) + fib(i-2)\n}\n\nfunc fibFunc(this js.Value, args []js.Value) interface{} {\n\tcallback := args[len(args)-1]\n\n    // \u5f02\u6b65\u6267\u884c\n\tgo func() {\n\t\ttime.Sleep(3 * time.Second)\n\t\tv := fib(args[0].Int())\n\t\tcallback.Invoke(v) // \u6267\u884c\u5b8c\u6210\uff0c\u8c03\u7528\u56de\u8c03\u51fd\u6570\n\t}()\n\n\tjs.Global().Get("ans").Set("innerHTML", "Waiting 3s...")\n\treturn nil\n}\n\nfunc main() {\n\tdone := make(chan int)\n\tjs.Global().Set("fibFunc", js.FuncOf(fibFunc))\n\t<-done\n}\n```\n\n```html\n\x3c!-- index.html --\x3e\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <script src="wasm_exec.js"><\/script>\n    <script>\n      const go = new Go();\n      WebAssembly.instantiateStreaming(\n        fetch("main.wasm"),\n        go.importObject\n      ).then((result) => {\n        go.run(result.instance);\n      });\n    <\/script>\n  </head>\n  <body>\n    <input id="num" type="number" />\n    <button id="btn" onclick="fibFunc(num.value * 1, (v)=> ans.innerHTML=v)">\n      Click\n    </button>\n    <p id="ans"></p>\n  </body>\n</html>\n```\n\n### Performance - JavaScript vs Go\n\n```go\npackage main\n\nimport "syscall/js"\n\nfunc fib(i int) int {\n\tif i == 0 || i == 1 {\n\t\treturn i\n\t}\n\treturn fib(i-1) + fib(i-2)\n}\n\nfunc fibFunc(this js.Value, args []js.Value) interface{} {\n\treturn js.ValueOf(fib(args[0].Int()))\n}\n\nfunc main() {\n\tdone := make(chan int)\n\tjs.Global().Set("fibFunc", js.FuncOf(fibFunc))\n\t<-done\n}\n```\n\n```html\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <script src="./wasm_exec.js"><\/script>\n    <script type="module">\n      function fibonacciInJs(n) {\n        if (n <= 1) return n;\n        return fibonacciInJs(n - 1) + fibonacciInJs(n - 2);\n      }\n\n      async function run() {\n        const go = new Go();\n        const result = await WebAssembly.instantiateStreaming(\n          fetch("main.wasm"),\n          go.importObject\n        );\n        go.run(result.instance);\n\n        const num = 20;\n\n        console.time("Fibonnaci in go");\n        const fibGo = fibFunc(num);\n        console.timeEnd("Fibonnaci in go");\n\n        console.time("Fibonnaci in JS");\n        const fibJS = fibonacciInJs(num);\n        console.timeEnd("Fibonnaci in JS");\n\n        document.body.textContent = `Fib ${num}: Go ${fibGo} - JS ${fibJS}`;\n      }\n\n      run();\n    <\/script>\n  </head>\n  <body></body>\n</html>\n```\n\n## \u4f18\u5316\n\n```sh\n# \u4f18\u5316\u524d\u547d\u4ee4\nGOOS=js GOARCH=wasm go build -o ./main.wasm ./main.go\n\n# \u5229\u7528 tinygo\ntinygo build -o ./main.wasm -target wasm ./main.go\ntinygo build -o ./main.wasm -target wasm -no-debug ./main.go\n```\n'},oMOF:function(n,t,e){"use strict";e.r(t),t.default='```rust\n// \u4f4d\u7f6e\u53c2\u6570\nprintln!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");\nprintln!("{} of {:b} people know binary, the other half don\'t", 1, 2);\n// Alice, this is Bob. Bob, this is Alice\n// 1 of 10 people know binary, the other half don\'t\n\n\n// \u547d\u540d\u53c2\u6570\nformat!("{argument}", argument = "test");   // => "test"\nformat!("{name} {}", 1, name = 2);          // => "2 1"\nformat!("{a} {c} {b}", a="a", b=\'b\', c=3);  // => "a 3 b"\n\nlet argument = 2 + 2;\nformat!("{argument}");   // => "4"\n\n// \u7cbe\u5ea6\nprintln!("{:.3}", 3.141592);\n```\n\n- \u6240\u6709\u7c7b\u578b\u90fd\u80fd\u63a8\u5bfc\uff08derive\uff0c\u5373\u81ea \u52a8\u521b\u5efa\uff09`fmt::Debug` \u7684\u5b9e\u73b0\u3002\n  - \u4f7f\u7528 `{:?}` \u6253\u5370\n- \u4f46\u662f `fmt::Display` \u9700\u8981\u624b\u52a8\u5b9e\u73b0\u3002\n  - \u91c7\u7528 `{}` \u6807\u8bb0\n\n```rust\nuse std::fmt; // \u5bfc\u5165 `fmt`\n\n// \u5e26\u6709\u4e24\u4e2a\u6570\u5b57\u7684\u7ed3\u6784\u4f53\u3002\u63a8\u5bfc\u51fa `Debug`\uff0c\u4ee5\u4fbf\u4e0e `Display` \u7684\u8f93\u51fa\u8fdb\u884c\u6bd4\u8f83\u3002\n#[derive(Debug)]\nstruct MinMax(i64, i64);\n\n// \u5b9e\u73b0 `MinMax` \u7684 `Display`\u3002\nimpl fmt::Display for MinMax {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        // \u4f7f\u7528 `self.number` \u6765\u8868\u793a\u5404\u4e2a\u6570\u636e\u3002\n        write!(f, "({}, {})", self.0, self.1)\n    }\n}\n\n// \u4e3a\u4e86\u6bd4\u8f83\uff0c\u5b9a\u4e49\u4e00\u4e2a\u542b\u6709\u5177\u540d\u5b57\u6bb5\u7684\u7ed3\u6784\u4f53\u3002\n#[derive(Debug)]\nstruct Point2D {\n    x: f64,\n    y: f64,\n}\n\n// \u7c7b\u4f3c\u5730\u5bf9 `Point2D` \u5b9e\u73b0 `Display`\nimpl fmt::Display for Point2D {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        // \u81ea\u5b9a\u4e49\u683c\u5f0f\uff0c\u4f7f\u5f97\u4ec5\u663e\u793a `x` \u548c `y` \u7684\u503c\u3002\n        write!(f, "x: {}, y: {}", self.x, self.y)\n    }\n}\n\nfn main() {\n    let minmax = MinMax(0, 14);\n\n    println!("Compare structures:");\n    println!("Display: {}", minmax);\n    println!("Debug: {:?}", minmax);\n\n    let big_range =   MinMax(-300, 300);\n    let small_range = MinMax(-3, 3);\n\n    println!("The big range is {big} and the small is {small}",\n             small = small_range,\n             big = big_range);\n\n    let point = Point2D { x: 3.3, y: 7.2 };\n\n    println!("Compare points:");\n    println!("Display: {}", point);\n    println!("Debug: {:?}", point);\n\n    // \u62a5\u9519\u3002`Debug` \u548c `Display` \u90fd\u88ab\u5b9e\u73b0\u4e86\uff0c\u4f46 `{:b}` \u9700\u8981 `fmt::Binary`\n    // \u5f97\u5230\u5b9e\u73b0\u3002\u8fd9\u8bed\u53e5\u4e0d\u80fd\u8fd0\u884c\u3002\n    // println!("What does Point2D look like in binary: {:b}?", point);\n}\n```\n\n- \u5728 `write!` \u4e0a\u4f7f\u7528 `?`\n- `write!` \u548c `format!` \u7c7b\u4f3c\uff0c\u4f46\u5b83\u4f1a\u5c06\u683c\u5f0f\u5316\u540e\u7684\u5b57\u7b26\u4e32\u5199\u5165\u4e00\u4e2a\u7f13\u51b2\u533a\uff08\u5373\u7b2c\u4e00\u4e2a\u53c2\u6570f\uff09\u4e2d\u3002\n\n```rust\nuse std::fmt; // \u5bfc\u5165 `fmt` \u6a21\u5757\u3002\n\n// \u5b9a\u4e49\u4e00\u4e2a\u5305\u542b\u5355\u4e2a `Vec` \u7684\u7ed3\u6784\u4f53 `List`\u3002\nstruct List(Vec<i32>);\n\nimpl fmt::Display for List {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        // \u4f7f\u7528\u5143\u7ec4\u7684\u4e0b\u6807\u83b7\u53d6\u503c\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a `vec` \u7684\u5f15\u7528\u3002\n        let vec = &self.0;\n\n        write!(f, "[")?;\n\n        // \u4f7f\u7528 `v` \u5bf9 `vec` \u8fdb\u884c\u8fed\u4ee3\uff0c\u5e76\u7528 `count` \u8bb0\u5f55\u8fed\u4ee3\u6b21\u6570\u3002\n        for (count, v) in vec.iter().enumerate() {\n            // \u5bf9\u6bcf\u4e2a\u5143\u7d20\uff08\u7b2c\u4e00\u4e2a\u5143\u7d20\u9664\u5916\uff09\u52a0\u4e0a\u9017\u53f7\u3002\n            // \u4f7f\u7528 `?` \u6216 `try!` \u6765\u8fd4\u56de\u9519\u8bef\u3002\n            if count != 0 { write!(f, ", ")?; }\n            write!(f, "{}", v)?;\n        }\n\n        // \u52a0\u4e0a\u914d\u5bf9\u4e2d\u62ec\u53f7\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a fmt::Result \u503c\u3002\n        write!(f, "]")\n    }\n}\n\nfn main() {\n    let v = List(vec![1, 2, 3]);\n    println!("{}", v);\n}\n```\n'},oXu5:function(n,t,e){var r={"./notes/README.md":"GnuP","./notes/algorithm/README.md":"ss58","./notes/algorithm/data-struct/README.md":"+bUS","./notes/algorithm/data-struct/graph/README.md":"7JRX","./notes/algorithm/data-struct/graph/go.md":"epbq","./notes/algorithm/data-struct/linked-list/README.md":"MUUJ","./notes/algorithm/data-struct/linked-list/go.md":"b3jx","./notes/algorithm/data-struct/linked-list/rust.md":"Dsvz","./notes/algorithm/data-struct/queue/README.md":"z5Ge","./notes/algorithm/data-struct/queue/go.md":"FLI6","./notes/algorithm/data-struct/tree/README.md":"XmS6","./notes/algorithm/data-struct/tree/go.md":"enIB","./notes/algorithm/fibonacci/README.md":"AUMq","./notes/algorithm/fibonacci/c.md":"ophZ","./notes/algorithm/fibonacci/go.md":"NJ3u","./notes/algorithm/fibonacci/python.md":"Utcn","./notes/algorithm/leetcode/1. \u4e24\u6570\u4e4b\u548c/README.md":"eBDC","./notes/algorithm/leetcode/1. \u4e24\u6570\u4e4b\u548c/go.md":"pI3E","./notes/algorithm/leetcode/11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668/README.md":"klDU","./notes/algorithm/leetcode/11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668/go.md":"ltO+","./notes/algorithm/leetcode/19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9/README.md":"gytX","./notes/algorithm/leetcode/19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9/go.md":"4H7R","./notes/algorithm/leetcode/2. \u4e24\u6570\u76f8\u52a0/README.md":"HYoD","./notes/algorithm/leetcode/2. \u4e24\u6570\u76f8\u52a0/go.md":"9NAe","./notes/algorithm/leetcode/3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32/README.md":"nAmX","./notes/algorithm/leetcode/3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32/go.md":"MWkC","./notes/algorithm/leetcode/6. Z \u5b57\u5f62\u53d8\u6362/README.md":"4Drs","./notes/algorithm/leetcode/6. Z \u5b57\u5f62\u53d8\u6362/go.md":"ZKeL","./notes/algorithm/leetcode/9. \u56de\u6587\u6570/README.md":"KEsA","./notes/algorithm/leetcode/9. \u56de\u6587\u6570/go.md":"59ZX","./notes/algorithm/leetcode/README.md":"1lCs","./notes/algorithm/sort/README.md":"rMzJ","./notes/algorithm/sort/bubble-sort/README.md":"39Qe","./notes/algorithm/sort/bubble-sort/go.md":"bAeQ","./notes/algorithm/sort/bubble-sort/js.md":"hDC0","./notes/algorithm/sort/counting-sort/README.md":"64IH","./notes/algorithm/sort/counting-sort/go.md":"TIUH","./notes/algorithm/sort/counting-sort/js.md":"0/F1","./notes/algorithm/sort/insertion-sort/README.md":"B7Op","./notes/algorithm/sort/insertion-sort/go.md":"l+KN","./notes/algorithm/sort/insertion-sort/js.md":"eDYA","./notes/algorithm/sort/merge-sort/README.md":"HNGd","./notes/algorithm/sort/merge-sort/go.md":"LuZj","./notes/algorithm/sort/merge-sort/js.md":"UcBg","./notes/algorithm/sort/quick-sort/README.md":"HxRQ","./notes/algorithm/sort/quick-sort/go.md":"+PGJ","./notes/algorithm/sort/selection-sort/README.md":"+9KW","./notes/algorithm/sort/selection-sort/go.md":"C9J2","./notes/algorithm/sort/shell-sort/README.md":"LCqF","./notes/algorithm/sort/shell-sort/go.md":"6wBI","./notes/basic-concept/README.md":"32iC","./notes/basic-concept/assert/README.md":"nwiM","./notes/basic-concept/assert/c.md":"/6fo","./notes/basic-concept/builtins/README.md":"dICk","./notes/basic-concept/builtins/js.md":"VKyy","./notes/basic-concept/builtins/python.md":"ZwSQ","./notes/basic-concept/comment/README.md":"mfi5","./notes/basic-concept/comment/dart.md":"Jv9Q","./notes/basic-concept/comment/go.md":"rxfb","./notes/basic-concept/comment/python.md":"jQG5","./notes/basic-concept/comment/rust.md":"RSnM","./notes/basic-concept/compile/README.md":"r7FH","./notes/basic-concept/compile/c.md":"MMiR","./notes/basic-concept/compile/feature/README.md":"qRdY","./notes/basic-concept/compile/feature/c.md":"XKtc","./notes/basic-concept/compile/feature/go.md":"AdUV","./notes/basic-concept/compile/feature/rust.md":"UlLG","./notes/basic-concept/constant/README.md":"cEcc","./notes/basic-concept/constant/dart.md":"J4VT","./notes/basic-concept/constant/go.md":"u0fP","./notes/basic-concept/constant/python.md":"ffaC","./notes/basic-concept/dart.md":"t2Nz","./notes/basic-concept/error/README.md":"RXL5","./notes/basic-concept/error/go.md":"hV51","./notes/basic-concept/error/rust.md":"bd/4","./notes/basic-concept/expressions/README.md":"Wgee","./notes/basic-concept/expressions/dart.md":"GIXH","./notes/basic-concept/expressions/js.md":"+UIU","./notes/basic-concept/expressions/python.md":"EqfN","./notes/basic-concept/file/README.md":"JxzW","./notes/basic-concept/file/c.md":"uGim","./notes/basic-concept/for/README.md":"9mmv","./notes/basic-concept/for/break/README.md":"9BUu","./notes/basic-concept/for/break/dart.md":"jRLb","./notes/basic-concept/for/break/js.md":"qGQ6","./notes/basic-concept/for/break/python.md":"yyRM","./notes/basic-concept/for/dart.md":"pLx6","./notes/basic-concept/for/go.md":"bOyB","./notes/basic-concept/for/python.md":"JspC","./notes/basic-concept/for/range/README.md":"1Gc5","./notes/basic-concept/for/range/go.md":"j+Kk","./notes/basic-concept/for/range/python.md":"FjEW","./notes/basic-concept/for/rust.md":"QoEM","./notes/basic-concept/for/while/README.md":"eNwl","./notes/basic-concept/for/while/dart.md":"q+kX","./notes/basic-concept/format/README.md":"GEt/","./notes/basic-concept/format/dart.md":"W+2h","./notes/basic-concept/format/go.md":"ZLxG","./notes/basic-concept/format/rust.md":"oMOF","./notes/basic-concept/function/README.md":"EGuZ","./notes/basic-concept/function/c.md":"xNQ2","./notes/basic-concept/function/closures/README.md":"Ejz/","./notes/basic-concept/function/closures/go.md":"IEUD","./notes/basic-concept/function/closures/rust.md":"zuio","./notes/basic-concept/function/go.md":"5lXH","./notes/basic-concept/function/recursion/README.md":"IlkK","./notes/basic-concept/function/recursion/go.md":"7K4Q","./notes/basic-concept/function/rust.md":"wvSQ","./notes/basic-concept/function/variadic/README.md":"tlFP","./notes/basic-concept/function/variadic/go.md":"YLMf","./notes/basic-concept/go.md":"7zPo","./notes/basic-concept/goto/README.md":"L4Ey","./notes/basic-concept/goto/go.md":"i16+","./notes/basic-concept/helloword/README.md":"h43+","./notes/basic-concept/helloword/b.md":"5zx0","./notes/basic-concept/helloword/c.md":"WKOB","./notes/basic-concept/helloword/dart.md":"Lvc6","./notes/basic-concept/helloword/go.md":"5NWX","./notes/basic-concept/helloword/java.md":"8X6M","./notes/basic-concept/helloword/js.md":"dzsO","./notes/basic-concept/helloword/python.md":"UgH/","./notes/basic-concept/helloword/rust.md":"LRIu","./notes/basic-concept/ifelse/README.md":"V3NY","./notes/basic-concept/ifelse/dart.md":"xY5o","./notes/basic-concept/ifelse/go.md":"liU+","./notes/basic-concept/ifelse/python.md":"mPyA","./notes/basic-concept/install/README.md":"B0R4","./notes/basic-concept/install/dart.md":"2YFh","./notes/basic-concept/install/go.md":"zdk2","./notes/basic-concept/io/README.md":"XM5s","./notes/basic-concept/io/c.md":"UqYK","./notes/basic-concept/js.md":"HGeh","./notes/basic-concept/keyword/README.md":"G349","./notes/basic-concept/keyword/go.md":"Fddx","./notes/basic-concept/lib/README.md":"eFv7","./notes/basic-concept/lib/c.md":"gLGk","./notes/basic-concept/lib/dart.md":"2tDy","./notes/basic-concept/lib/go.md":"A7WP","./notes/basic-concept/lib/js.md":"cgG3","./notes/basic-concept/lib/lib-dir/README.md":"e7Ld","./notes/basic-concept/lib/lib-dir/dart.md":"1o4w","./notes/basic-concept/lib/lib-dir/go.md":"Lf3A","./notes/basic-concept/lib/lib-dir/js.md":"nFtE","./notes/basic-concept/lib/lib-dir/python.md":"MScn","./notes/basic-concept/lib/lib-dir/rust.md":"VbM5","./notes/basic-concept/lib/lib-tools/README.md":"0oSX","./notes/basic-concept/lib/lib-tools/dart.md":"8yWj","./notes/basic-concept/lib/lib-tools/python.md":"Fd77","./notes/basic-concept/lib/lib-tools/rust.md":"qZMv","./notes/basic-concept/lib/python.md":"KOwc","./notes/basic-concept/lib/rust.md":"jOMF","./notes/basic-concept/lifetime/README.md":"c6b6","./notes/basic-concept/lifetime/rust.md":"vA6k","./notes/basic-concept/macro/README.md":"gLqm","./notes/basic-concept/macro/c.md":"fd/u","./notes/basic-concept/macro/rust.md":"eQKy","./notes/basic-concept/memory/README.md":"dJlr","./notes/basic-concept/memory/c.md":"tIzy","./notes/basic-concept/others/README.md":"TYVT","./notes/basic-concept/others/go.md":"3kZi","./notes/basic-concept/others/python.md":"Pk6V","./notes/basic-concept/patterns/README.md":"0qFn","./notes/basic-concept/patterns/rust.md":"bbiv","./notes/basic-concept/print/README.md":"rgdb","./notes/basic-concept/print/c.md":"x8FZ","./notes/basic-concept/print/dart.md":"u9yX","./notes/basic-concept/print/go.md":"s3Jp","./notes/basic-concept/print/js.md":"KohC","./notes/basic-concept/print/python.md":"pB8K","./notes/basic-concept/rust.md":"ReFK","./notes/basic-concept/scope/README.md":"aLu/","./notes/basic-concept/scope/go.md":"zaG5","./notes/basic-concept/specifier/README.md":"ppM3","./notes/basic-concept/specifier/c.md":"dyvB","./notes/basic-concept/switch/README.md":"7Wet","./notes/basic-concept/switch/dart.md":"kLhq","./notes/basic-concept/switch/go.md":"Fm8s","./notes/basic-concept/switch/rust.md":"fX9S","./notes/basic-concept/time/README.md":"1TQ1","./notes/basic-concept/time/ticker/README.md":"7OSX","./notes/basic-concept/time/ticker/go.md":"yur8","./notes/basic-concept/time/timer/README.md":"6kmC","./notes/basic-concept/time/timer/go.md":"qaPL","./notes/basic-concept/unsafe/README.md":"LL/F","./notes/basic-concept/unsafe/rust.md":"wk8H","./notes/basic-concept/variate/README.md":"nWr7","./notes/basic-concept/variate/dart.md":"eYaZ","./notes/basic-concept/variate/go.md":"oikJ","./notes/basic-concept/variate/js.md":"eFZT","./notes/data-type/README.md":"BKY+","./notes/data-type/array/README.md":"yIpi","./notes/data-type/array/c.md":"Hwyt","./notes/data-type/array/dart.md":"ecQd","./notes/data-type/array/go.md":"16OV","./notes/data-type/array/iterators/README.md":"cNgN","./notes/data-type/array/iterators/rust.md":"OR97","./notes/data-type/array/js.md":"7mH5","./notes/data-type/array/list-search/README.md":"uMvC","./notes/data-type/array/list-search/dart.md":"m17L","./notes/data-type/array/list-search/js.md":"jtKn","./notes/data-type/array/list-search/python.md":"HjmQ","./notes/data-type/array/list-sort/README.md":"rdxK","./notes/data-type/array/list-sort/dart.md":"hGOb","./notes/data-type/array/list-sort/go.md":"8Lk6","./notes/data-type/array/list-sort/js.md":"Wdh2","./notes/data-type/array/list-sort/python.md":"Sb3P","./notes/data-type/array/python.md":"gqzS","./notes/data-type/array/rust.md":"VT0X","./notes/data-type/array/slice/README.md":"yNNv","./notes/data-type/array/slice/go.md":"BCvU","./notes/data-type/array/slice/js.md":"1F5x","./notes/data-type/array/slice/python.md":"QM/n","./notes/data-type/array/slice/rust.md":"3rjj","./notes/data-type/array/vector/README.md":"vYBC","./notes/data-type/array/vector/rust.md":"iw6o","./notes/data-type/c.md":"tkFb","./notes/data-type/chanel/README.md":"0yU2","./notes/data-type/chanel/chanel-select/README.md":"m9FK","./notes/data-type/chanel/chanel-select/go.md":"vNts","./notes/data-type/chanel/go.md":"38vV","./notes/data-type/convert/README.md":"MlVM","./notes/data-type/convert/c.md":"FiYD","./notes/data-type/convert/dart.md":"SSL/","./notes/data-type/convert/go.md":"rwXt","./notes/data-type/convert/js.md":"CodQ","./notes/data-type/convert/python.md":"5zGp","./notes/data-type/convert/rust.md":"3fv6","./notes/data-type/emum/README.md":"92Wm","./notes/data-type/emum/c.md":"DXXq","./notes/data-type/emum/rust.md":"G2G2","./notes/data-type/interface/README.md":"mjWa","./notes/data-type/interface/go.md":"YcHH","./notes/data-type/interface/rust.md":"5VGB","./notes/data-type/map/README.md":"26my","./notes/data-type/map/dart.md":"T4h4","./notes/data-type/map/go.md":"D6wV","./notes/data-type/map/js.md":"HUH4","./notes/data-type/map/python.md":"+ePo","./notes/data-type/map/rust.md":"euzM","./notes/data-type/number/README.md":"OP4y","./notes/data-type/number/max-min/README.md":"mSSx","./notes/data-type/number/max-min/dart.md":"ZBzs","./notes/data-type/number/max-min/js.md":"At/O","./notes/data-type/number/max-min/python.md":"X2d1","./notes/data-type/number/number-constant/README.md":"9tcs","./notes/data-type/number/number-constant/dart.md":"b+Si","./notes/data-type/number/number-constant/js.md":"N5R5","./notes/data-type/number/random/README.md":"F0P6","./notes/data-type/number/random/dart.md":"lSkh","./notes/data-type/number/random/js.md":"ZBqn","./notes/data-type/number/random/python.md":"GhO4","./notes/data-type/object/README.md":"6riT","./notes/data-type/object/dart.md":"DmHy","./notes/data-type/object/js.md":"SltL","./notes/data-type/object/symbol/README.md":"5Z1q","./notes/data-type/object/symbol/dart.md":"623g","./notes/data-type/object/symbol/js.md":"HE6a","./notes/data-type/pointer/README.md":"HL5q","./notes/data-type/pointer/c.md":"yXP0","./notes/data-type/pointer/go.md":"hL2c","./notes/data-type/pointer/rust.md":"5a5a","./notes/data-type/rust.md":"++UM","./notes/data-type/set/README.md":"nLpw","./notes/data-type/set/dart.md":"//f2","./notes/data-type/set/js.md":"Sm32","./notes/data-type/set/python.md":"i15U","./notes/data-type/string/README.md":"NUA5","./notes/data-type/string/c.md":"J4Yt","./notes/data-type/string/dart.md":"f/FD","./notes/data-type/string/go.md":"G2ic","./notes/data-type/string/js.md":"IEIS","./notes/data-type/string/python.md":"QN69","./notes/data-type/string/rust.md":"hXhD","./notes/data-type/string/string-concat/README.md":"VhA3","./notes/data-type/string/string-concat/go.md":"pZwl","./notes/data-type/string/string-format/README.md":"mUEX","./notes/data-type/string/string-format/go.md":"PT4Q","./notes/data-type/string/string-format/js.md":"9btF","./notes/data-type/string/string-format/python.md":"FmBC","./notes/data-type/string/string-replace/README.md":"Z8d1","./notes/data-type/string/string-replace/dart.md":"ylzQ","./notes/data-type/string/string-replace/js.md":"xqSF","./notes/data-type/string/string-replace/python.md":"lQaX","./notes/data-type/string/string-search/README.md":"aBk0","./notes/data-type/string/string-search/dart.md":"r0lz","./notes/data-type/string/string-search/go.md":"Q2He","./notes/data-type/string/string-search/js.md":"o4bW","./notes/data-type/string/string-search/python.md":"NnrR","./notes/data-type/string/string-sub/README.md":"ob2m","./notes/data-type/string/string-sub/dart.md":"p3pH","./notes/data-type/string/string-sub/js.md":"HPKH","./notes/data-type/string/string-sub/python.md":"RhlA","./notes/data-type/string/string-templates/README.md":"QKjh","./notes/data-type/string/string-templates/go.md":"yHj9","./notes/data-type/string/string-uppercase/README.md":"02wA","./notes/data-type/string/string-uppercase/js.md":"bGs6","./notes/data-type/string/string-uppercase/python.md":"WPBS","./notes/data-type/struct/README.md":"MZ2i","./notes/data-type/struct/c.md":"F2EI","./notes/data-type/struct/go.md":"FrZS","./notes/data-type/struct/rust.md":"DvT+","./notes/data-type/tuple/README.md":"Qp7g","./notes/data-type/tuple/python.md":"vmFf","./notes/data-type/tuple/rust.md":"/HH4","./notes/data-type/type-assert/README.md":"yFmA","./notes/data-type/type-assert/check-if-the-same-object/README.md":"sSxO","./notes/data-type/type-assert/check-if-the-same-object/dart.md":"fsqh","./notes/data-type/type-assert/check-if-the-same-object/js.md":"/cVj","./notes/data-type/type-assert/dart.md":"OCeU","./notes/data-type/type-assert/deep-equal/README.md":"ZySJ","./notes/data-type/type-assert/deep-equal/go.md":"W/TY","./notes/data-type/type-assert/go.md":"ox1T","./notes/data-type/type-assert/js.md":"tJfb","./notes/data-type/type-assert/python.md":"F0kP","./notes/data-type/type-custom/README.md":"xHTt","./notes/data-type/type-custom/c.md":"/Ksx","./notes/data-type/type-custom/go.md":"IvGE","./notes/data-type/unicode/README.md":"gptX","./notes/data-type/unicode/c.md":"lMAp","./notes/images/decimal-to-base64-table.png":"10tz","./notes/images/import-lib-rules-fa353f6fddc6e69fe19da41bffff4f6ec7b561eeead24840bacce032759b8473.png":"emeC","./notes/images/init.png":"rUoa","./notes/images/language.png":"SNMS","./notes/images/prototype.png":"96IO","./notes/images/shelf-02e5fd43b660fcef7dbe6a883c40159e0379c8ee2088288ca60ed7dc8781bafd.png":"Dc9z","./notes/images/simple-lib2-81ebdc20fdb53d3abbc4364956141eb0f6f8f275d1636064fc3e1db959b93c1a.png":"2akj","./notes/images/slice.png":"SxDJ","./notes/special/README.md":"9M22","./notes/special/cli/README.md":"uY+8","./notes/special/cli/c.md":"ftwC","./notes/special/concurrent/README.md":"zJXW","./notes/special/concurrent/atomic-counters/README.md":"P/gy","./notes/special/concurrent/atomic-counters/go.md":"Q1U3","./notes/special/concurrent/channel/README.md":"c6q0","./notes/special/concurrent/channel/rust.md":"836I","./notes/special/concurrent/concurrency-pattern/README.md":"wiX5","./notes/special/concurrent/concurrency-pattern/concurrent-exit/README.md":"wNuG","./notes/special/concurrent/concurrency-pattern/concurrent-exit/go.md":"Uq7d","./notes/special/concurrent/concurrency-pattern/prime-filter/README.md":"ORbA","./notes/special/concurrent/concurrency-pattern/prime-filter/go.md":"HFvC","./notes/special/concurrent/concurrency-pattern/pubsub/README.md":"0nfv","./notes/special/concurrent/concurrency-pattern/pubsub/go.md":"DBJF","./notes/special/concurrent/mutex/README.md":"qvsS","./notes/special/concurrent/mutex/go.md":"d0Ti","./notes/special/concurrent/mutex/rust.md":"3O+U","./notes/special/concurrent/rust.md":"+bbK","./notes/special/concurrent/thread/README.md":"SYVz","./notes/special/concurrent/thread/rust.md":"Yaas","./notes/special/concurrent/waitgroups/README.md":"zYe6","./notes/special/concurrent/waitgroups/go.md":"D7e0","./notes/special/concurrent/worker-pools/README.md":"tR3r","./notes/special/concurrent/worker-pools/go.md":"UuzR","./notes/special/ffi/README.md":"PfvS","./notes/special/ffi/go.md":"mMP3","./notes/special/functional/README.md":"QHtX","./notes/special/functional/decoration/README.md":"KYOG","./notes/special/functional/decoration/go.md":"sJcq","./notes/special/functional/options/README.md":"+9hj","./notes/special/functional/options/go.md":"Da/o","./notes/special/functional/pipeline/README.md":"8hHH","./notes/special/functional/pipeline/go.md":"ZhtH","./notes/special/functional/visitor/README.md":"ePLb","./notes/special/functional/visitor/go.md":"nM2+","./notes/special/generics/README.md":"XYPJ","./notes/special/generics/go.md":"rL9r","./notes/special/generics/rust.md":"6O9g","./notes/special/inversion-of-control/README.md":"72+s","./notes/special/inversion-of-control/go.md":"5K+Z","./notes/special/oop/README.md":"sfWR","./notes/special/oop/rust.md":"BgzH","./notes/special/template/README.md":"D8G6","./notes/special/template/go.md":"Cz/D","./notes/special/test/README.md":"2X9E","./notes/special/test/go.md":"lw7P","./notes/special/test/rust.md":"K7rx","./notes/special/wasm/README.md":"Xpkq","./notes/special/wasm/go.md":"oGPs","./notes/special/wasm/rust.md":"Ci1R"};function i(n){var t=a(n);return e(t)}function a(n){if(!e.o(r,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return r[n]}i.keys=function(){return Object.keys(r)},i.resolve=a,n.exports=i,i.id="oXu5"},ob2m:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5b57\u7b26\u4e32\u5207\u5272\u622a\u53d6\n---\n"},oikJ:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\nimport "fmt"\nvar c, python, java bool\nfunc main() {\n  var i int\n  fmt.Println(i, c, python, java)\n}\n\n\n// \u53d8\u91cf\u58f0\u660e\u53ef\u4ee5\u5305\u542b\u521d\u59cb\u503c\uff0c\u6bcf\u4e2a\u53d8\u91cf\u5bf9\u5e94\u4e00\u4e2a\u3002\n// \u5982\u679c\u521d\u59cb\u5316\u503c\u5df2\u5b58\u5728\uff0c\u5219\u53ef\u4ee5\u7701\u7565\u7c7b\u578b\uff1b\u53d8\u91cf\u4f1a\u4ece\u521d\u59cb\u503c\u4e2d\u83b7\u5f97\u7c7b\u578b\u3002\npackage main\nimport "fmt"\nvar i, j int = 1,0\nfunc main() {\n  var c, python, java = true, false, "no!" // \u81ea\u52a8\u83b7\u5f97\u7c7b\u578b\n  fmt.Println(i, j, c, python, java) // 1 0 true false no!\n}\n\n\n// \u5728\u51fd\u6570\u4e2d\uff0c\u7b80\u6d01\u8d4b\u503c\u8bed\u53e5 := \u53ef\u5728\u7c7b\u578b\u660e\u786e\u7684\u5730\u65b9\u4ee3\u66ff var \u58f0\u660e\u3002\n// \u51fd\u6570\u5916\u7684\u6bcf\u4e2a\u8bed\u53e5\u90fd\u5fc5\u987b\u4ee5\u5173\u952e\u5b57\u5f00\u59cb\uff08var, func \u7b49\u7b49\uff09\uff0c\n// \u56e0\u6b64 := \u7ed3\u6784\u4e0d\u80fd\u5728\u51fd\u6570\u5916\u4f7f\u7528\u3002\npackage main\nimport "fmt"\nfunc main() {\n  var i, j int = 1, 2\n  k := 3\n  c, python, java := true, false, "no!"\n  fmt.Println(i, j, k, c, python, java) // 1 2 3 true false no!\n}\n\n// \u7b80\u77ed\u53d8\u91cf\u58f0\u660e\u8bed\u53e5\u4e2d\u5fc5\u987b\u81f3\u5c11\u8981\u58f0\u660e\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\n// \u4e0b\u9762\u7684\u4ee3\u7801\u5c06\u4e0d\u80fd\u7f16\u8bd1\u901a\u8fc7\n// \u89e3\u51b3\u7684\u65b9\u6cd5\u662f\u7b2c\u4e8c\u4e2a\u7b80\u77ed\u53d8\u91cf\u58f0\u660e\u8bed\u53e5\u6539\u7528\u666e\u901a\u7684\u591a\u91cd\u8d4b\u503c\u8bed\u53e5\u3002\nf, err := os.Open(infile)\n// ...\nf, err := os.Create(outfile) // compile error: no new variables\n\n\n// \u53e6\u4e00\u4e2a\u521b\u5efa\u53d8\u91cf\u7684\u65b9\u6cd5\u662f\u8c03\u7528\u7528\u5185\u5efa\u7684new\u51fd\u6570\u3002\n// \u8868\u8fbe\u5f0fnew(T)\u5c06\u521b\u5efa\u4e00\u4e2aT\u7c7b\u578b\u7684\u533f\u540d\u53d8\u91cf\uff0c\u521d\u59cb\u5316\u4e3aT\u7c7b\u578b\u7684\u96f6\u503c\uff0c\n// \u7136\u540e\u8fd4\u56de\u53d8\u91cf\u5730\u5740\uff0c\u8fd4\u56de\u7684\u6307\u9488\u7c7b\u578b\u4e3a*T\np := new(int)   // p, *int \u7c7b\u578b, \u6307\u5411\u533f\u540d\u7684 int \u53d8\u91cf\nfmt.Println(*p) // "0"\n*p = 2          // \u8bbe\u7f6e int \u533f\u540d\u53d8\u91cf\u7684\u503c\u4e3a 2\nfmt.Println(*p) // "2"\n\np := new(int)\nq := new(int)\nfmt.Println(p == q) // "false"\n\n// \u4e0b\u9762\u7684\u4e24\u4e2anewInt\u51fd\u6570\u6709\u7740\u76f8\u540c\u7684\u884c\u4e3a\uff1a\nfunc newInt() *int {\n  return new(int)\n}\nfunc newInt() *int {\n  var dummy int\n  return &dummy\n}\n\n\nf, err = os.Open("foo.txt") // function call returns two values\nv, ok = m[key]             // map lookup\nv, ok = x.(T)              // type assertion\nv, ok = <-ch               // channel receive\n_, err = io.Copy(dst, src) // \u4e22\u5f03\u5b57\u8282\u6570\n_, ok = x.(T)              // \u53ea\u68c0\u6d4b\u7c7b\u578b\uff0c\u5ffd\u7565\u5177\u4f53\u503c\n```\n\n## \u9ed8\u8ba4\u503c\n\n\u6ca1\u6709\u660e\u786e\u521d\u59cb\u503c\u7684\u53d8\u91cf\u58f0\u660e\u4f1a\u88ab\u8d4b\u4e88\u5b83\u4eec\u7684 \u96f6\u503c:\n\n- \u6570\u503c\u7c7b\u578b\u4e3a 0\uff0c\n- \u5e03\u5c14\u7c7b\u578b\u4e3a false\uff0c\n- \u5b57\u7b26\u4e32\u4e3a ""\uff08\u7a7a\u5b57\u7b26\u4e32\uff09\u3002\n- \u6307\u9488\u96f6\u503c\u4e3a nil\n- \u5207\u7247\u7684\u96f6\u503c\u662f nil\n\n```go\npackage main\nimport "fmt"\nfunc main() {\n  var i int\n  var f float64\n  var b bool\n  var s string\n  fmt.Printf("%v %v %v %q\\n", i, f, b, s) // 0 0 false ""\n}\n\nint     0\nint8    0\nint32   0\nint64   0\nuint    0x0\nrune    0 //rune\u7684\u5b9e\u9645\u7c7b\u578b\u662f int32\nbyte    0x0 // byte\u7684\u5b9e\u9645\u7c7b\u578b\u662f uint8\nfloat32 0 //\u957f\u5ea6\u4e3a 4 byte\nfloat64 0 //\u957f\u5ea6\u4e3a 8 byte\nbool    false\nstring  ""\n```\n'},ophZ:function(n,t,e){"use strict";e.r(t),t.default="```c++\nunsigned long Fibonacci(unsigned n) {\n  if (n > 2)\n    return Fibonacci(n - 1) + Fibonacci(n - 2);\n  else\n    return 1;\n}\n```\n"},ox1T:function(n,t,e){"use strict";e.r(t),t.default='```go\n// reflect.Type \u63a5\u53e3\u662f\u6ee1\u8db3 fmt.Stringer \u63a5\u53e3\u7684\nt := reflect.TypeOf(3)  // a reflect.Type\nfmt.Println(t.String()) // "int"\nfmt.Println(t)          // "int"\nfmt.Printf("%T\\n", 3)   // "int"\n\n// \u8868\u8fbe\u63a5\u53e3\u7c7b\u578b\u7684 reflect.Type\nvar w io.Writer = os.Stdout\nfmt.Println(reflect.TypeOf(w)) // "*os.File"\n\n\n// fmt.Printf \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7f29\u5199 %T \u53c2\u6570\uff0c\n// \u5185\u90e8\u4f7f\u7528 reflect.TypeOf \u6765\u8f93\u51fa\n// \u53ef\u4ee5\u901a\u8fc7%T\u53c2\u6570\u6253\u5370\u7c7b\u578b\u4fe1\u606f\nconst noDelay time.Duration = 0\nconst timeout = 5 * time.Minute\nfmt.Printf("%T %[1]v\\n", noDelay)     // "time.Duration 0"\nfmt.Printf("%T %[1]v\\n", timeout)     // "time.Duration 5m0s"\nfmt.Printf("%T %[1]v\\n", time.Minute) // "time.Duration 1m0s"\n\nfmt.Printf("%T\\n", 0)      // "int"\nfmt.Printf("%T\\n", 0.0)    // "float64"\nfmt.Printf("%T\\n", 0i)     // "complex128"\nfmt.Printf("%T\\n", \'\\000\') // "int32" (rune)\n\n\nvar t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\n  default:\n    fmt.Printf("unexpected type %T", t)       // %T \u8f93\u51fa t \u662f\u4ec0\u4e48\u7c7b\u578b\n  case bool:\n    fmt.Printf("boolean %t\\n", t)             // t \u662f bool \u7c7b\u578b\n  case int:\n    fmt.Printf("integer %d\\n", t)             // t \u662f int \u7c7b\u578b\n  case *bool:\n    fmt.Printf("pointer to boolean %t\\n", *t) // t \u662f *bool \u7c7b\u578b\n  case *int:\n    fmt.Printf("pointer to integer %d\\n", *t) // t \u662f *int \u7c7b\u578b\n}\n```\n\n```go\npackage main\nimport (\n  "fmt"\n  "strconv"\n)\ntype Element interface{}\ntype List [] Element\ntype Person struct {\n    name string\n    age int\n}\n//\u5b9a\u4e49\u4e86String\u65b9\u6cd5\uff0c\u5b9e\u73b0\u4e86fmt.Stringer\nfunc (p Person) String() string {\n  return "(name: " + p.name + " - age: "+strconv.Itoa(p.age)+ " years)"\n}\nfunc main() {\n  list := make(List, 3)\n  list[0] = 1 // an int\n  list[1] = "Hello" // a string\n  list[2] = Person{"Dennis", 70}\n  // for index, element := range list {\n  //   if value, ok := element.(int); ok {\n  //     fmt.Printf("list[%d] is an int and its value is %d\\n", index, value)\n  //   } else if value, ok := element.(string); ok {\n  //     fmt.Printf("list[%d] is a string and its value is %s\\n", index, value)\n  //   } else if value, ok := element.(Person); ok {\n  //     fmt.Printf("list[%d] is a Person and its value is %s\\n", index, value)\n  //   } else {\n  //     fmt.Printf("list[%d] is of a different type\\n", index)\n  //   }\n  // }\n  for index, element := range list{\n    switch value := element.(type) {\n      case int:\n        fmt.Printf("list[%d] is an int and its value is %d\\n", index, value)\n      case string:\n        fmt.Printf("list[%d] is a string and its value is %s\\n", index, value)\n      case Person:\n        fmt.Printf("list[%d] is a Person and its value is %s\\n", index, value)\n      default:\n        fmt.Println("list[%d] is of a different type", index)\n    }\n  }\n}\n```\n\n\u4f7f\u7528 `reflect.Type` \u6765\u6253\u5370\u4efb\u610f\u503c\u7684\u7c7b\u578b\u548c\u679a\u4e3e\u5b83\u7684\u65b9\u6cd5\uff1a\n\n```go\n// Print prints the method set of the value x.\nfunc Print(x interface{}) {\n    v := reflect.ValueOf(x)\n    t := v.Type()\n    fmt.Printf("type %s\\n", t)\n\n    for i := 0; i < v.NumMethod(); i++ {\n        methType := v.Method(i).Type()\n        fmt.Printf("func (%s) %s%s\\n", t, t.Method(i).Name,\n            strings.TrimPrefix(methType.String(), "func"))\n    }\n}\n```\n\n## \u7c7b\u578b\u65ad\u8a00\n\n\u7c7b\u578b\u65ad\u8a00\u4e66\u5199\u5f62\u5f0f\u5982\u4e0b\uff1a\n\n```go\nx.(T)\n```\n\n`x` \u5fc5\u987b\u662f\u63a5\u53e3\uff08\u7c7b\u578b\u7684\uff09\u503c\uff0c\u6ce8\u610f\u4e0d\u662f\u63a5\u53e3\u540d\u3002\n\n\u6362\u4e00\u4e2a\u89d2\u5ea6\u8bf4\uff0c`x`\u5fc5\u987b\u662f\u88ab\u63a5\u53e3\u7c7b\u578b\u9690\u5f0f\u8f6c\u6362\u8fc7\uff0c\u5176\u539f\u7c7b\u578b\uff08\u5e95\u5c42\u7c7b\u578b\uff09\u53ef\u80fd\u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u4e5f\u53ef\u80fd\u4e0d\u662f\u63a5\u53e3\u7c7b\u578b\uff0c\u751a\u81f3\u4e5f\u53ef\u80fd\u662f`nil`\u3002\n\u5f53\u7136\uff0c\u524d\u63d0\u662f\u539f\u7c7b\u578b\uff08\u5e95\u5c42\u7c7b\u578b\uff09\u5b9e\u73b0\u4e86\u8be5\u63a5\u53e3\uff0c\u624d\u80fd\u88ab\u8d4b\u503c\uff08\u8f6c\u6362\uff09\u3002\n\n```go\nvar x = 1 // \u8fd9\u91cc\u7684x\u4e0d\u662f\u63a5\u53e3\u7c7b\u578b\u7684\u503c\uff0c\u4e0d\u80fd\u505a\u7c7b\u578b\u65ad\u8a00\u64cd\u4f5c\ntype I interface{} // \u8fd9\u91cc\u7684I\u662f\u63a5\u53e3\u540d\uff0c\u56e0\u6b64I\u4e0d\u80fd\u505a\u7c7b\u578b\u65ad\u8a00\u64cd\u4f5c\nvar x interface{} // \u8fd9\u91cc\u7684x\u662f\u503c\u4e3anil\u7684\u63a5\u53e3\u503c\uff0c\u53ef\u4ee5\u505a\u7c7b\u578b\u65ad\u8a00\uff0c\u4f46\u662f\u4e00\u5b9a\u4f1a\u65ad\u8a00\u5931\u8d25\nvar x interface{} = "hello" // \u8fd9\u91cc\u7684x\u53ef\u4ee5\u505a\u7c7b\u578b\u65ad\u8a00\u64cd\u4f5c\n```\n\n\u5982\u679c\u5bf9 x\uff08\u63a5\u53e3\u7c7b\u578b\uff09\u8fdb\u884c\u4e86\u975e`nil`\u8d4b\u503c\u64cd\u4f5c\uff08\u9690\u5f0f\u8f6c\u6362\uff09\uff0c\u90a3\u8fd9\u4e2a\u63a5\u53e3\u503c\u5c31\u83b7\u5f97\u4e86`\u52a8\u6001\u7c7b\u578b`\uff08\u5e95\u5c42\u7c7b\u578b\uff09\u548c`\u52a8\u6001\u503c`\uff08\u5e95\u5c42\u503c\uff09\u3002\n\n\u4f46\u4e0d\u7ba1\u8d4b\u503c\uff08\u8f6c\u6362\uff09\u591a\u5c11\u6b21\uff0c\u5728\u67d0\u4e2a\u65f6\u523b\uff0c\u5b83\u7684`\u52a8\u6001\u7c7b\u578b`\u548c`\u52a8\u6001\u503c`\u90fd\u662f\u552f\u4e00\uff08\u6700\u540e\u90a3\u6b21\u8d4b\u503c\uff09\u7684\u3002\n\n\u5bf9`x`\u505a\u7c7b\u578b\u65ad\u8a00\uff0c\u4e5f\u4f1a\u6709\u8d4b\u503c\uff08\u9690\u5f0f\u8f6c\u6362\uff09\u6548\u679c\u3002\n\n```go\nvar x interface{} // \u76f8\u5f53\u4e8e\u7ed9x\u63a5\u53e3\u503c\u8d4b\u521d\u59cb\u503cnil\uff0c\u6b64\u65f6\u6ca1\u6709\u52a8\u6001\u7c7b\u578b\u548c\u52a8\u6001\u503c\n\nvar x interface{} = "hello" // x\u7684\u52a8\u6001\u7c7b\u578b\u4e3astring\uff0c\u52a8\u6001\u503c\u4e3ahello\uff0c\u76f8\u5f53\u4e8e\u4e0b\u9762\u4e09\u884c\u4ee3\u7801\u7684\u7b80\u5199\n\ntype I interface{}\nvar s string = "hello"\nvar x I = s // \u8fd9\u91cc\u6709\u4e2a\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362\uff0c\u76f8\u5f53\u4e8e var x = I(s)\n```\n\n`T` \u5fc5\u987b\u662f\u6570\u636e\u7c7b\u578b\u540d\uff08\u56e0\u4e3a\u63a5\u53e3\u4e5f\u662f\u4e00\u79cd\u6570\u636e\u7c7b\u578b\uff0c\u56e0\u6b64\u5305\u542b\u63a5\u53e3\u540d\uff09\uff0c\u6ce8\u610f\u4e0d\u80fd\u662f\u4e00\u4e2a\u5177\u4f53\u7684\u503c\u3002\n\n```go\nvar i interface{}\nx.(i) // \u8fd9\u91cc\u7684i\u975e\u6cd5\n\n// \u4ee5\u4e0b\u90fd\u53ef\u4ee5\nx.(int)\nx.(string)\ntype I interface{}\nx.(I)\n```\n\n\u5173\u4e8e\u7c7b\u578b\u65ad\u8a00\u7684\u771f\u5047\u5224\u65ad\n\n- \u5f53 T \u662f\u666e\u901a\u6570\u636e\u7c7b\u578b\u540d\uff08\u975e\u63a5\u53e3\u540d\uff09\uff0c\u5224\u65ad x \u7684\u52a8\u6001\u7c7b\u578b\u662f\u5426\u7b49\u4e8e T\n- \u5f53 T \u662f\u63a5\u53e3\u540d\uff0c\u5224\u65ad x \u7684\u52a8\u6001\u7c7b\u578b\u662f\u5426\u5b9e\u73b0\u4e86 T \u63a5\u53e3\uff0c\u5373\u5224\u65ad x \u7684\u52a8\u6001\u7c7b\u578b\u662f\u5426\u5b9a\u4e49\u4e86 T \u63a5\u53e3\u89c4\u5b9a\u7684\u65b9\u6cd5\n- \u540c\u65f6\uff0c\u7531\u4ee5\u4e0a\u53ef\u4ee5\u63a8\u65ad\uff0c\u5f53 x \u4e3a nil\uff0c\u65ad\u8a00\u4e00\u5b9a\u5931\u8d25\u3002\u56e0\u4e3a nil \u4e0d\u7b49\u4e8e\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u4e5f\u6ca1\u6709\u5b9e\u73b0\u4efb\u4f55\u63a5\u53e3\n\n```go\npackage main\nimport "fmt"\n\ntype I interface {\n\tm(string)\n}\ntype II interface {\n\tI\n\tn(string)\n}\ntype III interface {\n\tII\n\to()\n}\n\ntype T string\n\nfunc (t T) m(s string) {\n\tfmt.Println("m", s)\n\t// fmt.Printf("%T\\n", t)\n}\n\nfunc (t T) n(s string) {\n\tfmt.Println("n", s)\n\t// fmt.Printf("%T\\n", t)\n}\n\nfunc main() {\n\tvar x I = T("hello")\n\n  \tif x, ok := x.(T); ok { // \u8fd9\u91cc\u5224\u65adx\u7684\u52a8\u6001\u7c7b\u578b\u662f\u5426\u4e3aT\n\t\t// \u6b64\u65f6x\u4e3a\u4e00\u4e2a\u666e\u901aT\u7c7b\u578b\u7684\u503c\uff0c\u4e0d\u662f\u63a5\u53e3\u503c\n\t\tx.m("1")\n\t\tx.n("2")\n\t}\n\n\tif x, ok := x.(I); ok { // \u8fd9\u91cc\u5224\u65adx\u7684\u52a8\u6001\u7c7b\u578b(T)\u662f\u5426\u5b9e\u73b0\u4e86I\u63a5\u53e3\n\t\t// \u6b64\u65f6x\u4e3aI\u7c7b\u578b\u7684\u63a5\u53e3\u503c\uff0c\u76f8\u5f53\u4e8e\u4e00\u4e2a\u62f7\u8d1d\n\t\tx.m("3")\n\t\t// x.n("4") // I\u63a5\u53e3\u6ca1\u6709n\u65b9\u6cd5\n\t}\n\n\tif x, ok := x.(II); ok { // \u8fd9\u91cc\u5224\u65adx\u7684\u52a8\u6001\u7c7b\u578b(T)\u662f\u5426\u5b9e\u73b0\u4e86II\u63a5\u53e3\n\t\t// \u6b64\u65f6x\u8f6c\u6362\u4e3aII\u7c7b\u578b\u7684\u63a5\u53e3\u503c\n\t\tx.m("5")\n\t\tx.n("6")\n\t}\n\n  \tif x, ok := x.(III); ok { // \u8fd9\u91cc\u5224\u65adx\u7684\u52a8\u6001\u7c7b\u578b(T)\u662f\u5426\u5b9e\u73b0\u4e86III\u63a5\u53e3\n\t\tx.m("7")\n\t\tx.n("8")\n\t}\n\n\tvar xx II = T("hello")\n\n\tif x, ok := xx.(T); ok {\n\t\t// \u6b64\u65f6x\u4e3a\u4e00\u4e2aT\u7c7b\u578b\u7684\u666e\u901a\u503c\uff0c\n\t\tx.m("9")\n\t\tx.n("a")\n\t}\n\n\tif x, ok := xx.(I); ok {\n\t\t// x\u4e3a\u4e00\u4e2aI\u63a5\u53e3\u7c7b\u578b\u7684\u503c\uff0c\u76f8\u5f53\u4e8exx\u505a\u4e86I\u7c7b\u578b\u8f6c\u6362\n\t\tx.m("b")\n\t\t// x.n("c") // I\u63a5\u53e3\u6ca1\u6709n\u65b9\u6cd5\n\t}\n\n\tif x, ok := xx.(II); ok {\n\t\t// x\u4e3a\u4e00\u4e2aII\u7c7b\u578b\u7684\u503c\uff0c\uff0c\u76f8\u5f53\u4e8exx\u7684\u4e00\u4e2a\u62f7\u8d1d\n\t\tx.m("d")\n\t\tx.n("e")\n\t}\n}\n// m 1\n// n 2\n// m 3\n// m 5\n// n 6\n// m 9\n// n a\n// m b\n// m d\n// n e\n```\n\n\u5173\u4e8e\u7c7b\u578b\u65ad\u8a00\u7684\u503c\uff08\u5b9e\u8d28\uff1a\u5bf9`x\u52a8\u6001\u503c`\u505a`T\u7c7b\u578b`\u8f6c\u6362\u540e\u7684\u503c\uff09\n\n- \u53ea\u6709\u4e00\u4e2a\u53d8\u91cf\u63a5\u6536\u65ad\u8a00\u7ed3\u679c\u65f6\n  - \u5f53\u65ad\u8a00\u5931\u8d25\u65f6\uff0c\u4f1a\u629b\u51fa panic\n  - \u5f53\u65ad\u8a00\u6210\u529f\u65f6\uff0c\u8fd4\u56de\u4e00\u4e2a T \u7c7b\u578b\u7684\u503c\n    - \u5f53 T \u4e3a\u666e\u901a\u7c7b\u578b\u540d\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a T \u7c7b\u578b\u7684\u666e\u901a\u503c\n    - \u5f53 T \u4e3a\u63a5\u53e3\u540d\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a T \u7c7b\u578b\u7684\u63a5\u53e3\u503c\u3002\n- \u6709\u4e24\u4e2a\u53d8\u91cf\u63a5\u6536\u65ad\u8a00\u7ed3\u679c\u65f6\uff0c\u4e0d\u7ba1\u6210\u529f\u5931\u8d25\u90fd\u4e0d\u4f1a\u629b\u51fa panic\n  - \u5f53\u65ad\u8a00\u5931\u8d25\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4e3a T \u7c7b\u578b\u7684\u96f6\u503c\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u4e3a false\n  - \u5f53\u65ad\u8a00\u6210\u529f\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53d8\u91cf\u4e3a T \u7c7b\u578b\u7684\u8f6c\u6362\u503c\uff08\u540c\u4e00\u4e2a\u53d8\u91cf\u6210\u529f\u65f6\u7684\u8fd4\u56de\u503c\uff09\uff0c\u7b2c\u4e8c\u4e2a\u53d8\u91cf\u4e3a true\n\n```go\npackage main\n\nimport "fmt"\n\ntype I interface {\n\tM()\n}\n\ntype T string\n\nfunc (t T) M() {\n\tfmt.Println(t)\n}\n\nfunc main() {\n\tvar i I = T("hello")\n\tif x, ok := i.(I); ok {\n\t\t// \u6b64\u65f6\uff0cx\u4e3a\u4e00\u4e2aI\u63a5\u53e3\u503c\uff0c\u53ef\u4ee5\u7ee7\u7eed\u505a\u7c7b\u578b\u65ad\u8a00\n\t\tx.M()\n\t\tif y, ok := x.(T); ok {\n\t\t\t// \u6b64\u65f6\uff0cy\u4e3a\u4e00\u4e2aT\u7c7b\u578b\u503c\uff0c\u4e0d\u80fd\u518d\u505a\u7c7b\u578b\u65ad\u8a00\n\t\t\ty.M()\n\t\t}\n\t}\n}\n```\n\n\u7279\u4f8b\uff1a\u5f53 T \u4e3a\u4fdd\u7559\u5173\u952e\u5b57`type`\u65f6\uff0c\u53ef\u4ee5\u7528\u5728`switch`\u8bed\u53e5\u4e2d\uff0c\u7528\u6765\u505a\u7c7b\u578b\u5224\u65ad\n\n```go\nswitch i := x.(type) { // \u8fd9\u91cc\u7684\u8d4b\u503c\u8bed\u53e5\u6709\u70b9\u5947\u602a\uff0c\u8bed\u53e5\u672c\u8eab\u8fd8\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a\u7ed3\u679c\u503c\uff0c\u8fd9\u4e2a\u7ed3\u679c\u503c\u662fx\u7684\u52a8\u6001\u7c7b\u578b\ncase nil:\n\tprintString("x is nil")                // type of i is type of x (interface{})\ncase int:\n\tprintInt(i)                            // type of i is int\ncase float64:\n\tprintFloat64(i)                        // type of i is float64\ncase func(int) float64:\n\tprintFunction(i)                       // type of i is func(int) float64\ncase bool, string:\n\tprintString("type is bool or string")  // type of i is type of x (interface{})\ndefault:\n\tprintString("don\'t know the type")     // type of i is type of x (interface{})\n}\n```\n'},p3pH:function(n,t,e){"use strict";e.r(t),t.default="```dart\n// Grab a substring.\nassert('Never odd or even'.substring(6, 9) == 'odd');\n\n// Split a string using a string pattern.\nvar parts = 'structured web apps'.split(' ');\nassert(parts.length == 3);\nassert(parts[0] == 'structured');\n\n// Get a UTF-16 code unit (as a string) by index.\nassert('Never odd or even'[0] == 'N');\n\n// Use split() with an empty string parameter to get\n// a list of all characters (as Strings); good for\n// iterating.\nfor (var char in 'hello'.split('')) {\n  print(char);\n}\n\n// Get all the UTF-16 code units in the string.\nvar codeUnitList = 'Never odd or even'.codeUnits.toList();\nassert(codeUnitList[0] == 78);\n```\n\n## \u88c1\u526a\u548c\u5224\u65ad\u7a7a\u5b57\u7b26\u4e32\n\n```dart\n// Trim a string.\nassert('  hello  '.trim() == 'hello');\n\n// Check whether a string is empty.\nassert(''.isEmpty);\n\n// Strings with only white space are not empty.\nassert(!'  '.isEmpty);\n```\n"},pB8K:function(n,t,e){"use strict";e.r(t),t.default="```python\nprint('The number is {}.'.format(aNumber)) #\u6253\u5370\n```\n"},pI3E:function(n,t,e){"use strict";e.r(t),t.default="```go\nfunc twoSum(nums []int, target int) []int {\n    m := make(map[int]int)\n    for i,n := range nums {\n        if j,ok := m[target-n]; ok {\n            return []int{j,i}\n        }\n        m[n] = i\n    }\n    return []int{}\n}\n```\n"},pLx6:function(n,t,e){"use strict";e.r(t),t.default="```dart\nvar message = new StringBuffer(\"Dart is fun\");\nfor (var i = 0; i < 5; i++) {\n  message.write('!');\n}\n\n// art for \u5faa\u73af\u4e2d\u7684\u95ed\u5305\u4f1a\u6355\u83b7\u5faa\u73af\u7684 index \u7d22\u5f15\u503c\nvar callbacks = [];\nfor (var i = 0; i < 2; i++) {\n  callbacks.add(() => print(i));\n}\ncallbacks.forEach((c) => c());\n\n// \u5982\u679c\u4e0d\u9700\u8981\u5f53\u524d\u904d\u5386\u7684\u7d22\u5f15\ncandidates.forEach((candidate) => candidate.interview());\n\n// List \u548c Set \u7b49\u5b9e\u73b0\u4e86 Iterable \u63a5\u53e3\u7684\u7c7b\u8fd8\u652f\u6301 for-in \u5f62\u5f0f\u7684 \u904d\u5386\uff1a\nvar collection = [0, 1, 2];\nfor (var x in collection) {\n  print(x);\n}\n```\n"},pZwl:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n\t"bytes"\n\t"fmt"\n\t"math/rand"\n\t"strings"\n\t"testing"\n)\n\nconst letterBytes = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"\n\nfunc randomString(n int) string {\n\tb := make([]byte, n)\n\tfor i := range b {\n\t\tb[i] = letterBytes[rand.Intn(len(letterBytes))]\n\t}\n\treturn string(b)\n}\n\n// \u4f7f\u7528 + \u53f7\nfunc plusConcat(n int, str string) string {\n\ts := ""\n\tfor i := 0; i < n; i++ {\n\t\ts += str\n\t}\n\treturn s\n}\n\n// \u4f7f\u7528 fmt.Sprintf\nfunc sprintfConcat(n int, str string) string {\n\ts := ""\n\tfor i := 0; i < n; i++ {\n\t\ts = fmt.Sprintf("%s%s", s, str)\n\t}\n\treturn s\n}\n\n// \u4f7f\u7528 strings.Builder\nfunc builderConcat(n int, str string) string {\n\tvar builder strings.Builder\n\tfor i := 0; i < n; i++ {\n\t\tbuilder.WriteString(str)\n\t}\n\treturn builder.String()\n}\n\n// \u6700\u4f18\u65b9\u5f0f\n// \u4f7f\u7528 strings.Builder\uff0c\u9884\u5206\u914d\u5185\u5b58\u7684\u65b9\u5f0f Grow\nfunc preBuilderConcat(n int, str string) string {\n\tvar builder strings.Builder\n\tbuilder.Grow(n * len(str))\n\tfor i := 0; i < n; i++ {\n\t\tbuilder.WriteString(str)\n\t}\n\treturn builder.String()\n}\n\n// \u4f7f\u7528 bytes.Buffer\nfunc bufferConcat(n int, s string) string {\n\tbuf := new(bytes.Buffer)\n\tfor i := 0; i < n; i++ {\n\t\tbuf.WriteString(s)\n\t}\n\treturn buf.String()\n}\n\n// \u4f7f\u7528 []byte\nfunc byteConcat(n int, str string) string {\n\tbuf := make([]byte, 0)\n\tfor i := 0; i < n; i++ {\n\t\tbuf = append(buf, str...)\n\t}\n\treturn string(buf)\n}\n\n// \u4f7f\u7528 []byte\uff0c\u9884\u5206\u914d\u5207\u7247\u7684\u5bb9\u91cf(cap)\nfunc preByteConcat(n int, str string) string {\n\tbuf := make([]byte, 0, n*len(str))\n\tfor i := 0; i < n; i++ {\n\t\tbuf = append(buf, str...)\n\t}\n\treturn string(buf)\n}\n\nfunc benchmark(b *testing.B, f func(int, string) string) {\n\tvar str = randomString(10)\n\tfor i := 0; i < b.N; i++ {\n\t\tf(10000, str)\n\t}\n}\n\nfunc BenchmarkPlusConcat(b *testing.B)       { benchmark(b, plusConcat) }\nfunc BenchmarkSprintfConcat(b *testing.B)    { benchmark(b, sprintfConcat) }\nfunc BenchmarkBuilderConcat(b *testing.B)    { benchmark(b, builderConcat) }\nfunc BenchmarkPreBuilderConcat(b *testing.B) { benchmark(b, preBuilderConcat) }\nfunc BenchmarkBufferConcat(b *testing.B)     { benchmark(b, bufferConcat) }\nfunc BenchmarkByteConcat(b *testing.B)       { benchmark(b, byteConcat) }\nfunc BenchmarkPreByteConcat(b *testing.B)    { benchmark(b, preByteConcat) }\n```\n\n```sh\ngo test -bench="Concat$" -benchmem .\ngoos: linux\ngoarch: amd64\npkg: demo\ncpu: AMD Ryzen 5 3500X 6-Core Processor             \nBenchmarkPlusConcat-6                 25          50676691 ns/op        530997136 B/op     10016 allocs/op\nBenchmarkSprintfConcat-6              12          95763922 ns/op        833576833 B/op     37388 allocs/op\nBenchmarkBuilderConcat-6            9614            107031 ns/op          514801 B/op         23 allocs/op\nBenchmarkPreBuilderConcat-6        21030             56843 ns/op          106496 B/op          1 allocs/op\nBenchmarkBufferConcat-6             9000            129491 ns/op          423536 B/op         13 allocs/op\nBenchmarkByteConcat-6              11332            106953 ns/op          621298 B/op         24 allocs/op\nBenchmarkPreByteConcat-6           19999             58401 ns/op          212992 B/op          2 allocs/op\nPASS\nok      demo    10.523s\n```\n'},ppM3:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u53d8\u91cf\u8bf4\u660e\u7b26\n---"},"q+kX":function(n,t,e){"use strict";e.r(t),t.default="```dart\nwhile (!isDone()) {\n  doSomething();\n}\n\ndo {\n  printLine();\n} while (!atEndOfPage());\n```\n"},qGQ6:function(n,t,e){"use strict";e.r(t),t.default='```js\n// 1\n// 2\n// Fizz\n// 4\n// Buzz\nfor (let i = 1; i <= 100; i = i + 1) {\n  if (i === 3) {\n    console.log("Fizz");\n    continue;\n  }\n\n  if (i === 5) {\n    console.log("Buzz");\n    break;\n  }\n\n  console.log(i);\n}\n```\n'},qRdY:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6761\u4ef6\u7f16\u8bd1\n---"},qZMv:function(n,t,e){"use strict";e.r(t),t.default='```sh\ncargo new hello_world\ncargo build\ncargo run\n\ncargo update            # \u66f4\u65b0\u6240\u6709\u4f9d\u8d56\ncargo update -p regex   # \u53ea\u66f4\u65b0 \u201cregex\u201d\n\ncargo test\n```\n\n## \u591a\u5f15\u7528\u65b9\u5f0f\u6df7\u5408\n\n```toml\n[dependencies]\n# \u672c\u5730\u4f7f\u7528\u65f6\uff0c\u901a\u8fc7 path \u5f15\u5165,\n# \u53d1\u5e03\u5230 `crates.io` \u65f6\uff0c\u901a\u8fc7 `crates.io` \u7684\u65b9\u5f0f\u5f15\u5165\uff1a  version = "1.0"\nbitflags = { path = "my-bitflags", version = "1.0" }\n\n# \u672c\u5730\u4f7f\u7528\u65f6\uff0c\u901a\u8fc7 git \u4ed3\u5e93\u5f15\u5165\n# \u5f53\u53d1\u5e03\u65f6\uff0c\u901a\u8fc7 `crates.io` \u5f15\u5165\uff1a version = "1.0"\nsmallvec = { git = "https://github.com/servo/rust-smallvec", version = "1.0" }\n\n# N.B. \u82e5 version \u65e0\u6cd5\u5339\u914d\uff0cCargo \u5c06\u65e0\u6cd5\u7f16\u8bd1\n```\n\n## \u6839\u636e\u5e73\u53f0\u5f15\u5165\u4f9d\u8d56\n\n```toml\n[target.\'cfg(windows)\'.dependencies]\nwinhttp = "0.4.0"\n\n[target.\'cfg(unix)\'.dependencies]\nopenssl = "1.0.1"\n\n[target.\'cfg(target_arch = "x86")\'.dependencies]\nnative = { path = "native/i686" }\n\n[target.\'cfg(target_arch = "x86_64")\'.dependencies]\nnative = { path = "native/x86_64" }\n```\n\n## \u9009\u62e9 features\n\n```toml\n[dependencies.awesome]\nversion = "1.3.5"\ndefault-features = false # \u4e0d\u8981\u5305\u542b\u9ed8\u8ba4\u7684 features\uff0c\u800c\u662f\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u6765\u6307\u5b9a\nfeatures = ["secure-password", "civet"]\n```\n\n## \u5728 Cargo.toml \u4e2d\u91cd\u547d\u540d\u4f9d\u8d56\n\n```toml\n[package]\nname = "mypackage"\nversion = "0.0.1"\n\n[dependencies]\nfoo = "0.1"\nbar = { git = "https://github.com/example/project", package = "foo" }\nbaz = { version = "0.1", registry = "custom", package = "foo" }\n```\n\n## \u4f9d\u8d56\u8986\u76d6\n\n```toml\n[package]\nname = "my-library"\nversion = "0.1.0"\n\n[dependencies]\nuuid = "0.8.2"\n\n[patch.crates-io]\nuuid = { path = "../uuid" }\n```\n\n```sh\n# \u6307\u5b9a\u7248\u672c\u8fdb\u884c\u66f4\u65b0\ncargo update -p uuid --precise 0.8.3\n```\n\n## \u81ea\u5b9a\u4e49\u6784\u5efa\n\n```toml\n[profile.dev]\n# opt-level \u8bbe\u7f6e\u63a7\u5236 Rust \u4f1a\u5bf9\u4ee3\u7801\u8fdb\u884c\u4f55\u79cd\u7a0b\u5ea6\u7684\u4f18\u5316\u3002\n# \u8fd9\u4e2a\u914d\u7f6e\u7684\u503c\u4ece 0 \u5230 3\u3002\nopt-level = 0\n\n[profile.release]\nopt-level = 3\n```\n\n## \u53d1\u5e03 create\n\n`crates.io` \u4e0a\u6ce8\u518c\u8d26\u53f7\u5e76\u83b7\u53d6\u4e00\u4e2a API token\u3002\n\n```sh\n# \u767b\u5f55\ncargo login abcdefghijklmnopqrstuvwxyz012345\n\n# \u4fee\u6539 Cargo.toml \u914d\u7f6e\n\n# \u53d1\u5e03\ncargo publish\n\n# \u66f4\u65b0\n# \u4fee\u6539 version \u540e\ncargo publish\n\n# \u64a4\u56de\u7248\u672c\ncargo yank --vers 1.0.1\n# \u64a4\u9500\u64a4\u56de\u64cd\u4f5c\ncargo yank --vers 1.0.1 --undo\n```\n\n```toml\n[package]\nname = "guessing_game"\nversion = "0.1.0"\nauthors = ["Your Name <you@example.com>"]\nedition = "2018"\ndescription = "A fun game where you guess what number the computer has chosen."\nlicense = "MIT OR Apache-2.0"\n\n[dependencies]\n```\n'},qaPL:function(n,t,e){"use strict";e.r(t),t.default='\u5355\u7eaf\u7684\u7b49\u5f85\uff0c\u4f7f\u7528 `time.Sleep` \u5c31\u591f\u4e86\u3002 \u4f7f\u7528\u5b9a\u65f6\u5668\u7684\u539f\u56e0\u4e4b\u4e00\u5c31\u662f\uff0c\u4f60\u53ef\u4ee5\u5728\u5b9a\u65f6\u5668\u89e6\u53d1\u4e4b\u524d\u5c06\u5176\u53d6\u6d88\u3002\n\n```go\npackage main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc main() {\n\n    timer1 := time.NewTimer(2 * time.Second)\n    <-timer1.C\n    fmt.Println("Timer 1 fired")\n\n    timer2 := time.NewTimer(time.Second)\n    go func() {\n        <-timer2.C\n        fmt.Println("Timer 2 fired")\n    }()\n    stop2 := timer2.Stop()\n    if stop2 {\n        fmt.Println("Timer 2 stopped")\n    }\n\n    // timer2 \u8db3\u591f\u7684\u65f6\u95f4\u6765\u89e6\u53d1\u5b83\uff0c\u4ee5\u8bc1\u660e\u5b83\u5b9e\u9645\u4e0a\u5df2\u7ecf\u505c\u6b62\u4e86\u3002\n    time.Sleep(2 * time.Second)\n}\n```\n'},qvsS:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u4e92\u65a5\u9501\n---\n"},r0lz:function(n,t,e){"use strict";e.r(t),t.default="```dart\n// Check whether a string contains another string.\nassert('Never odd or even'.contains('odd'));\n\n// Does a string start with another string?\nassert('Never odd or even'.startsWith('Never'));\n\n// Does a string end with another string?\nassert('Never odd or even'.endsWith('even'));\n\n// Find the location of a string inside a string.\nassert('Never odd or even'.indexOf('odd') == 6);\n```\n"},r7FH:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u7f16\u8bd1\n---"},rL9r:function(n,t,e){"use strict";e.r(t),t.default='## \u6cdb\u578b\u7c7b\u578b\n\n```go\n// \u65e0\u6cdb\u578b\ntype IntSlice []int\nvar a IntSlice = []int{1, 2, 3}\n\n// \u4f7f\u7528\u6cdb\u578b\ntype Slice[T int|float32|float64 ] []T\n\n// \u8fd9\u91cc\u4f20\u5165\u4e86\u7c7b\u578b\u5b9e\u53c2int\uff0c\u6cdb\u578b\u7c7b\u578bSlice[T]\u88ab\u5b9e\u4f8b\u5316\u4e3a\u5177\u4f53\u7684\u7c7b\u578b Slice[int]\nvar a Slice[int] = []int{1, 2, 3}\nfmt.Printf("Type Name: %T",a)  //\u8f93\u51fa\uff1aType Name: Slice[int]\n\n// \u4f20\u5165\u7c7b\u578b\u5b9e\u53c2float32, \u5c06\u6cdb\u578b\u7c7b\u578bSlice[T]\u5b9e\u4f8b\u5316\u4e3a\u5177\u4f53\u7684\u7c7b\u578b Slice[string]\nvar b Slice[float32] = []float32{1.0, 2.0, 3.0}\nfmt.Printf("Type Name: %T",b)  //\u8f93\u51fa\uff1aType Name: Slice[float32]\n\n// MyMap\u7c7b\u578b\u5b9a\u4e49\u4e86\u4e24\u4e2a\u7c7b\u578b\u5f62\u53c2 KEY \u548c VALUE\u3002\u5206\u522b\u4e3a\u4e24\u4e2a\u5f62\u53c2\u6307\u5b9a\u4e86\u4e0d\u540c\u7684\u7c7b\u578b\u7ea6\u675f\n// \u8fd9\u4e2a\u6cdb\u578b\u7c7b\u578b\u7684\u540d\u5b57\u53eb\uff1a MyMap[KEY, VALUE]\ntype MyMap[KEY int | string, VALUE float32 | float64] map[KEY]VALUE\n\n// \u7528\u7c7b\u578b\u5b9e\u53c2 string \u548c flaot64 \u66ff\u6362\u4e86\u7c7b\u578b\u5f62\u53c2 KEY \u3001 VALUE\uff0c\u6cdb\u578b\u7c7b\u578b\u88ab\u5b9e\u4f8b\u5316\u4e3a\u5177\u4f53\u7684\u7c7b\u578b\uff1aMyMap[string, float64]\nvar a MyMap[string, float64] = map[string]float64{\n    "jack_score": 9.6,\n    "bob_score":  8.4,\n}\n\n// \u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u7684\u7ed3\u6784\u4f53\u3002\u53ef\u7528 int \u6216 sring \u7c7b\u578b\u5b9e\u4f8b\u5316\ntype MyStruct[T int | string] struct {\n    Name string\n    Data T\n}\n\n// \u4e00\u4e2a\u6cdb\u578b\u63a5\u53e3(\u5173\u4e8e\u6cdb\u578b\u63a5\u53e3\u5728\u540e\u534a\u90e8\u5206\u4f1a\u8be6\u7ec6\u8bb2\u89e3\uff09\ntype IPrintData[T int | float32 | string] interface {\n    Print(data T)\n}\n\n// \u4e00\u4e2a\u6cdb\u578b\u901a\u9053\uff0c\u53ef\u7528\u7c7b\u578b\u5b9e\u53c2 int \u6216 string \u5b9e\u4f8b\u5316\ntype MyChan[T int | string] chan T\n\n// \u7c7b\u578b\u5f62\u53c2\u7684\u4e92\u76f8\u5957\u7528\ntype WowStruct[T int | float32, S []T] struct {\n    Data     S\n    MaxValue T\n    MinValue T\n}\n\n// \u7279\u6b8a\u7684\u6cdb\u578b\u7c7b\u578b\ntype Wow[T int | string] int\nvar a Wow[int] = 123     // \u7f16\u8bd1\u6b63\u786e\nvar b Wow[string] = 123  // \u7f16\u8bd1\u6b63\u786e\nvar c Wow[string] = "hello" // \u7f16\u8bd1\u9519\u8bef\uff0c\u56e0\u4e3a"hello"\u4e0d\u80fd\u8d4b\u503c\u7ed9\u5e95\u5c42\u7c7b\u578bint\n```\n\n## \u8bed\u6cd5\u9519\u8bef\n\n```go\n// \u9519\u8bef\uff0c\u7c7b\u578b\u5f62\u53c2\u4e0d\u80fd\u5355\u72ec\u4f7f\u7528\ntype CommonType[T int|string|float32] T\n\n// \u533f\u540d\u7ed3\u6784\u4f53\u4e0d\u652f\u6301\u6cdb\u578b\ntestCase := struct[T int|string] {\n        caseName string\n        got      T\n        want     T\n    }[int]{\n        caseName: "test OK",\n        got:      100,\n        want:     100,\n    }\n```\n\n\u5f53\u7c7b\u578b\u7ea6\u675f\u7684\u4e00\u4e9b\u5199\u6cd5\u4f1a\u88ab\u7f16\u8bd1\u5668\u8bef\u8ba4\u4e3a\u662f\u8868\u8fbe\u5f0f\u65f6\u4f1a\u62a5\u9519\u3002\u5982\u4e0b\uff1a\n\n```go\n//\u2717 \u9519\u8bef\u3002T *int\u4f1a\u88ab\u7f16\u8bd1\u5668\u8bef\u8ba4\u4e3a\u662f\u8868\u8fbe\u5f0f T\u4e58\u4ee5int\uff0c\u800c\u4e0d\u662fint\u6307\u9488\ntype NewType[T *int] []T\n// \u4e0a\u9762\u4ee3\u7801\u518d\u7f16\u8bd1\u5668\u773c\u4e2d\uff1a\u5b83\u8ba4\u4e3a\u4f60\u8981\u5b9a\u4e49\u4e00\u4e2a\u5b58\u653e\u5207\u7247\u7684\u6570\u7ec4\uff0c\u6570\u7ec4\u957f\u5ea6\u7531 T \u4e58\u4ee5 int \u8ba1\u7b97\u5f97\u5230\ntype NewType [T * int][]T\n\n//\u2717 \u9519\u8bef\u3002\u548c\u4e0a\u9762\u4e00\u6837\uff0c\u8fd9\u91cc\u4e0d\u5149*\u88ab\u4f1a\u8ba4\u4e3a\u662f\u4e58\u53f7\uff0c| \u8fd8\u4f1a\u88ab\u8ba4\u4e3a\u662f\u6309\u4f4d\u6216\u64cd\u4f5c\ntype NewType2[T *int|*float64] []T\n\n//\u2717 \u9519\u8bef\ntype NewType2 [T (int)] []T\n```\n\n\u4e3a\u4e86\u907f\u514d\u8fd9\u79cd\u8bef\u89e3\uff0c\u89e3\u51b3\u529e\u6cd5\u5c31\u662f\u7ed9\u7c7b\u578b\u7ea6\u675f\u5305\u4e0a interface{} \u6216\u52a0\u4e0a\u9017\u53f7\u6d88\u9664\u6b67\u4e49\n\n```go\ntype NewType[T interface{*int}] []T\ntype NewType2[T interface{*int|*float64}] []T\n\n// \u5982\u679c\u7c7b\u578b\u7ea6\u675f\u4e2d\u53ea\u6709\u4e00\u4e2a\u7c7b\u578b\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4e2a\u9017\u53f7\u6d88\u9664\u6b67\u4e49\ntype NewType3[T *int,] []T\n\n//\u2717 \u9519\u8bef\u3002\u5982\u679c\u7c7b\u578b\u7ea6\u675f\u4e0d\u6b62\u4e00\u4e2a\u7c7b\u578b\uff0c\u52a0\u9017\u53f7\u662f\u4e0d\u884c\u7684\ntype NewType4[T *int|*float32,] []T\n```\n\n## \u6cdb\u578b\u7c7b\u578b\u7684\u5957\u5a03\n\n```go\n// \u5148\u5b9a\u4e49\u4e2a\u6cdb\u578b\u7c7b\u578b Slice[T]\ntype Slice[T int|string|float32|float64] []T\n\n// \u2717 \u9519\u8bef\u3002\u6cdb\u578b\u7c7b\u578bSlice[T]\u7684\u7c7b\u578b\u7ea6\u675f\u4e2d\u4e0d\u5305\u542buint, uint8\ntype UintSlice[T uint|uint8] Slice[T]\n\n// \u2713 \u6b63\u786e\u3002\u57fa\u4e8e\u6cdb\u578b\u7c7b\u578bSlice[T]\u5b9a\u4e49\u4e86\u65b0\u7684\u6cdb\u578b\u7c7b\u578b FloatSlice[T] \u3002FloatSlice[T]\u53ea\u63a5\u53d7float32\u548cfloat64\u4e24\u79cd\u7c7b\u578b\ntype FloatSlice[T float32|float64] Slice[T]\n\n// \u2713 \u6b63\u786e\u3002\u57fa\u4e8e\u6cdb\u578b\u7c7b\u578bSlice[T]\u5b9a\u4e49\u7684\u65b0\u6cdb\u578b\u7c7b\u578b IntAndStringSlice[T]\ntype IntAndStringSlice[T int|string] Slice[T]\n// \u2713 \u6b63\u786e \u57fa\u4e8eIntAndStringSlice[T]\u5957\u5a03\u5b9a\u4e49\u51fa\u7684\u65b0\u6cdb\u578b\u7c7b\u578b\ntype IntSlice[T int] IntAndStringSlice[T]\n\n// \u5728map\u4e2d\u5957\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578bSlice[T]\ntype WowMap[T int|string] map[string]Slice[T]\n// \u5728map\u4e2d\u5957Slice[T]\u7684\u53e6\u4e00\u79cd\u5199\u6cd5\ntype WowMap2[T Slice[int] | Slice[string]] map[string]T\n```\n\n## \u7c7b\u578b\u7ea6\u675f\u7684\u4e24\u79cd\u9009\u62e9\n\n```go\ntype WowStruct[T int|string] struct {\n    Name string\n    Data []T\n}\n\ntype WowStruct2[T []int|[]string] struct {\n    Name string\n    Data T\n}\n\ntype WowStruct3[T int | string] struct {\n    Data     []T\n    MaxValue T\n    MinValue T\n}\n```\n\n## \u6cdb\u578b receiver\n\n```go\ntype MySlice[T int | float32] []T\n\nfunc (s MySlice[T]) Sum() T {\n    var sum T\n    for _, value := range s {\n        sum += value\n    }\n    return sum\n}\n\nvar s MySlice[int] = []int{1, 2, 3, 4}\nfmt.Println(s.Sum()) // \u8f93\u51fa\uff1a10\n\nvar s2 MySlice[float32] = []float32{1.0, 2.0, 3.0, 4.0}\nfmt.Println(s2.Sum()) // \u8f93\u51fa\uff1a10.0\n```\n\n### \u57fa\u4e8e\u6cdb\u578b\u7684\u961f\u5217\n\n```go\n// \u8fd9\u91cc\u7c7b\u578b\u7ea6\u675f\u4f7f\u7528\u4e86\u7a7a\u63a5\u53e3\uff0c\u4ee3\u8868\u7684\u610f\u601d\u662f\u6240\u6709\u7c7b\u578b\u90fd\u53ef\u4ee5\u7528\u6765\u5b9e\u4f8b\u5316\u6cdb\u578b\u7c7b\u578b Queue[T]\ntype Queue[T interface{}] struct {\n    elements []T\n}\n\n// \u5c06\u6570\u636e\u653e\u5165\u961f\u5217\u5c3e\u90e8\nfunc (q *Queue[T]) Put(value T) {\n    q.elements = append(q.elements, value)\n}\n\n// \u4ece\u961f\u5217\u5934\u90e8\u53d6\u51fa\u5e76\u4ece\u5934\u90e8\u5220\u9664\u5bf9\u5e94\u6570\u636e\nfunc (q *Queue[T]) Pop() (T, bool) {\n    var value T\n    if len(q.elements) == 0 {\n        return value, true\n    }\n\n    value = q.elements[0]\n    q.elements = q.elements[1:]\n    return value, len(q.elements) == 0\n}\n\n// \u961f\u5217\u5927\u5c0f\nfunc (q Queue[T]) Size() int {\n    return len(q.elements)\n}\n\nvar q1 Queue[int]  // \u53ef\u5b58\u653eint\u7c7b\u578b\u6570\u636e\u7684\u961f\u5217\nq1.Put(1)\nq1.Put(2)\nq1.Put(3)\nq1.Pop() // 1\nq1.Pop() // 2\nq1.Pop() // 3\n\nvar q2 Queue[string]  // \u53ef\u5b58\u653estring\u7c7b\u578b\u6570\u636e\u7684\u961f\u5217\nq2.Put("A")\nq2.Put("B")\nq2.Put("C")\nq2.Pop() // "A"\nq2.Pop() // "B"\nq2.Pop() // "C"\n\nvar q3 Queue[struct{Name string}]\nvar q4 Queue[[]int] // \u53ef\u5b58\u653e[]int\u5207\u7247\u7684\u961f\u5217\nvar q5 Queue[chan int] // \u53ef\u5b58\u653eint\u901a\u9053\u7684\u961f\u5217\nvar q6 Queue[io.Reader] // \u53ef\u5b58\u653e\u63a5\u53e3\u7684\u961f\u5217\n// ......\n```\n\n## \u6cdb\u578b\u51fd\u6570\n\n```go\n// \u65e0\u6cdb\u578b\nfunc Add(a int, b int) int {\n    return a + b\n}\n\n// \u4f7f\u7528\u6cdb\u578b\nfunc Add[T int | float32 | float64](a T, b T) T {\n    return a + b\n}\n\nAdd[int](1,2) // \u4f20\u5165\u7c7b\u578b\u5b9e\u53c2int\uff0c\u8ba1\u7b97\u7ed3\u679c\u4e3a 3\nAdd[float32](1.0, 2.0) // \u4f20\u5165\u7c7b\u578b\u5b9e\u53c2float32, \u8ba1\u7b97\u7ed3\u679c\u4e3a 3.0\n\nAdd[string]("hello", "world") // \u9519\u8bef\u3002\u56e0\u4e3a\u6cdb\u578b\u51fd\u6570Add\u7684\u7c7b\u578b\u7ea6\u675f\u4e2d\u5e76\u4e0d\u5305\u542bstring\n\nAdd(1, 2)  // 1\uff0c2\u662fint\u7c7b\u578b\uff0c\u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u5bfc\u51fa\u7c7b\u578b\u5b9e\u53c2T\u662fint\nAdd(1.0, 2.0) // 1.0, 2.0 \u662f\u6d6e\u70b9\uff0c\u7f16\u8bd1\u8bf7\u81ea\u52a8\u63a8\u5bfc\u51fa\u7c7b\u578b\u5b9e\u53c2T\u662ffloat32\n```\n\n## \u4e0d\u652f\u6301\u7684\u6cdb\u578b\u60c5\u51b5\n\n### \u533f\u540d\u51fd\u6570\u4e0d\u652f\u6301\u6cdb\u578b\n\n```go\n// \u9519\u8bef\uff0c\u533f\u540d\u51fd\u6570\u4e0d\u80fd\u81ea\u5df1\u5b9a\u4e49\u7c7b\u578b\u5b9e\u53c2\nfnGeneric := func[T int | float32](a, b T) T {\n        return a + b\n}\n\nfmt.Println(fnGeneric(1, 2))\n```\n\n### Go \u7684\u65b9\u6cd5\u5e76\u4e0d\u652f\u6301\u6cdb\u578b\n\n```go\ntype A struct {\n}\n\n// \u9519\u8bef\uff0c\u4e0d\u652f\u6301\u6cdb\u578b\u65b9\u6cd5\nfunc (receiver A) Add[T int | float32 | float64](a T, b T) T {\n    return a + b\n}\n```\n\n\u901a\u8fc7 receiver \u4f7f\u7528\u7c7b\u578b\u5f62\u53c2\n\n```go\ntype A[T int | float32 | float64] struct {}\n\n// \u65b9\u6cd5\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u5b9a\u4e49\u4e2d\u7684\u5f62\u53c2 T\nfunc (receiver A[T]) Add(a T, b T) T {\n    return a + b\n}\n\n// \u7528\u6cd5\uff1a\nvar a A[int]\na.Add(1, 2)\n\nvar aa A[float32]\naa.Add(1.0, 2.0)\n```\n\n## \u63a5\u53e3\u7c7b\u578b\u7ea6\u675f\n\n```go\n// \u4e00\u4e2a\u53ef\u4ee5\u5bb9\u7eb3\u6240\u6709int,uint\u4ee5\u53ca\u6d6e\u70b9\u7c7b\u578b\u7684\u6cdb\u578b\u5207\u7247\ntype Slice[T int | int8 | int16 | int32 | int64 | uint | uint8 | uint16 | uint32 | uint64 | float32 | float64] []T\n\n// \u5c06\u7c7b\u578b\u7ea6\u675f\u5355\u72ec\u62ff\u51fa\u6765\u5b9a\u4e49\u5230\u63a5\u53e3\u4e2d\ntype IntUintFloat interface {\n    int | int8 | int16 | int32 | int64 | uint | uint8 | uint16 | uint32 | uint64 | float32 | float64\n}\ntype Slice[T IntUintFloat] []T\n\n// \u8fdb\u884c\u7ec4\u5408\ntype Int interface {\n    int | int8 | int16 | int32 | int64\n}\ntype Uint interface {\n    uint | uint8 | uint16 | uint32\n}\ntype Float interface {\n    float32 | float64\n}\ntype Slice[T Int | Uint | Float] []T  // \u4f7f\u7528 \'|\' \u5c06\u591a\u4e2a\u63a5\u53e3\u7c7b\u578b\u7ec4\u5408\n\n// \u76f4\u63a5\u7ec4\u5408\u5176\u4ed6\u63a5\u53e3\ntype SliceElement interface {\n    Int | Uint | Float | string // \u7ec4\u5408\u4e86\u4e09\u4e2a\u63a5\u53e3\u7c7b\u578b\u5e76\u989d\u5916\u589e\u52a0\u4e86\u4e00\u4e2a string \u7c7b\u578b\n}\ntype Slice[T SliceElement] []T\n```\n\n## \u6307\u5b9a\u5e95\u5c42\u7c7b\u578b\n\n```go\nvar s1 Slice[int] // \u6b63\u786e\n\ntype MyInt int\nvar s2 Slice[MyInt] // \u2717 \u9519\u8bef\u3002MyInt\u7c7b\u578b\u5e95\u5c42\u7c7b\u578b\u662fint\u4f46\u5e76\u4e0d\u662fint\u7c7b\u578b\uff0c\u4e0d\u7b26\u5408 Slice[T] \u7684\u7c7b\u578b\u7ea6\u675f\n```\n\n\u5728\u7c7b\u578b\u7ea6\u675f\u4e2d\u4f7f\u7528\u7c7b\u4f3c `~int` \u8fd9\u79cd\u5199\u6cd5\u7684\u8bdd\uff0c\u5c31\u4ee3\u8868\u7740\u4e0d\u5149\u662f `int` \uff0c\n\u6240\u6709\u4ee5 `int` \u4e3a\u5e95\u5c42\u7c7b\u578b\u7684\u7c7b\u578b\u4e5f\u90fd\u53ef\u7528\u4e8e\u5b9e\u4f8b\u5316\n\n```go\ntype Int interface {\n    ~int | ~int8 | ~int16 | ~int32 | ~int64\n}\n\ntype Uint interface {\n    ~uint | ~uint8 | ~uint16 | ~uint32\n}\ntype Float interface {\n    ~float32 | ~float64\n}\n\ntype Slice[T Int | Uint | Float] []T\n\nvar s Slice[int] // \u6b63\u786e\n\ntype MyInt int\nvar s2 Slice[MyInt]  // MyInt\u5e95\u5c42\u7c7b\u578b\u662fint\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u4e8e\u5b9e\u4f8b\u5316\n\ntype MyMyInt MyInt\nvar s3 Slice[MyMyInt]  // \u6b63\u786e\u3002MyMyInt \u867d\u7136\u57fa\u4e8e MyInt \uff0c\u4f46\u5e95\u5c42\u7c7b\u578b\u4e5f\u662fint\uff0c\u6240\u4ee5\u4e5f\u80fd\u7528\u4e8e\u5b9e\u4f8b\u5316\n\ntype MyFloat32 float32  // \u6b63\u786e\nvar s4 Slice[MyFloat32]\n```\n\n\u4f7f\u7528 `~` \u65f6\u6709\u4e00\u5b9a\u7684\u9650\u5236\uff1a\n\n- `~`\u540e\u9762\u7684\u7c7b\u578b\u4e0d\u80fd\u4e3a\u63a5\u53e3\n- `~`\u540e\u9762\u7684\u7c7b\u578b\u5fc5\u987b\u4e3a\u57fa\u672c\u7c7b\u578b\n\n```go\ntype MyInt int\n\ntype _ interface {\n    ~[]byte  // \u6b63\u786e\n    ~MyInt   // \u9519\u8bef\uff0c~\u540e\u7684\u7c7b\u578b\u5fc5\u987b\u4e3a\u57fa\u672c\u7c7b\u578b\n    ~error   // \u9519\u8bef\uff0c~\u540e\u7684\u7c7b\u578b\u4e0d\u80fd\u4e3a\u63a5\u53e3\n}\n```\n\n## \u63a5\u53e3\u5b9e\u73b0\n\n```go\ntype Uint interface {  // \u7c7b\u578b\u96c6 Uint \u662f ~uint \u548c ~uint8 \u7b49\u7c7b\u578b\u7684\u5e76\u96c6\n    ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64\n}\n```\n\n```go\ntype AllInt interface {\n    ~int | ~int8 | ~int16 | ~int32 | ~int64 | ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint32\n}\n\ntype Uint interface {\n    ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64\n}\n\ntype A interface { // \u63a5\u53e3A\u4ee3\u8868\u7684\u7c7b\u578b\u96c6\u662f AllInt \u548c Uint \u7684\u4ea4\u96c6\n    AllInt\n    Uint\n}\n\ntype B interface { // \u63a5\u53e3B\u4ee3\u8868\u7684\u7c7b\u578b\u96c6\u662f AllInt \u548c ~int \u7684\u4ea4\u96c6\n    AllInt\n    ~int\n}\n```\n\n## \u7a7a\u63a5\u53e3\n\n```go\ntype Slice[T any] []T // \u4ee3\u7801\u7b49\u4ef7\u4e8e type Slice[T interface{}] []T\n```\n\n## comparable(\u53ef\u6bd4\u8f83) \u548c \u53ef\u6392\u5e8f(ordered)\n\n```go\ntype MyMap[KEY comparable, VALUE any] map[KEY]VALUE // \u6b63\u786e\n```\n\n```go\n// Ordered \u4ee3\u8868\u6240\u6709\u53ef\u6bd4\u5927\u5c0f\u6392\u5e8f\u7684\u7c7b\u578b\ntype Ordered interface {\n    Integer | Float | ~string\n}\n\ntype Integer interface {\n    Signed | Unsigned\n}\n\ntype Signed interface {\n    ~int | ~int8 | ~int16 | ~int32 | ~int64\n}\n\ntype Unsigned interface {\n    ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr\n}\n\ntype Float interface {\n    ~float32 | ~float64\n}\n```\n\n## \u63a5\u53e3\u7684\u4e24\u79cd\u7c7b\u578b\n\n- \u57fa\u672c\u63a5\u53e3(Basic interface)\n  - \u63a5\u53e3\u5b9a\u4e49\u4e2d\u5982\u679c\u53ea\u6709\u65b9\u6cd5\n- \u901a\u7528\uff08\u4e00\u822c\uff09\u63a5\u53e3(General interface)\n  - \u63a5\u53e3\u5185\u4e0d\u5149\u53ea\u6709\u65b9\u6cd5\uff0c\u8fd8\u6709\u7c7b\u578b\n  - \u901a\u7528\u63a5\u53e3\u7c7b\u578b\u4e0d\u80fd\u7528\u6765\u5b9a\u4e49\u53d8\u91cf\uff0c\u53ea\u80fd\u7528\u4e8e\u6cdb\u578b\u7684\u7c7b\u578b\u7ea6\u675f\u4e2d\n\n```go\ntype Uint interface { // \u63a5\u53e3 Uint \u4e2d\u6709\u7c7b\u578b\uff0c\u6240\u4ee5\u662f\u901a\u7528\u63a5\u53e3\n    ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64\n}\n\ntype ReadWriter interface {  // ReadWriter \u63a5\u53e3\u65e2\u6709\u65b9\u6cd5\u4e5f\u6709\u7c7b\u578b\uff0c\u6240\u4ee5\u662f\u901a\u7528\u63a5\u53e3\n    ~string | ~[]rune\n\n    Read(p []byte) (n int, err error)\n    Write(p []byte) (n int, err error)\n}\n```\n\n```go\ntype Uint interface {\n    ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64\n}\n\nvar uintInf Uint // \u9519\u8bef\u3002Uint\u662f\u901a\u7528\u63a5\u53e3\uff0c\u53ea\u80fd\u7528\u4e8e\u7c7b\u578b\u7ea6\u675f\uff0c\u4e0d\u5f97\u7528\u4e8e\u53d8\u91cf\u5b9a\u4e49\n```\n'},rMzJ:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6392\u5e8f\n---\n"},rUoa:function(n,t){throw new Error("Module parse failed: Unexpected character '\ufffd' (1:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n(Source code omitted for this binary file)")},rdxK:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5217\u8868\u6392\u5e8f\n---\n"},rgdb:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6253\u5370\n---"},rwXt:function(n,t,e){"use strict";e.r(t),t.default='\u5b57\u7b26\u4e32\u548c\u5b57\u8282 slice\n\n```go\ns := "abc"\nb := []byte(s)\ns2 := string(b)\n```\n\n\u5b57\u7b26\u4e32\u548c\u6570\u5b57\n\n```go\nx := 123\n\n// \u4e00\u79cd\u65b9\u6cd5\u662f\u7528fmt.Sprintf\u8fd4\u56de\u4e00\u4e2a\u683c\u5f0f\u5316\u7684\u5b57\u7b26\u4e32\ny := fmt.Sprintf("%d", x)\n\n// \u53e6\u4e00\u4e2a\u65b9\u6cd5\u662f\u7528strconv.Itoa(\u201c\u6574\u6570\u5230ASCII\u201d)\nfmt.Println(y, strconv.Itoa(x)) // "123 123"\n\n// \u4e0d\u540c\u7684\u8fdb\u5236\u6765\u683c\u5f0f\u5316\u6570\u5b57\nfmt.Println(strconv.FormatInt(int64(x), 2)) // "1111011"\n\n// fmt.Printf\u51fd\u6570\u7684%b\u3001%d\u3001%o\u548c%x\u7b49\u53c2\u6570\u63d0\u4f9b\u529f\u80fd\u5f80\u5f80\u6bd4strconv\u5305\u7684Format\u51fd\u6570\u65b9\u4fbf\u5f88\u591a\ns := fmt.Sprintf("x=%b", x) // "x=1111011"\n\n// \u5982\u679c\u8981\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u6574\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528strconv\u5305\u7684Atoi\u6216ParseInt\u51fd\u6570\uff0c\n// \u8fd8\u6709\u7528\u4e8e\u89e3\u6790\u65e0\u7b26\u53f7\u6574\u6570\u7684ParseUint\u51fd\u6570\uff1a\nx, err := strconv.Atoi("123")             // x is an int\ny, err := strconv.ParseInt("123", 10, 64) // base 10, up to 64 bits\n```\n\n\u8868\u8fbe\u5f0f `T(v)` \u5c06\u503c v \u8f6c\u6362\u4e3a\u7c7b\u578b T\u3002\nGo \u5728\u4e0d\u540c\u7c7b\u578b\u7684\u9879\u4e4b\u95f4\u8d4b\u503c\u65f6\u9700\u8981\u663e\u5f0f\u8f6c\u6362\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7c7b\u578b T\uff0c\u90fd\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u7c7b\u578b\u8f6c\u6362\u64cd\u4f5c`T(x)`\uff0c\n\u7528\u4e8e\u5c06 x \u8f6c\u4e3a T \u7c7b\u578b\uff08\u8bd1\u6ce8\uff1a\u5982\u679c T \u662f\u6307\u9488\u7c7b\u578b\uff0c\n\u53ef\u80fd\u4f1a\u9700\u8981\u7528\u5c0f\u62ec\u5f27\u5305\u88c5 T\uff0c\u6bd4\u5982`(*int)(0)`\uff09\u3002\n\u53ea\u6709\u5f53\u4e24\u4e2a\u7c7b\u578b\u7684\u5e95\u5c42\u57fa\u7840\u7c7b\u578b\u76f8\u540c\u65f6\uff0c\u624d\u5141\u8bb8\u8fd9\u79cd\u8f6c\u578b\u64cd\u4f5c\uff0c\n\u6216\u8005\u662f\u4e24\u8005\u90fd\u662f\u6307\u5411\u76f8\u540c\u5e95\u5c42\u7ed3\u6784\u7684\u6307\u9488\u7c7b\u578b\uff0c\n\u8fd9\u4e9b\u8f6c\u6362\u53ea\u6539\u53d8\u7c7b\u578b\u800c\u4e0d\u4f1a\u5f71\u54cd\u503c\u672c\u8eab\u3002\n\u5982\u679c x \u662f\u53ef\u4ee5\u8d4b\u503c\u7ed9 T \u7c7b\u578b\u7684\u503c\uff0c\u90a3\u4e48 x \u5fc5\u7136\u4e5f\u53ef\u4ee5\u88ab\u8f6c\u4e3a T \u7c7b\u578b\uff0c\u4f46\u662f\u4e00\u822c\u6ca1\u6709\u8fd9\u4e2a\u5fc5\u8981\u3002\n\n```go\nvar i int = 42\nvar f float64 = float64(i)\nvar u uint = uint(f)\n\n// \u6216\u8005\uff0c\u66f4\u52a0\u7b80\u5355\u7684\u5f62\u5f0f\uff1a\ni := 42\nf := float64(i)\nu := uint(f)\n\n\n// \u5b57\u7b26\u4e32\u548c\u5b57\u8282slice\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\ns := "abc"\nb := []byte(s)\ns2 := string(b)\n\n\n// \u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\nx := 123\ny := fmt.Sprintf("%d", x)\nfmt.Println(y, strconv.Itoa(x)) // "123 123"\nfmt.Println(strconv.FormatInt(int64(x), 2)) // "1111011"\ns := fmt.Sprintf("x=%b", x) // "x=1111011"\n\n\n// \u5b57\u7b26\u4e32\u89e3\u6790\u4e3a\u6574\u6570\n// \u53ef\u4ee5\u4f7f\u7528strconv\u5305\u7684Atoi\u6216ParseInt\u51fd\u6570\uff0c\n// \u8fd8\u6709\u7528\u4e8e\u89e3\u6790\u65e0\u7b26\u53f7\u6574\u6570\u7684ParseUint\u51fd\u6570\uff1a\nx, err := strconv.Atoi("123")             // x is an int\ny, err := strconv.ParseInt("123", 10, 64) // base 10, up to 64 bits\n```\n'},rxfb:function(n,t,e){"use strict";e.r(t),t.default="Go \u8bed\u8a00\u652f\u6301 C \u98ce\u683c\u7684\u5757\u6ce8\u91ca /\\* \\*/ \u548c C++\u98ce\u683c\u7684\u884c\u6ce8\u91ca //\u3002\n\n- \u6bcf\u4e2a\u5305\u90fd\u5e94\u5305\u542b\u4e00\u6bb5\u5305\u6ce8\u91ca\uff0c\u5373\u653e\u7f6e\u5728\u5305\u5b50\u53e5\u524d\u7684\u4e00\u4e2a\u5757\u6ce8\u91ca\u3002\n- \u5bf9\u4e8e\u5305\u542b\u591a\u4e2a\u6587\u4ef6\u7684\u5305\uff0c \u5305\u6ce8\u91ca\u53ea\u9700\u51fa\u73b0\u5728\u5176\u4e2d\u7684\u4efb\u4e00\u6587\u4ef6\u4e2d\u5373\u53ef\u3002\n- \u5305\u6ce8\u91ca\u5e94\u5728\u6574\u4f53\u4e0a\u5bf9\u8be5\u5305\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5e76\u63d0\u4f9b\u5305\u7684\u76f8\u5173\u4fe1\u606f\u3002\n\n\u5728\u6bcf\u4e2a\u6e90\u6587\u4ef6\u7684\u5305\u58f0\u660e\u524d\u7d27\u8ddf\u7740\u7684\u6ce8\u91ca\u662f\u5305\u6ce8\u91ca\uff08\xa710.7.4\uff09\u3002\n\u901a\u5e38\uff0c\u5305\u6ce8\u91ca\u7684\u7b2c\u4e00\u53e5\u5e94\u8be5\u5148\u662f\u5305\u7684\u529f\u80fd\u6982\u8981\u8bf4\u660e\u3002\n\u4e00\u4e2a\u5305\u901a\u5e38\u53ea\u6709\u4e00\u4e2a\u6e90\u6587\u4ef6\u6709\u5305\u6ce8\u91ca\u3002\n\u5982\u679c\u5305\u6ce8\u91ca\u5f88\u5927\uff0c\u901a\u5e38\u4f1a\u653e\u5230\u4e00\u4e2a\u72ec\u7acb\u7684 doc.go \u6587\u4ef6\u4e2d\u3002\n\n```go\n/*\n  regexp \u5305\u4e3a\u6b63\u5219\u8868\u8fbe\u5f0f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u5e93\u3002\n\n  \u8be5\u5e93\u63a5\u53d7\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u8bed\u6cd5\u4e3a\uff1a\n\n  \u6b63\u5219\u8868\u8fbe\u5f0f:\n    \u4e32\u8054 { '|' \u4e32\u8054 }\n  \u4e32\u8054:\n    { \u95ed\u5305 }\n  \u95ed\u5305:\n    \u6761\u76ee [ '*' | '+' | '?' ]\n  \u6761\u76ee:\n    '^'\n    '$'\n    '.'\n    \u5b57\u7b26\n    '[' [ '^' ] \u5b57\u7b26\u904d\u5386 ']'\n    '(' \u6b63\u5219\u8868\u8fbe\u5f0f ')'\n*/\npackage regexp\n// path \u5305\u5b9e\u73b0\u4e86\u4e00\u4e9b\u5e38\u7528\u7684\u5de5\u5177\uff0c\u4ee5\u4fbf\u4e8e\u64cd\u4f5c\u7528\u53cd\u659c\u6760\u5206\u9694\u7684\u8def\u5f84.\n\n// \u8868\u8fbe\u5f0f\u89e3\u6790\u5931\u8d25\u540e\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002\nvar (\n  ErrInternal      = errors.New(\"regexp: internal error\")\n  ErrUnmatchedLpar = errors.New(\"regexp: unmatched '('\")\n  ErrUnmatchedRpar = errors.New(\"regexp: unmatched ')'\")\n  // ...\n)\n```\n"},s3Jp:function(n,t,e){"use strict";e.r(t),t.default='```go\nfmt.Printf("Hello %d\\n", 23)\nfmt.Fprint(os.Stdout, "Hello ", 23, "\\n")\nfmt.Println("Hello", 23)\nfmt.Println(fmt.Sprint("Hello ", 23))\n\nvar x uint64 = 1<<64 - 1\nfmt.Printf("%d %x; %d %x\\n", x, x, int64(x), int64(x))\n\n// \u82e5\u4f60\u53ea\u60f3\u8981\u9ed8\u8ba4\u7684\u8f6c\u6362\uff0c\u5982\u4f7f\u7528\u5341\u8fdb\u5236\u7684\u6574\u6570\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u901a\u7528\u7684\u683c\u5f0f %v\uff08\u5bf9\u5e94\u201c\u503c\u201d\uff09\uff1b\n// \u5176\u7ed3\u679c\u4e0e Print \u548c Println \u7684\u8f93\u51fa\u5b8c\u5168\u76f8\u540c\u3002\n// \u6b64\u5916\uff0c\u8fd9\u79cd\u683c\u5f0f\u8fd8\u80fd\u6253\u5370\u4efb\u610f\u503c\uff0c\u751a\u81f3\u5305\u62ec\u6570\u7ec4\u3001\u7ed3\u6784\u4f53\u548c\u6620\u5c04\u3002\nfmt.Printf("%v\\n", timeZone)  // \u6216\u53ea\u7528 fmt.Println(timeZone)\n\n// \u6539\u8fdb\u7684\u683c\u5f0f %+v \u4f1a\u4e3a\u7ed3\u6784\u4f53\u7684\u6bcf\u4e2a\u5b57\u6bb5\u6dfb\u4e0a\u5b57\u6bb5\u540d\uff0c\n// \u800c\u53e6\u4e00\u79cd\u683c\u5f0f %#v \u5c06\u5b8c\u5168\u6309\u7167Go\u7684\u8bed\u6cd5\u6253\u5370\u503c\u3002\ntype T struct {\n  a int\n  b float64\n  c string\n}\nt := &T{ 7, -2.35, "abc\\tdef" }\nfmt.Printf("%v\\n", t)\nfmt.Printf("%+v\\n", t)\nfmt.Printf("%#v\\n", t)\nfmt.Printf("%#v\\n", timeZone)\n// &{7 -2.35 abc   def}\n// &{a:7 b:-2.35 c:abc     def}\n// &main.T{a:7, b:-2.35, c:"abc\\tdef"}\n// map[string] int{"CST":-21600, "PST":-28800, "EST":-18000, "UTC":0, "MST":-25200}\n```\n'},sJcq:function(n,t,e){"use strict";e.r(t),t.default='## \u7b80\u5355\u793a\u4f8b\n\n```go\npackage main\n\nimport "fmt"\n\n// \u51fd\u6570\u7684\u5165\u53c2\u548c\u51fa\u53c2\u90fd\u662f\u4e00\u4e2a\u51fd\u6570\nfunc decorator(f func(s string)) func(s string) {\n    return func(s string) {\n        fmt.Println("Started")\n        f(s)\n        fmt.Println("Done")\n    }\n}\n\nfunc Hello(s string) {\n    fmt.Println(s)\n}\n\nfunc main() {\n    // decorator(Hello)("Hello, World!")\n    hello := decorator(Hello)\n    hello("Hello")\n}\n```\n\n## \u8ba1\u7b97\u8fd0\u884c\u65f6\u95f4\u7684\u4f8b\u5b50\n\n```go\npackage main\n\nimport (\n  "fmt"\n  "reflect"\n  "runtime"\n  "time"\n)\n\n// \u5b9a\u4e49\u5165\u53c2\u51fa\u53c2\u51fd\u6570\ntype SumFunc func(int64, int64) int64\n\n// \u5229\u7528\u53cd\u5c04\u83b7\u53d6\u51fd\u6570\u540d\u79f0\nfunc getFunctionName(i interface{}) string {\n  return runtime.FuncForPC(reflect.ValueOf(i).Pointer()).Name()\n}\n\n// \u4fee\u9970\u5668\u51fd\u6570\uff0c\u5165\u53c2\u51fa\u53c2\u90fd\u662f\u4e00\u4e2a\u51fd\u6570\nfunc timedSumFunc(f SumFunc) SumFunc {\n  return func(start, end int64) int64 {\n\n    // defer\u51fd\u6570\u7684\u5165\u53c2\u8ba1\u7b97\u597d\u540e\uff0c\u7b49\u5f85\u540e\u9762\u6267\u884c\u5b8c\u624d\u6267\u884cdefer\u5185\u90e8\n    defer func(t time.Time) {\n      fmt.Printf("--- Time Elapsed (%s): %v ---\\n",\n          getFunctionName(f), time.Since(t))\n    }(time.Now())\n\n    return f(start, end)\n  }\n}\n\n// \u8017\u65f6\u8ba1\u7b971,\u91cc\u9762\u7ec6\u8282\u4e0d\u91cd\u8981\nfunc Sum1(start, end int64) int64 {\n  var sum int64\n  sum = 0\n  if start > end {\n    start, end = end, start\n  }\n  for i := start; i <= end; i++ {\n    sum += i\n  }\n  return sum\n}\n\n// \u8017\u65f6\u8ba1\u7b972,\u91cc\u9762\u7ec6\u8282\u4e0d\u91cd\u8981\nfunc Sum2(start, end int64) int64 {\n  if start > end {\n    start, end = end, start\n  }\n  return (end - start + 1) * (end + start) / 2\n}\n\nfunc main() {\n  sum1 := timedSumFunc(Sum1)\n  sum2 := timedSumFunc(Sum2)\n  fmt.Printf("%d, %d\\n", sum1(-10000, 10000000), sum2(-10000, 10000000))\n}\n```\n\n```sh\n$ go run time.sum.go\n--- Time Elapsed (main.Sum1): 3.557469ms ---\n--- Time Elapsed (main.Sum2): 291ns ---\n49999954995000, 49999954995000\n```\n\n## HTTP \u76f8\u5173\u7684\u4e00\u4e2a\u793a\u4f8b\n\n\u4fee\u9970\u51fd\u6570\u53ef\u4ee5\u5957\u5a03\uff0c\u591a\u5c42\u5d4c\u5957\n\n```go\npackage main\n\nimport (\n    "fmt"\n    "log"\n    "net/http"\n    "strings"\n)\n\nfunc WithServerHeader(h http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        log.Println("---\x3eWithServerHeader()")\n        w.Header().Set("Server", "HelloServer v0.0.1")\n        h(w, r)\n    }\n}\n\nfunc WithAuthCookie(h http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        log.Println("---\x3eWithAuthCookie()")\n        cookie := &http.Cookie{Name: "Auth", Value: "Pass", Path: "/"}\n        http.SetCookie(w, cookie)\n        h(w, r)\n    }\n}\n\nfunc WithBasicAuth(h http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        log.Println("---\x3eWithBasicAuth()")\n        cookie, err := r.Cookie("Auth")\n        if err != nil || cookie.Value != "Pass" {\n            w.WriteHeader(http.StatusForbidden)\n            return\n        }\n        h(w, r)\n    }\n}\n\nfunc WithDebugLog(h http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        log.Println("---\x3eWithDebugLog")\n        r.ParseForm()\n        log.Println(r.Form)\n        log.Println("path", r.URL.Path)\n        log.Println("scheme", r.URL.Scheme)\n        log.Println(r.Form["url_long"])\n        for k, v := range r.Form {\n            log.Println("key:", k)\n            log.Println("val:", strings.Join(v, ""))\n        }\n        h(w, r)\n    }\n}\n\n// \u8fd9\u4e2a\u51fd\u6570\u662f\u4fee\u9970\u51fd\u6570\u7684\u53c2\u6570\uff0c\u4e5f\u662f\u6700\u91cc\u5c42\u5b9e\u9645\u6267\u884c\u7684\u51fd\u6570\n// \u5b9a\u4e49\u548chttp.HandlerFunc\u662f\u4e00\u6837\u7684\nfunc hello(w http.ResponseWriter, r *http.Request) {\n    log.Printf("Recieved Request %s from %s\\n", r.URL.Path, r.RemoteAddr)\n    fmt.Fprintf(w, "Hello, World! "+r.URL.Path)\n}\n\nfunc main() {\n    http.HandleFunc("/v1/hello", WithServerHeader(WithAuthCookie(hello)))\n    http.HandleFunc("/v2/hello", WithServerHeader(WithBasicAuth(hello)))\n    http.HandleFunc("/v3/hello", WithServerHeader(WithBasicAuth(WithDebugLog(hello))))\n    err := http.ListenAndServe(":8080", nil)\n    if err != nil {\n        log.Fatal("ListenAndServe: ", err)\n    }\n}\n```\n\n## \u591a\u4e2a\u4fee\u9970\u5668\u7684 Pipeline\n\n```go\n// \u4fee\u9970\u51fd\u6570\u7684\u5b9a\u4e49\ntype HttpHandlerDecorator func(http.HandlerFunc) http.HandlerFunc\n\nfunc Handler(h http.HandlerFunc, decors ...HttpHandlerDecorator) http.HandlerFunc {\n    for i := range decors {\n        // \u9006\u5e8f\u6267\u884c\u4fee\u9970\u5668\u51fd\u6570\n        d := decors[len(decors)-1-i] // iterate in reverse\n        h = d(h)\n    }\n    return h\n}\n\nhttp.HandleFunc("/v4/hello", Handler(hello,\n    WithServerHeader, WithBasicAuth, WithDebugLog))\n```\n\n## \u6cdb\u578b\u7684\u4fee\u9970\u5668\n\n```go\nfunc Decorator(decoPtr, fn interface{}) (err error) {\n    var decoratedFunc, targetFunc reflect.Value\n\n    decoratedFunc = reflect.ValueOf(decoPtr).Elem()\n    targetFunc = reflect.ValueOf(fn)\n\n    v := reflect.MakeFunc(targetFunc.Type(),\n            func(in []reflect.Value) (out []reflect.Value) {\n                fmt.Println("before")\n                out = targetFunc.Call(in)\n                fmt.Println("after")\n                return\n            })\n\n    decoratedFunc.Set(v)\n    return\n}\nfunc foo(a, b, c int) int {\n    fmt.Printf("%d, %d, %d \\n", a, b, c)\n    return a + b + c\n}\nfunc bar(a, b string) string {\n    fmt.Printf("%s, %s \\n", a, b)\n    return a + b\n}\n\ntype MyFoo func(int, int, int) int\nvar myfoo MyFoo\nDecorator(&myfoo, foo)\nmyfoo(1, 2, 3)\n\n// or\nmybar := bar\nDecorator(&mybar, bar)\nmybar("hello,", "world!")\n```\n'},sSxO:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u68c0\u67e5\u4e24\u4e2a\u5f15\u7528\u662f\u5426\u6307\u5411\u540c\u4e00\u4e2a\u5bf9\u8c61(\u5185\u5b58\u5730\u5740)\n---\n"},sfWR:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u9762\u5411\u5bf9\u8c61\n---\n\n- \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08Object-Oriented Programming\uff0cOOP\uff09\u662f\u4e00\u79cd\u6a21\u5f0f\u5316\u7f16\u7a0b\u65b9\u5f0f\u3002\n- \u9762\u5411\u5bf9\u8c61\u7684\u7a0b\u5e8f\u662f\u7531\u5bf9\u8c61\u7ec4\u6210\u7684\u3002\u4e00\u4e2a \u5bf9\u8c61 \u5305\u542b\u6570\u636e\u548c\u64cd\u4f5c\u8fd9\u4e9b\u6570\u636e\u7684\u8fc7\u7a0b\u3002\n- \u8fd9\u4e9b\u8fc7\u7a0b\u901a\u5e38\u88ab\u79f0\u4e3a \u65b9\u6cd5 \u6216 \u64cd\u4f5c\u3002\n"},ss58:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6570\u636e\u7ed3\u6784\u548c\u7b97\u6cd5\n---\n"},t2Nz:function(n,t,e){"use strict";e.r(t),t.default="```dart\n// \u5b9a\u4e49\u4e2a\u65b9\u6cd5\u3002\nprintNumber(num aNumber) {\n  print('The number is $aNumber.'); // \u5728\u63a7\u5236\u53f0\u6253\u5370\u5185\u5bb9\u3002\n}\n\n// \u8fd9\u662f\u7a0b\u5e8f\u6267\u884c\u7684\u5165\u53e3\u3002\n// \u6bcf\u4e2a\u5e94\u7528\u90fd\u9700\u8981\u6709\u4e2a\u9876\u7ea7\u7684 main() \u5165\u53e3\u65b9\u6cd5\u624d\u80fd\u6267\u884c\u3002\n// main() \u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u4e3a void \u5e76\u4e14\u6709\u4e2a\u53ef\u9009\u7684 List<String> \u53c2\u6570\u3002\nmain() {\n  var number = 42; // \u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cf\u3002\n  printNumber(number); // \u8c03\u7528\u4e00\u4e2a\u65b9\u6cd5\u3002\n}\n```\n\n- \u6240\u6709\u80fd\u591f\u4f7f\u7528\u53d8\u91cf\u5f15\u7528\u7684\u90fd\u662f\u5bf9\u8c61\uff0c \u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3002\n  \u5728 Dart \u4e2d \u751a\u81f3\u8fde \u6570\u5b57\u3001\u65b9\u6cd5\u548c null \u90fd\u662f\u5bf9\u8c61\u3002\n  \u6240\u6709\u7684\u5bf9\u8c61\u90fd\u7ee7\u627f\u4e8e Object \u7c7b\u3002\n- \u6ca1\u6709\u6307\u5b9a\u7c7b\u578b\u7684\u53d8\u91cf\u7684\u7c7b\u578b\u4e3a dynamic\n- Dart \u652f\u6301\u9876\u7ea7\u65b9\u6cd5 (\u4f8b\u5982 main())\n- Dart \u8fd8\u652f\u6301\u9876\u7ea7\u53d8\u91cf\uff0c\u4ee5\u53ca \u5728\u7c7b\u4e2d\u5b9a\u4e49\u53d8\u91cf\uff08\u9759\u6001\u53d8\u91cf\u548c\u5b9e\u4f8b\u53d8\u91cf\uff09\u3002\n  \u5b9e\u4f8b\u53d8\u91cf\u6709\u65f6\u5019\u88ab\u79f0\u4e4b\u4e3a\u57df\uff08Fields\uff09\u6216\u8005\u5c5e\u6027\uff08Properties\uff09\n- Dart \u6ca1\u6709 public\u3001 protected\u3001 \u548c private \u5173\u952e\u5b57\u3002\n  \u5982\u679c\u4e00\u4e2a\u6807\u8bc6\u7b26\u4ee5 (\\_) \u5f00\u5934\uff0c\u5219\u8be5\u6807\u8bc6\u7b26 \u5728\u5e93\u5185\u662f\u79c1\u6709\u7684\u3002\n"},tIzy:function(n,t,e){"use strict";e.r(t),t.default="C \u8bed\u8a00\u7684\u5185\u5b58\u7ba1\u7406\uff0c\u5206\u6210\u4e24\u90e8\u5206\u3002\n\n- \u4e00\u90e8\u5206\u662f\u7cfb\u7edf\u7ba1\u7406\u7684 (\u201d\u6808\u201c\uff08stack\uff09)\n- \u53e6\u4e00\u90e8\u5206\u662f\u7528\u6237\u624b\u52a8\u7ba1\u7406\u7684 (\u201d\u5806\u201c\uff08heap\uff09)\n\n## `void` \u6307\u9488\n\n```c++\nint x = 10;\nvoid* p = &x; // \u6574\u6570\u6307\u9488\u8f6c\u4e3a void \u6307\u9488\nint* q = p; // void \u6307\u9488\u8f6c\u4e3a\u6574\u6570\u6307\u9488\n\nchar a = 'X';\nvoid* p = &a;\nprintf(\"%c\\n\", *p); // \u62a5\u9519\n```\n\n## `malloc()`\n\n```c++\n// stdlib.h\nvoid* malloc(size_t size)\n```\n\n```c++\nint* p = malloc(sizeof(int));\nint* p = (int*) malloc(sizeof(int));\nint* p = (int*) malloc(sizeof(*p));\n\n*p = 12;\nprintf(\"%d\\n\", *p); // 12\n```\n\n`malloc()`\u5206\u914d\u5185\u5b58\u6709\u53ef\u80fd\u5206\u914d\u5931\u8d25\uff0c\u8fd9\u65f6\u8fd4\u56de\u5e38\u91cf `NULL`\u3002\n`Null` \u7684\u503c\u4e3a 0\uff0c\u662f\u4e00\u4e2a\u65e0\u6cd5\u8bfb\u5199\u7684\u5185\u5b58\u5730\u5740\uff0c\u53ef\u4ee5\u7406\u89e3\u6210\u4e00\u4e2a\u4e0d\u6307\u5411\u4efb\u4f55\u5730\u65b9\u7684\u6307\u9488\n\n```c++\nint* p = malloc(sizeof(int));\n\nif (p == NULL) {\n  // \u5185\u5b58\u5206\u914d\u5931\u8d25\n}\n\n// or\nif (!p) {\n  //...\n}\n```\n\n```c++\n// p\u662f\u4e00\u4e2a\u6574\u6570\u6307\u9488\uff0c\u6307\u5411\u4e00\u6bb5\u53ef\u4ee5\u653e\u7f6e10\u4e2a\u6574\u6570\u7684\u5185\u5b58\nint* p = (int*) malloc(sizeof(int) * 10);\nfor (int i = 0; i < 10; i++)\n  p[i] = i * 5;\n\n// \u5b57\u7b26\u4e32\u521d\u59cb\u5316\u53ef\u4ee5\u4f7f\u7528strcpy()\u51fd\u6570\nchar* p = malloc(4);\nstrcpy(p, \"abc\");\n// or\np = \"abc\";\n```\n\n```c++\n// malloc()\u53ef\u4ee5\u6839\u636e\u53d8\u91cfn\u7684\u4e0d\u540c\uff0c\u52a8\u6001\u4e3a\u6570\u7ec4\u5206\u914d\u4e0d\u540c\u7684\u5927\u5c0f\nint* p = (int*) malloc(n * sizeof(int));\n```\n\n## `free()`\n\n`free()`\u7528\u4e8e\u91ca\u653e`malloc()`\u51fd\u6570\u5206\u914d\u7684\u5185\u5b58\n\n```c++\n// stdlib.h\nvoid free(void* block)\n```\n\n```c++\nint* p = (int*) malloc(sizeof(int));\n*p = 12;\nfree(p);\n```\n\n## `calloc()`\n\n- `calloc()`\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u67d0\u79cd\u6570\u636e\u7c7b\u578b\u7684\u503c\u7684\u6570\u91cf\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8be5\u6570\u636e\u7c7b\u578b\u7684\u5355\u4f4d\u5b57\u8282\u957f\u5ea6\u3002\n- `calloc()`\u7684\u8fd4\u56de\u503c\u4e5f\u662f\u4e00\u4e2a `void` \u6307\u9488\u3002\u5206\u914d\u5931\u8d25\u65f6\uff0c\u8fd4\u56de `NULL`\n- `calloc()`\u4f1a\u5c06\u6240\u5206\u914d\u7684\u5185\u5b58\u5168\u90e8\u521d\u59cb\u5316\u4e3a 0\u3002\n  - `malloc()`\u4e0d\u4f1a\u5bf9\u5185\u5b58\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u5982\u679c\u60f3\u8981\u521d\u59cb\u5316\u4e3a 0\uff0c\u8fd8\u8981\u989d\u5916\u8c03\u7528 `memset()`\u51fd\u6570\n- `calloc()`\u5206\u914d\u7684\u5185\u5b58\u5757\uff0c\u4e5f\u8981\u4f7f\u7528`free()`\u91ca\u653e\n\n```c++\n// stdlib.h\nvoid* calloc(size_t n, size_t size);\n```\n\n```c++\nint* p = calloc(10, sizeof(int));\n\n// \u7b49\u540c\u4e8e\nint* p = malloc(sizeof(int) * 10);\nmemset(p, 0, sizeof(int) * 10);\n```\n\n### `realloc()`\n\n- `realloc()`\u53ef\u80fd\u8fd4\u56de\u4e00\u4e2a\u5168\u65b0\u7684\u5730\u5740\uff0c\u4e5f\u53ef\u80fd\u8fd4\u56de\u8ddf\u539f\u6765\u4e00\u6837\u7684\u5730\u5740\u3002\n- `realloc()`\u4e0d\u4f1a\u5bf9\u5185\u5b58\u5757\u8fdb\u884c\u521d\u59cb\u5316\n- `block`\uff1a\u5df2\u7ecf\u5206\u914d\u597d\u7684\u5185\u5b58\u5757\u6307\u9488\uff08\u7531`malloc()`\u6216`calloc()`\u6216`realloc()`\u4ea7\u751f\uff09\u3002\n- `size`\uff1a\u8be5\u5185\u5b58\u5757\u7684\u65b0\u5927\u5c0f\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\u3002\n\n```c++\n// stdlib.h\nvoid* realloc(void* block, size_t size)\n```\n\n```c++\nint* b;\n\nb = malloc(sizeof(int) * 10);\nb = realloc(b, sizeof(int) * 2000);\n```\n\n```c++\n// realloc()\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u53ef\u4ee5\u662f NULL\uff0c\u8fd9\u65f6\u5c31\u76f8\u5f53\u4e8e\u65b0\u5efa\u4e00\u4e2a\u6307\u9488\u3002\n// \u5982\u679crealloc()\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f0\uff0c\u5c31\u4f1a\u91ca\u653e\u6389\u5185\u5b58\u5757\u3002\nchar* p = realloc(NULL, 3490);\n// \u7b49\u540c\u4e8e\nchar* p = malloc(3490);\n```\n\n## `restrict` \u8bf4\u660e\u7b26\n\n\u4f7f\u7528 `restrict` \u8bf4\u660e\u7b26\uff0c\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8be5\u5757\u5185\u5b58\u533a\u57df\u53ea\u6709\u5f53\u524d\u6307\u9488\u4e00\u79cd\u8bbf\u95ee\u65b9\u5f0f\n\n```c++\nint* restrict p;\np = malloc(sizeof(int));\n\nint* q = p;\n*q = 0; // \u672a\u5b9a\u4e49\u884c\u4e3a\n```\n\n## `memcpy()`\n\n- `dest` \u662f\u76ee\u6807\u5730\u5740\uff0c`source` \u662f\u6e90\u5730\u5740\n- `dest` \u548c `source` \u90fd\u662f `void` \u6307\u9488\uff0c\u8868\u793a\u8fd9\u91cc\u4e0d\u9650\u5236\u6307\u9488\u7c7b\u578b\n- \u4e24\u8005\u90fd\u6709 `restrict` \u5173\u952e\u5b57\uff0c\u8868\u793a\u8fd9\u4e24\u4e2a\u5185\u5b58\u5757\u4e0d\u5e94\u8be5\u6709\u4e92\u76f8\u91cd\u53e0\u7684\u533a\u57df\n- `memcpy()`\u7684\u8fd4\u56de\u503c\u662f\u7b2c\u4e00\u4e2a\u53c2\u6570\uff0c\u5373\u76ee\u6807\u5730\u5740\u7684\u6307\u9488\n- `memcpy()`\u53ef\u4ee5\u53d6\u4ee3`strcpy()`\u8fdb\u884c\u5b57\u7b26\u4e32\u62f7\u8d1d\n\n```c++\n// string.h\nvoid* memcpy(\n  void* restrict dest,\n  void* restrict source,\n  size_t n\n);\n```\n\n```c++\n// \u5b57\u7b26\u4e32s\u6240\u5728\u7684\u5185\u5b58\uff0c\u88ab\u62f7\u8d1d\u5230\u5b57\u7b26\u6570\u7ec4t\u6240\u5728\u7684\u5185\u5b58\n#include <stdio.h>\n#include <string.h>\nint main(void) {\n  char s[] = \"Goats!\";\n  char t[100];\n  memcpy(t, s, sizeof(s));  // \u62f7\u8d1d7\u4e2a\u5b57\u8282\uff0c\u5305\u62ec\u7ec8\u6b62\u7b26\n  printf(\"%s\\n\", t);  // \"Goats!\"\n  return 0;\n}\n```\n\n```c++\nchar* s = \"hello world\";\nsize_t len = strlen(s) + 1;\nchar *c = malloc(len);\nif (c) {\n  // strcpy() \u7684\u5199\u6cd5\n  strcpy(c, s);\n  // memcpy() \u7684\u5199\u6cd5\n  memcpy(c, s, len);\n}\n```\n\n```c++\n// \u81ea\u5b9a\u4e49\u4e00\u4e2a\u590d\u5236\u5185\u5b58\u7684\u51fd\u6570\nvoid* my_memcpy(void* dest, void* src, int byte_count) {\n  char* s = src;\n  char* d = dest;\n  while (byte_count--) {\n    // *d++ = *s++ \u8bed\u53e5\u76f8\u5f53\u4e8e\u5148\u6267\u884c *d = *s\uff08\u6e90\u5b57\u8282\u7684\u503c\u590d\u5236\u7ed9\u76ee\u6807\u5b57\u8282\uff09\uff0c\n    // \u7136\u540e\u5404\u81ea\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u5b57\u8282\u3002\n    *d++ = *s++;\n  }\n  return dest;\n}\n```\n\n## `memmove()`\n\n`memmove()`\u51fd\u6570\u7528\u4e8e\u5c06\u4e00\u6bb5\u5185\u5b58\u6570\u636e\u590d\u5236\u5230\u53e6\u4e00\u6bb5\u5185\u5b58\u3002\n\u5b83\u8ddf `memcpy()`\u7684\u4e3b\u8981\u533a\u522b\u662f\uff0c\u5b83\u5141\u8bb8\u76ee\u6807\u533a\u57df\u4e0e\u6e90\u533a\u57df\u6709\u91cd\u53e0\u3002\n\u5982\u679c\u53d1\u751f\u91cd\u53e0\uff0c\u6e90\u533a\u57df\u7684\u5185\u5bb9\u4f1a\u88ab\u66f4\u6539\uff1b\u5982\u679c\u6ca1\u6709\u91cd\u53e0\uff0c\u5b83\u4e0e `memcpy()`\u884c\u4e3a\u76f8\u540c\u3002\n\n```c++\n// string.h\nvoid* memmove(\n  void* dest,\n  void* source,\n  size_t n\n);\n```\n\n```c++\n// \u4ece\u6570\u7ec4\u6210\u5458a[1]\u5f00\u59cb\u768499\u4e2a\u6210\u5458\uff0c\u90fd\u5411\u524d\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\nint a[100];\nmemmove(&a[0], &a[1], 99 * sizeof(int));\n\n// \u4ece\u5b57\u7b26\u4e32x\u76845\u53f7\u4f4d\u7f6e\u5f00\u59cb\u768410\u4e2a\u5b57\u8282\uff0c\u5c31\u662f\u201cSweet Home\u201d\uff0cmemmove()\u5c06\u5176\u524d\u79fb\u52300\u53f7\u4f4d\u7f6e\nchar x[] = \"Home Sweet Home\";\n// \u8f93\u51fa Sweet Home Home\nprintf(\"%s\\n\", (char *) memmove(x, &x[5], 10));\n```\n\n## `memcmp()`\n\n```c++\n// string.h\nint memcmp(\n  const void* s1,\n  const void* s2,\n  size_t n\n);\n```\n\n```c++\nchar* s1 = \"abc\";\nchar* s2 = \"acd\";\nint r = memcmp(s1, s2, 3); // \u5c0f\u4e8e 0\n```\n\n```c++\nchar s1[] = {'b', 'i', 'g', '\\0', 'c', 'a', 'r'};\nchar s2[] = {'b', 'i', 'g', '\\0', 'c', 'a', 't'};\n\nif (memcmp(s1, s2, 3) == 0) // true\nif (memcmp(s1, s2, 4) == 0) // true\nif (memcmp(s1, s2, 7) == 0) // false\n```\n"},tJfb:function(n,t,e){"use strict";e.r(t),t.default='```js\ntypeof undefined; // undefined\ntypeof []; // object\ntypeof "123"; // string\ntypeof null; // object\n\n// instanceof\u8fd0\u7b97\u7b26\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u8868\u793a\u5bf9\u8c61\u662f\u5426\u4e3a\u67d0\u4e2a\u6784\u9020\u51fd\u6570\u7684\u5b9e\u4f8b\u3002\nconst s = new String("123");\ns instanceof String; // true\ns instanceof Object; // true\n\nv instanceof Vehicle;\n// \u7b49\u540c\u4e8e\nVehicle.prototype.isPrototypeOf(v);\n\nObject.prototype.toString.call(2); // "[object Number]"\nObject.prototype.toString.call(""); // "[object String]"\nObject.prototype.toString.call(true); // "[object Boolean]"\nObject.prototype.toString.call(undefined); // "[object Undefined]"\nObject.prototype.toString.call(null); // "[object Null]"\nObject.prototype.toString.call(Math); // "[object Math]"\nObject.prototype.toString.call({}); // "[object Object]"\nObject.prototype.toString.call([]); // "[object Array]"\n\nvar type = function(o) {\n  var s = Object.prototype.toString.call(o);\n  return s.match(/\\[object (.*?)\\]/)[1].toLowerCase();\n};\ntype({}); // "object"\ntype([]); // "array"\ntype(5); // "number"\ntype(null); // "null"\ntype(); // "undefined"\ntype(/abcd/); // "regex"\ntype(new Date()); // "date"\n\n[\n  "Null",\n  "Undefined",\n  "Object",\n  "Array",\n  "String",\n  "Number",\n  "Boolean",\n  "Function",\n  "RegExp",\n].forEach(function(t) {\n  type["is" + t] = function(o) {\n    return type(o) === t.toLowerCase();\n  };\n});\ntype.isObject({}); // true\ntype.isNumber(NaN); // true\ntype.isRegExp(/abc/); // true\n\nfunction type(obj) {\n  return Reflect.apply(Object.prototype.toString, obj, [])\n    .replace(/^\\[object\\s(\\w+)\\]$/, "$1")\n    .toLowerCase();\n}\ntype(new String("123")); // string\n```\n'},tR3r:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5de5\u4f5c\u6c60\n---\n"},tkFb:function(n,t,e){"use strict";e.r(t),t.default='## Union \u7ed3\u6784\n\n```c++\nunion quantity {\n  short count;\n  float weight;\n  float volume;\n};\n\n// \u5199\u6cd5\u4e00\nunion quantity q;\nq.count = 4;\n\n// \u5199\u6cd5\u4e8c\nunion quantity q = {.count=4};\n\n// \u5199\u6cd5\u4e09\n// \u4e0d\u6307\u5b9a\u5c5e\u6027\u540d\uff0c\u5c31\u4f1a\u8d4b\u503c\u7ed9\u7b2c\u4e00\u4e2a\u5c5e\u6027\nunion quantity q = {4};\n\nprintf("count is %i\\n", q.count); // count is 4\nprintf("weight is %f\\n", q.weight); // \u672a\u5b9a\u4e49\u884c\u4e3a\n\nq.weight = 0.5;\nprintf("weight is %f\\n", q.weight); // weight is 0.5\n```\n'},tlFP:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u53d8\u53c2\u51fd\u6570\n---"},u0fP:function(n,t,e){"use strict";e.r(t),t.default='\u7a0b\u5e8f\u7f16\u8bd1\u9636\u6bb5\u5c31\u786e\u5b9a\u4e0b\u6765\u7684\u503c\uff0c\u800c\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u65e0\u6cd5\u6539\u53d8\u8be5\u503c\u3002\n\u76ee\u524d\u5e38\u91cf\u58f0\u660e\u7684\u503c\u5fc5\u987b\u662f\u4e00\u4e2a\u6570\u5b57\u503c\u3001\u5b57\u7b26\u4e32\u6216\u8005\u4e00\u4e2a\u56fa\u5b9a\u7684 boolean \u503c\u3002\n\n- \u5e38\u91cf\u7684\u58f0\u660e\u4e0e\u53d8\u91cf\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u662f\u4f7f\u7528 const \u5173\u952e\u5b57\u3002\n- \u5e38\u91cf\u53ef\u4ee5\u662f\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u3001\u5e03\u5c14\u503c\u6216\u6570\u503c\u3002\n- \u5e38\u91cf\u4e0d\u80fd\u7528 := \u8bed\u6cd5\u58f0\u660e\u3002\n- \u5b83\u4eec\u5728\u7f16\u8bd1\u65f6\u521b\u5efa\n- \u5b9a\u4e49\u5b83\u4eec\u7684\u8868\u8fbe\u5f0f\u5fc5\u987b\u4e5f\u662f\u53ef\u88ab\u7f16\u8bd1\u5668\u6c42\u503c\u7684\u5e38\u91cf\u8868\u8fbe\u5f0f\n\n```go\npackage main\nimport "fmt"\nconst Pi = 3.14\nfunc main() {\n  const World = "\u4e16\u754c"\n  fmt.Println("Hello", World)\n  fmt.Println("Happy", Pi, "Day")\n  const Truth = true\n  fmt.Println("Go rules?", Truth)\n}\n\n\n// \u6570\u503c\u5e38\u91cf\u662f\u9ad8\u7cbe\u5ea6\u7684 \u503c\u3002\npackage main\nimport "fmt"\nconst (\n  // \u5c06 1 \u5de6\u79fb 100 \u4f4d\u6765\u521b\u5efa\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6570\u5b57\n  // \u5373\u8fd9\u4e2a\u6570\u7684\u4e8c\u8fdb\u5236\u662f 1 \u540e\u9762\u8ddf\u7740 100 \u4e2a 0\n  Big = 1 << 100\n  // \u518d\u5f80\u53f3\u79fb 99 \u4f4d\uff0c\u5373 Small = 1 << 1\uff0c\u6216\u8005\u8bf4 Small = 2\n  Small = Big >> 99\n)\nfunc needInt(x int) int { return x*10 + 1 }\nfunc needFloat(x float64) float64 {\n  return x * 0.1\n}\nfunc main() {\n  fmt.Println(needInt(Small))\n  fmt.Println(needFloat(Small))\n  fmt.Println(needFloat(Big))\n}\n\n\nconst (\n  a = 1\n  b\n  c = 2\n  d\n)\nfmt.Println(a, b, c, d) // "1 1 2 2"\n\n\n// iota\u5c06\u4f1a\u88ab\u7f6e\u4e3a0\uff0c\u7136\u540e\u5728\u6bcf\u4e00\u4e2a\u6709\u5e38\u91cf\u58f0\u660e\u7684\u884c\u52a01\n// \u5468\u65e5\u5c06\u5bf9\u5e940\uff0c\u5468\u4e00\u4e3a1\uff0c\u5982\u6b64\u7b49\u7b49\ntype Weekday int\nconst (\n  Sunday Weekday = iota\n  Monday\n  Tuesday\n  Wednesday\n  Thursday\n  Friday\n  Saturday\n)\n\n// \u968f\u7740iota\u7684\u9012\u589e\uff0c\u6bcf\u4e2a\u5e38\u91cf\u5bf9\u5e94\u8868\u8fbe\u5f0f1 << iota\uff0c\n// \u662f\u8fde\u7eed\u76842\u7684\u5e42\uff0c\u5206\u522b\u5bf9\u5e94\u4e00\u4e2abit\u4f4d\u7f6e\u3002\ntype Flags uint\nconst (\n  FlagUp Flags = 1 << iota // is up\n  FlagBroadcast            // supports broadcast access capability\n  FlagLoopback             // is a loopback interface\n  FlagPointToPoint         // belongs to a point-to-point link\n  FlagMulticast            // supports multicast access capability\n)\n\n\n// \u65e0\u7c7b\u578b\u5e38\u91cf\nvar x float32 = math.Pi\nvar y float64 = math.Pi\nvar z complex128 = math.Pi\n```\n'},u9yX:function(n,t,e){"use strict";e.r(t),t.default="```dart\nprint('The number is $aNumber.'); // \u5728\u63a7\u5236\u53f0\u6253\u5370\u5185\u5bb9\u3002\n```\n"},uGim:function(n,t,e){"use strict";e.r(t),t.default='```c++\n#include <stdio.h>\nint main(void) {\n  FILE* fp;\n  char c;\n\n  fp = fopen("hello.txt", "r");\n  if (fp == NULL) {\n    return -1;\n  }\n\n  c = fgetc(fp);\n  printf("%c\\n", c);\n\n  fclose(fp);\n  return 0;\n}\n```\n\n## \u6807\u51c6\u6d41\n\n- `stdin`\uff08\u6807\u51c6\u8f93\u5165\uff09\uff1a\u9ed8\u8ba4\u6765\u6e90\u4e3a\u952e\u76d8\uff0c\u6587\u4ef6\u6307\u9488\u7f16\u53f7\u4e3a`0`\u3002\n- `stdout`\uff08\u6807\u51c6\u8f93\u51fa\uff09\uff1a\u9ed8\u8ba4\u76ee\u7684\u5730\u4e3a\u663e\u793a\u5668\uff0c\u6587\u4ef6\u6307\u9488\u7f16\u53f7\u4e3a`1`\u3002\n- `stderr`\uff08\u6807\u51c6\u9519\u8bef\uff09\uff1a\u9ed8\u8ba4\u76ee\u7684\u5730\u4e3a\u663e\u793a\u5668\uff0c\u6587\u4ef6\u6307\u9488\u7f16\u53f7\u4e3a`2`\u3002\n\n```sh\ndemo < in.dat\ndemo > out.dat\ndemo >> out.dat\ndemo > out.dat 2> err.txt # \u6807\u51c6\u9519\u8bef\u7684\u91cd\u5b9a\u5411\u7b26\u53f7\u662f2>\n\ndemo < in.dat > out.dat\ndemo > out.dat < in.dat\nrandom | sum # \u5c06\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u51fastdout\uff0c\u6307\u5411\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u7684\u6807\u51c6\u8f93\u5165stdin\n```\n\n## EOF\n\n\u5934\u6587\u4ef6`stdio.h`\u4e3a\u8fd9\u4e2a\u7279\u6b8a\u503c\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5b8f`EOF`\uff08end of file \u7684\u7f29\u5199\uff09\n\n\u4e0d\u50cf\u5b57\u7b26\u4e32\u7ed3\u5c3e\u771f\u7684\u5b58\u50a8\u4e86\\0 \u8fd9\u4e2a\u503c\uff0cEOF \u5e76\u4e0d\u5b58\u50a8\u5728\u6587\u4ef6\u7ed3\u5c3e\uff0c\u6587\u4ef6\u4e2d\u5e76\u4e0d\u5b58\u5728\u8fd9\u4e2a\u503c\uff0c\u5b8c\u5168\u662f\u6587\u4ef6\u64cd\u4f5c\u51fd\u6570\u53d1\u73b0\u5230\u8fbe\u4e86\u6587\u4ef6\u7ed3\u5c3e\uff0c\u800c\u8fd4\u56de\u8fd9\u4e2a\u503c\n'},uMvC:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5217\u8868\u67e5\u627e\n---\n"},"uY+8":function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u547d\u4ee4\u884c\u7a0b\u5e8f\n---\n"},vA6k:function(n,t,e){"use strict";e.r(t),t.default="Rust \u4e2d\u7684\u6bcf\u4e00\u4e2a\u5f15\u7528\u90fd\u6709\u5176 \u751f\u547d\u5468\u671f\uff08lifetime\uff09\uff0c\u4e5f\u5c31\u662f\u5f15\u7528\u4fdd\u6301\u6709\u6548\u7684\u4f5c\u7528\u57df\u3002\n\n## \u60ac\u5782\u5f15\u7528\n\n```rust\n{\n    let r;\n    {\n        let x = 5;\n        r = &x;\n    }\n    println!(\"r: {}\", r);\n}\n```\n\n```rust\n// \u9519\u8bef\n// \u56e0\u4e3a Rust \u5e76\u4e0d\u77e5\u9053\u5c06\u8981\u8fd4\u56de\u7684\u5f15\u7528\u662f\u6307\u5411 x \u6216 y\u3002\nfn longest(x: &str, y: &str) -> &str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\nfn main() {\n    // string1 \u76f4\u5230\u5916\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u90fd\u662f\u6709\u6548\u7684\n    let string1 = String::from(\"long string is long\");\n    {\n        // string2 \u5219\u5728\u5185\u90e8\u4f5c\u7528\u57df\u4e2d\u662f\u6709\u6548\u7684\n        let string2 = String::from(\"xyz\");\n        let result = longest(string1.as_str(), string2.as_str());\n        println!(\"The longest string is {}\", result);\n    }\n}\n```\n\n## \u751f\u547d\u5468\u671f\u6807\u6ce8\u8bed\u6cd5\n\n- \u751f\u547d\u5468\u671f\u6807\u6ce8\u5e76\u4e0d\u6539\u53d8\u4efb\u4f55\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u7684\u957f\u77ed\u3002\n- \u751f\u547d\u5468\u671f\u53c2\u6570\u540d\u79f0\u5fc5\u987b\u4ee5\u6487\u53f7\uff08`'`\uff09\u5f00\u5934\uff0c\u5176\u540d\u79f0\u901a\u5e38\u5168\u662f\u5c0f\u5199\uff0c\u7c7b\u4f3c\u4e8e\u6cdb\u578b\u5176\u540d\u79f0\u975e\u5e38\u77ed\u3002\n\n```rust\n&i32        // \u5f15\u7528\n&'a i32     // \u5e26\u6709\u663e\u5f0f\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\n&'a mut i32 // \u5e26\u6709\u663e\u5f0f\u751f\u547d\u5468\u671f\u7684\u53ef\u53d8\u5f15\u7528\n```\n\n```rust\n// \u51fd\u6570\u5b9a\u4e49\u6307\u5b9a\u4e86\u7b7e\u540d\u4e2d\u6240\u6709\u7684\u5f15\u7528\u5fc5\u987b\u6709\u76f8\u540c\u7684\u751f\u547d\u5468\u671f 'a\n// \u6211\u4eec\u5e76\u6ca1\u6709\u6539\u53d8\u4efb\u4f55\u4f20\u5165\u503c\u6216\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\uff0c\n// \u800c\u662f\u6307\u51fa\u4efb\u4f55\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u7ea6\u675f\u6761\u4ef6\u7684\u503c\u90fd\u5c06\u88ab\u501f\u7528\u68c0\u67e5\u5668\u62d2\u7edd\u3002\n// longest \u51fd\u6570\u5e76\u4e0d\u9700\u8981\u77e5\u9053 x \u548c y \u5177\u4f53\u4f1a\u5b58\u5728\u591a\u4e45\uff0c\n// \u800c\u53ea\u9700\u8981\u77e5\u9053\u6709\u67d0\u4e2a\u53ef\u4ee5\u88ab 'a \u66ff\u4ee3\u7684\u4f5c\u7528\u57df\u5c06\u4f1a\u6ee1\u8db3\u8fd9\u4e2a\u7b7e\u540d\u3002\n// \u88ab 'a \u6240\u66ff\u4ee3\u7684\u5177\u4f53\u751f\u547d\u5468\u671f\u662f x \u7684\u4f5c\u7528\u57df\u4e0e y \u7684\u4f5c\u7528\u57df\u76f8\u91cd\u53e0\u7684\u90a3\u4e00\u90e8\u5206\u3002\n// \u6362\u4e00\u79cd\u8bf4\u6cd5\u5c31\u662f\u6cdb\u578b\u751f\u547d\u5468\u671f 'a \u7684\u5177\u4f53\u751f\u547d\u5468\u671f\u7b49\u540c\u4e8e x \u548c y \u7684\u751f\u547d\u5468\u671f\u4e2d\u8f83\u5c0f\u7684\u90a3\u4e00\u4e2a\u3002\n// \u6240\u4ee5\u8fd4\u56de\u7684\u5f15\u7528\u503c\u5c31\u80fd\u4fdd\u8bc1\u5728 x \u548c y \u4e2d\u8f83\u77ed\u7684\u90a3\u4e2a\u751f\u547d\u5468\u671f\u7ed3\u675f\u4e4b\u524d\u4fdd\u6301\u6709\u6548\u3002\nfn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```\n\n```rust\n// \u9519\u8bef\n// longest \u51fd\u6570\u8fd4\u56de\u7684\u5f15\u7528\u7684\u751f\u547d\u5468\u671f\u5e94\u8be5\u4e0e\u4f20\u5165\u53c2\u6570\u7684\u751f\u547d\u5468\u671f\u4e2d\u8f83\u77ed\u90a3\u4e2a\u4fdd\u6301\u4e00\u81f4\u3002\n// \u56e0\u6b64\uff0c\u501f\u7528\u68c0\u67e5\u5668\u4e0d\u5141\u8bb8\u793a\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u4f1a\u5b58\u5728\u65e0\u6548\u7684\u5f15\u7528\u3002\nfn main() {\n    let string1 = String::from(\"long string is long\");\n    let result;\n    {\n        let string2 = String::from(\"xyz\");\n        result = longest(string1.as_str(), string2.as_str());\n    }\n    // result \u6709\u53ef\u80fd\u5f15\u7528 string2\uff0c \u4f46string2\u5df2\u7ecf\u79bb\u5f00\u4f5c\u7528\u57df\n    println!(\"The longest string is {}\", result);\n}\n```\n\n```rust\n// \u4e3a\u53c2\u6570 x \u548c\u8fd4\u56de\u503c\u6307\u5b9a\u4e86\u751f\u547d\u5468\u671f\u53c2\u6570 'a\uff0c\u4e0d\u8fc7\u6ca1\u6709\u4e3a\u53c2\u6570 y \u6307\u5b9a\uff0c\n// \u56e0\u4e3a y \u7684\u751f\u547d\u5468\u671f\u4e0e\u53c2\u6570 x \u548c\u8fd4\u56de\u503c\u7684\u751f\u547d\u5468\u671f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u3002\nfn longest<'a>(x: &'a str, y: &str) -> &'a str {\n    x\n}\n```\n\n## \u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u7684\u751f\u547d\u5468\u671f\u6807\u6ce8\n\n```rust\n// \u5b9a\u4e49\u5305\u542b\u5f15\u7528\u7684\u7ed3\u6784\u4f53\uff0c\u9700\u8981\u4e3a\u7ed3\u6784\u4f53\u5b9a\u4e49\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5f15\u7528\u6dfb\u52a0\u751f\u547d\u5468\u671f\u6807\u6ce8\u3002\nstruct ImportantExcerpt<'a> {\n    part: &'a str,\n}\nfn main() {\n    let novel = String::from(\"Call me Ishmael. Some years ago...\");\n    let first_sentence = novel.split('.')\n        .next()\n        .expect(\"Could not find a '.'\");\n    let i = ImportantExcerpt { part: first_sentence };\n}\n```\n\n## \u751f\u547d\u5468\u671f\u7701\u7565\uff08Lifetime Elision\uff09\n\n\u7f16\u8bd1\u5668\u91c7\u7528\u4e09\u6761\u89c4\u5219\u6765\u5224\u65ad\u5f15\u7528\u4f55\u65f6\u4e0d\u9700\u8981\u660e\u786e\u7684\u6807\u6ce8\u3002\n\u7b2c\u4e00\u6761\u89c4\u5219\u9002\u7528\u4e8e\u8f93\u5165\u751f\u547d\u5468\u671f\uff0c\u540e\u4e24\u6761\u89c4\u5219\u9002\u7528\u4e8e\u8f93\u51fa\u751f\u547d\u5468\u671f\u3002\n\u5982\u679c\u7f16\u8bd1\u5668\u68c0\u67e5\u5b8c\u8fd9\u4e09\u6761\u89c4\u5219\u540e\u4ecd\u7136\u5b58\u5728\u6ca1\u6709\u8ba1\u7b97\u51fa\u751f\u547d\u5468\u671f\u7684\u5f15\u7528\uff0c\u7f16\u8bd1\u5668\u5c06\u4f1a\u505c\u6b62\u5e76\u751f\u6210\u9519\u8bef\u3002\n\u8fd9\u4e9b\u89c4\u5219\u9002\u7528\u4e8e fn \u5b9a\u4e49\uff0c\u4ee5\u53ca impl \u5757\u3002\n\n- \u7b2c\u4e00\u6761\u89c4\u5219\u662f\u6bcf\u4e00\u4e2a\u662f\u5f15\u7528\u7684\u53c2\u6570\u90fd\u6709\u5b83\u81ea\u5df1\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u3002\n- \u7b2c\u4e8c\u6761\u89c4\u5219\u662f\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\u53c2\u6570\uff0c\u90a3\u4e48\u5b83\u88ab\u8d4b\u4e88\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f\u53c2\u6570\n- \u7b2c\u4e09\u6761\u89c4\u5219\u662f\u5982\u679c\u65b9\u6cd5\u6709\u591a\u4e2a\u8f93\u5165\u751f\u547d\u5468\u671f\u53c2\u6570\u5e76\u4e14\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570\u662f`&self` \u6216 `&mut self`\uff0c\u8bf4\u660e\u662f\u4e2a\u5bf9\u8c61\u7684\u65b9\u6cd5(method), \u90a3\u4e48\u6240\u6709\u8f93\u51fa\u751f\u547d\u5468\u671f\u53c2\u6570\u88ab\u8d4b\u4e88 `self` \u7684\u751f\u547d\u5468\u671f\u3002\n\n```rust\nfn first_word(s: &str) -> &str {\n    let bytes = s.as_bytes();\n    for (i, &item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &s[0..i];\n        }\n    }\n    &s[..]\n}\n// \u5b8c\u6574\u51fd\u6570\u7b7e\u540d\u5982\u4e0b\nfn first_word<'a>(s: &'a str) -> &'a str {}\n```\n\n```rust\nfn first_word(s: &str) -> &str {}\nfn first_word<'a>(s: &'a str) -> &str {} // \u7b2c\u4e00\u6761\u89c4\u5219\nfn first_word<'a>(s: &'a str) -> &'a str {} // \u7b2c\u4e8c\u6761\u89c4\u5219\n\nfn longest(x: &str, y: &str) -> &str {}\nfn longest<'a, 'b>(x: &'a str, y: &'b str) -> &str {} // \u7b2c\u4e00\u6761\u89c4\u5219\n```\n\n## \u65b9\u6cd5\u5b9a\u4e49\u4e2d\u7684\u751f\u547d\u5468\u671f\u6807\u6ce8\n\n```rust\n// impl \u548c\u7c7b\u578b\u540d\u79f0\u4e4b\u540e\u7684\u751f\u547d\u5468\u671f\u53c2\u6570\u662f\u5fc5\u8981\u7684\nimpl<'a> ImportantExcerpt<'a> {\n    // \u4f9d\u636e\u7b2c\u4e00\u6761\u89c4\u5219\uff0c\u53ef\u4ee5\u7701\u7565 self \u5f15\u7528\u7684\u751f\u547d\u5468\u671f\n    fn level(&self) -> i32 {\n        3\n    }\n}\n```\n\n```rust\nimpl<'a> ImportantExcerpt<'a> {\n    // \u7b2c\u4e00\u6761\u751f\u547d\u5468\u671f\u7701\u7565\u89c4\u5219\u5e76\u7ed9\u4e88 &self \u548c announcement \u4ed6\u4eec\u5404\u81ea\u7684\u751f\u547d\u5468\u671f\u3002\n    // \u56e0\u4e3a\u5176\u4e2d\u4e00\u4e2a\u53c2\u6570\u662f &self\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u88ab\u8d4b\u4e88\u4e86 &self \u7684\u751f\u547d\u5468\u671f\n    fn announce_and_return_part(&self, announcement: &str) -> &str {\n        println!(\"Attention please: {}\", announcement);\n        self.part\n    }\n}\n```\n\n## \u9759\u6001\u751f\u547d\u5468\u671f\n\n`'static`\uff0c\u5176\u751f\u547d\u5468\u671f\u80fd\u591f\u5b58\u6d3b\u4e8e\u6574\u4e2a\u7a0b\u5e8f\u671f\u95f4\u3002\n\n```rust\nlet s: &'static str = \"I have a static lifetime.\";\n```\n\n## \u7ed3\u5408\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u3001trait bounds \u548c\u751f\u547d\u5468\u671f\n\n```rust\nuse std::fmt::Display;\nfn longest_with_an_announcement<'a, T>(x: &'a str, y: &'a str, ann: T) -> &'a str\n    where T: Display\n{\n    println!(\"Announcement! {}\", ann);\n    if x.len() > y.len() {\n        x\n    } else {\n        y\n    }\n}\n```"},vNts:function(n,t,e){"use strict";e.r(t),t.default='select \u8bed\u53e5\u4f7f\u4e00\u4e2a Go \u7a0b\u53ef\u4ee5\u7b49\u5f85\u591a\u4e2a\u901a\u4fe1\u64cd\u4f5c\u3002\nselect \u4f1a\u963b\u585e\u5230\u67d0\u4e2a\u5206\u652f\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u4e3a\u6b62\uff0c\u8fd9\u65f6\u5c31\u4f1a\u6267\u884c\u8be5\u5206\u652f\u3002\n\u5f53\u591a\u4e2a\u5206\u652f\u90fd\u51c6\u5907\u597d\u65f6\u4f1a\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6267\u884c\u3002\n\n```go\npackage main\nimport "fmt"\nfunc fibonacci(c, quit chan int) {\n  x, y := 0, 1\n  for {\n    select {\n      case c <- x:\n        x, y = y, x+y\n      case <-quit:\n        fmt.Println("quit")\n        return\n    }\n  }\n}\nfunc main() {\n  c := make(chan int)\n  quit := make(chan int)\n  go func() {\n    for i := 0; i < 10; i++ {\n      fmt.Println(<-c)\n    }\n    quit <- 0\n  }() // \u7acb\u5373\u6267\u884c\u51fd\u6570\n  fibonacci(c, quit)\n}\n\n\n// \u5f53 select \u4e2d\u7684\u5176\u5b83\u5206\u652f\u90fd\u6ca1\u6709\u51c6\u5907\u597d\u65f6\uff0cdefault \u5206\u652f\u5c31\u4f1a\u6267\u884c\u3002\npackage main\nimport (\n  "fmt"\n  "time"\n)\nfunc main() {\n  tick := time.Tick(100 * time.Millisecond)\n  boom := time.After(500 * time.Millisecond)\n  for {\n    select {\n    case <-tick:\n      fmt.Println("tick.")\n    case <-boom:\n      fmt.Println("BOOM!")\n      return\n    default:\n      fmt.Println("    .")\n      time.Sleep(50 * time.Millisecond)\n    }\n  }\n}\n\n\n// \u7ec3\u4e60\uff1a\u7b49\u4ef7\u4e8c\u53c9\u67e5\u627e\u6811\n// \u51fd\u6570 tree.New(k) \u7528\u4e8e\u6784\u9020\u4e00\u4e2a\u968f\u673a\u7ed3\u6784\u7684\u5df2\u6392\u5e8f\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\n// \u5b83\u4fdd\u5b58\u4e86\u503c k, 2k, 3k, ..., 10k\npackage main\nimport (\n  "fmt"\n  "sort"\n  "golang.org/x/tour/tree"\n)\nfunc walk(t *tree.Tree, ch chan int) {\n  if t == nil {\n    return\n  }\n  walk(t.Left, ch)\n  ch <- t.Value\n  walk(t.Right, ch)\n}\n// Walk \u904d\u5386 tree t \u5c06\u6240\u6709\u7684\u503c\u4ece tree \u53d1\u9001\u5230 channel ch\u3002\nfunc Walk(t *tree.Tree, ch chan int) {\n  walk(t, ch)\n  close(ch)\n}\n// Same \u68c0\u6d4b\u6811 t1 \u548c t2 \u662f\u5426\u542b\u6709\u76f8\u540c\u7684\u503c\u3002\nfunc Same(t1, t2 *tree.Tree) bool {\n  ch1 := make(chan int)\n  ch2 := make(chan int)\n  a1 := make([]int, 0)\n  a2 := make([]int, 0)\n  go Walk(t1, ch1)\n  go Walk(t2, ch2)\n  for v := range ch1 {\n    a1 = append(a1, v)\n  }\n  for v := range ch2 {\n    a2 = append(a2, v)\n  }\n  if len(a1) != len(a2) {\n    return false\n  }\n  // \u662f\u5426\u5e94\u5f53Sort\uff1f\n  // \u9898\u76ee\u8981\u6c42\u7684\u662f\uff1a\u68c0\u6d4b t1 \u548c t2 \u662f\u5426\u5b58\u50a8\u4e86\u76f8\u540c\u7684\u503c\n  sort.Ints(a1)\n  sort.Ints(a2)\n  for i, v := range a1 {\n    if v != a2[i] {\n      return false\n    }\n  }\n  return true\n}\nfunc main() {\n  // Test Walk\n  ch := make(chan int)\n  t := tree.New(1)\n  fmt.Println("tree:", t)\n  go Walk(t, ch)\n  for v := range ch {\n    fmt.Println("Got value:", v)\n  }\n  // Test Same\n  t2 := tree.New(1)\n\n  fmt.Println("Check same:", Same(t, t2))\n}\n```\n'},vYBC:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5411\u91cf\n---\n"},vmFf:function(n,t,e){"use strict";e.r(t),t.default="\u4e00\u4e2a\u5143\u7ec4\u7531\u51e0\u4e2a\u88ab\u9017\u53f7\u9694\u5f00\u7684\u503c\u7ec4\u6210\u3002\n\u5143\u7ec4\u5728\u8f93\u51fa\u65f6\u603b\u662f\u88ab\u5706\u62ec\u53f7\u5305\u56f4\u7684\uff0c\u4ee5\u4fbf\u6b63\u786e\u8868\u793a\u5d4c\u5957\u5143\u7ec4\u3002\n\u8f93\u5165\u65f6\u5706\u62ec\u53f7\u53ef\u6709\u53ef\u65e0\uff0c\u4e0d\u8fc7\u7ecf\u5e38\u4f1a\u662f\u5fc5\u987b\u7684\u3002\n\u7ed9\u5143\u7ec4\u4e2d\u7684\u4e00\u4e2a\u5355\u72ec\u7684\u5143\u7d20\u8d4b\u503c\u662f\u4e0d\u5141\u8bb8\u7684\u3002\n\u5f53\u7136\u4f60\u53ef\u4ee5\u521b\u5efa\u5305\u542b\u53ef\u53d8\u5bf9\u8c61\u7684\u5143\u7ec4\uff0c\u4f8b\u5982\u5217\u8868\u3002\n\n- \u5143\u7ec4\u662f immutable \uff08\u4e0d\u53ef\u53d8\u7684\uff09\uff0c\u5176\u5e8f\u5217\u901a\u5e38\u5305\u542b\u4e0d\u540c\u79cd\u7c7b\u7684\u5143\u7d20\uff0c\n  \u5e76\u4e14\u901a\u8fc7\u89e3\u5305\uff08\u8fd9\u4e00\u8282\u4e0b\u9762\u4f1a\u89e3\u91ca\uff09\u6216\u8005\u7d22\u5f15\u6765\u8bbf\u95ee\uff08\u5982\u679c\u662f namedtuples \u7684\u8bdd\u751a\u81f3\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5c5e\u6027\u8bbf\u95ee\uff09\u3002\n- \u5217\u8868\u662f mutable \uff08\u53ef\u53d8\u7684\uff09\uff0c\u5e76\u4e14\u5217\u8868\u4e2d\u7684\u5143\u7d20\u4e00\u822c\u662f\u540c\u79cd\u7c7b\u578b\u7684\uff0c\u5e76\u4e14\u901a\u8fc7\u8fed\u4ee3\u8bbf\u95ee\u3002\n\n\u7a7a\u5143\u7ec4\u53ef\u4ee5\u76f4\u63a5\u88ab\u4e00\u5bf9\u7a7a\u5706\u62ec\u53f7\u521b\u5efa\uff0c\n\u542b\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u5143\u7ec4\u53ef\u4ee5\u901a\u8fc7\u5728\u8fd9\u4e2a\u5143\u7d20\u540e\u6dfb\u52a0\u4e00\u4e2a\u9017\u53f7\u6765\u6784\u5efa\n\n```sh\n>>> empty = ()\n>>> singleton = 'hello',    # <-- \u6ce8\u610f\u540e\u9762\u7684\u9017\u53f7\n>>> len(empty)\n0\n>>> len(singleton)\n1\n>>> singleton\n('hello',)\n# \u5143\u7ec4\u6253\u5305\nt = 12345, 54321, 'hello!'\n# \u9006\u64cd\u4f5c\n>>> x, y, z = t\n```\n"},wNuG:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5e76\u53d1\u7684\u5b89\u5168\u9000\u51fa\n---\n"},wiX5:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5e76\u53d1\u6a21\u5f0f\n---\n"},wk8H:function(n,t,e){"use strict";e.r(t),t.default='\u4e0d\u5b89\u5168\u7684\u8d85\u80fd\u529b\n\n- \u89e3\u5f15\u7528\u88f8\u6307\u9488\n- \u8c03\u7528\u4e0d\u5b89\u5168\u7684\u51fd\u6570\u6216\u65b9\u6cd5\n- \u8bbf\u95ee\u6216\u4fee\u6539\u53ef\u53d8\u9759\u6001\u53d8\u91cf\n- \u5b9e\u73b0\u4e0d\u5b89\u5168 trait\n- \u8bbf\u95ee union \u7684\u5b57\u6bb5\n\nunsafe \u4e0d\u610f\u5473\u7740\u5757\u4e2d\u7684\u4ee3\u7801\u5c31\u4e00\u5b9a\u662f\u5371\u9669\u7684\u6216\u8005\u5fc5\u7136\u5bfc\u81f4\u5185\u5b58\u5b89\u5168\u95ee\u9898\uff1a\n\u5176\u610f\u56fe\u5728\u4e8e\u4f5c\u4e3a\u5f00\u53d1\u8005\u4f60\u5c06\u4f1a\u786e\u4fdd unsafe \u5757\u4e2d\u7684\u4ee3\u7801\u4ee5\u6709\u6548\u7684\u65b9\u5f0f\u8bbf\u95ee\u5185\u5b58\u3002\n\n## \u89e3\u5f15\u7528\u88f8\u6307\u9488\uff08raw pointers\uff09\n\n- \u88f8\u6307\u9488\u4e00\u4e2a\u4e3b\u8981\u7684\u5e94\u7528\u573a\u666f\u4fbf\u662f\u8c03\u7528 `C` \u4ee3\u7801\u63a5\u53e3\uff0c\n- \u53e6\u4e00\u4e2a\u573a\u666f\u662f\u6784\u5efa\u501f\u7528\u68c0\u67e5\u5668\u65e0\u6cd5\u7406\u89e3\u7684\u5b89\u5168\u62bd\u8c61\u3002\n\n- \u88f8\u6307\u9488\u662f\u4e0d\u53ef\u53d8\u6216\u53ef\u53d8\u7684\uff0c\u5206\u522b\u5199\u4f5c `*const T` \u548c `*mut T`\u3002\n  \u8fd9\u91cc\u7684\u661f\u53f7\u4e0d\u662f\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26\uff1b\u5b83\u662f\u7c7b\u578b\u540d\u79f0\u7684\u4e00\u90e8\u5206\u3002\n- \u521b\u5efa\u4e00\u4e2a\u6307\u9488\u4e0d\u4f1a\u9020\u6210\u4efb\u4f55\u5371\u9669\uff1b\u53ea\u6709\u5f53\u8bbf\u95ee\u5176\u6307\u5411\u7684\u503c\u65f6\u624d\u6709\u53ef\u80fd\u9047\u5230\u65e0\u6548\u7684\u503c\u3002\n\n```rust\n// \u521b\u5efa\u6307\u5411\u4efb\u610f\u5185\u5b58\u5730\u5740\u7684\u88f8\u6307\u9488\nlet address = 0x012345usize;\nlet r = address as *const i32;\n\n// \u540c\u65f6\u6307\u5411\u76f8\u540c\u5185\u5b58\u4f4d\u7f6e num \u7684\u88f8\u6307\u9488 *const i32 \u548c *mut i32\n// \u5982\u679c\u5c1d\u8bd5\u540c\u65f6\u521b\u5efa num \u7684\u4e0d\u53ef\u53d8\u548c\u53ef\u53d8\u5f15\u7528\uff0c\u5c06\u65e0\u6cd5\u901a\u8fc7\u7f16\u8bd1\nlet mut num = 5;\nlet r1 = &num as *const i32;\nlet r2 = &mut num as *mut i32;\nunsafe {\n    // \u5bf9\u88f8\u6307\u9488\u4f7f\u7528\u89e3\u5f15\u7528\u8fd0\u7b97\u7b26 *\n    println!("r1 is: {}", *r1);\n    println!("r2 is: {}", *r2);\n}\n```\n\n## \u8c03\u7528\u4e0d\u5b89\u5168\u51fd\u6570\u6216\u65b9\u6cd5\n\n```rust\nunsafe fn dangerous() {}\nunsafe {\n    dangerous();\n}\n```\n\n```rust\nuse std::slice;\nlet address = 0x01234usize;\nlet r = address as *mut i32;\nlet slice: &[i32] = unsafe {\n    slice::from_raw_parts_mut(r, 10000)\n};\n```\n\n## \u4f7f\u7528 extern \u51fd\u6570\u8c03\u7528\u5916\u90e8\u4ee3\u7801\n\n```rust\nextern "C" {\n    fn abs(input: i32) -> i32;\n}\nfn main() {\n    unsafe {\n        println!("Absolute value of -3 according to C: {}", abs(-3));\n    }\n}\n```\n\n## \u4ece\u5176\u5b83\u8bed\u8a00\u8c03\u7528 Rust \u51fd\u6570\n\n```rust\n// \u589e\u52a0 #[no_mangle] \u6807\u6ce8\u6765\u544a\u8bc9 Rust \u7f16\u8bd1\u5668\u4e0d\u8981 mangle \u6b64\u51fd\u6570\u7684\u540d\u79f0\u3002\n// \u4e00\u65e6\u5176\u7f16\u8bd1\u4e3a\u52a8\u6001\u5e93\u5e76\u4ece C \u8bed\u8a00\u4e2d\u94fe\u63a5\uff0ccall_from_c \u51fd\u6570\u5c31\u80fd\u591f\u5728 C \u4ee3\u7801\u4e2d\u8bbf\u95ee\uff1a\n// extern \u7684\u4f7f\u7528\u65e0\u9700 unsafe\u3002\n#[no_mangle]\npub extern "C" fn call_from_c() {\n    println!("Just called a Rust function from C!");\n}\n```\n\n## \u8bbf\u95ee\u6216\u4fee\u6539\u53ef\u53d8\u9759\u6001\u53d8\u91cf\n\n\u5168\u5c40\u53d8\u91cf\u5728 Rust \u4e2d\u88ab\u79f0\u4e3a \u9759\u6001\uff08static\uff09\u53d8\u91cf\uff0c\u9759\u6001\u53d8\u91cf\u7c7b\u4f3c\u4e8e\u5e38\u91cf\u3002\n\u5982\u679c\u6709\u4e24\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u76f8\u540c\u7684\u53ef\u53d8\u5168\u5c40\u53d8\u91cf\uff0c\u5219\u53ef\u80fd\u4f1a\u9020\u6210\u6570\u636e\u7ade\u4e89\u3002\n\n```rust\nstatic HELLO_WORLD: &str = "Hello, world!";\nfn main() {\n    println!("name is: {}", HELLO_WORLD);\n}\n```\n\n\u5e38\u91cf\u4e0e\u4e0d\u53ef\u53d8\u9759\u6001\u53d8\u91cf\u53ef\u80fd\u770b\u8d77\u6765\u5f88\u7c7b\u4f3c\uff0c\u4e0d\u8fc7\u4e00\u4e2a\u5fae\u5999\u7684\u533a\u522b\u662f\n\n- \u9759\u6001\u53d8\u91cf\u4e2d\u7684\u503c\u6709\u4e00\u4e2a\u56fa\u5b9a\u7684\u5185\u5b58\u5730\u5740\u3002\n  \u4f7f\u7528\u8fd9\u4e2a\u503c\u603b\u662f\u4f1a\u8bbf\u95ee\u76f8\u540c\u7684\u5730\u5740\u3002\n- \u53e6\u4e00\u65b9\u9762\uff0c\u5e38\u91cf\u5219\u5141\u8bb8\u5728\u4efb\u4f55\u88ab\u7528\u5230\u7684\u65f6\u5019\u590d\u5236\u5176\u6570\u636e\u3002\n\n\u5e38\u91cf\u4e0e\u9759\u6001\u53d8\u91cf\u7684\u53e6\u4e00\u4e2a\u533a\u522b\u5728\u4e8e\n\n- \u9759\u6001\u53d8\u91cf\u53ef\u4ee5\u662f\u53ef\u53d8\u7684\u3002\n- \u8bbf\u95ee\u4e0d\u53ef\u53d8\u9759\u6001\u53d8\u91cf\u662f\u5b89\u5168\u7684\u3002\n- \u8bbf\u95ee\u548c\u4fee\u6539\u53ef\u53d8\u9759\u6001\u53d8\u91cf\u90fd\u662f \u4e0d\u5b89\u5168 \u7684\u3002\n\n```rust\n// \u8bfb\u53d6\u6216\u4fee\u6539\u4e00\u4e2a\u53ef\u53d8\u9759\u6001\u53d8\u91cf\u662f\u4e0d\u5b89\u5168\u7684\nstatic mut COUNTER: u32 = 0;\nfn add_to_count(inc: u32) {\n    unsafe {\n        COUNTER += inc;\n    }\n}\nfn main() {\n    add_to_count(3);\n    unsafe {\n        println!("COUNTER: {}", COUNTER);\n    }\n}\n```\n\n## \u5b9e\u73b0\u4e0d\u5b89\u5168 trait\n\n\u5f53 trait \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u65b9\u6cd5\u4e2d\u5305\u542b\u7f16\u8bd1\u5668\u65e0\u6cd5\u9a8c\u8bc1\u7684\u4e0d\u53d8\u5f0f\uff08invariant\uff09\u65f6 trait \u662f\u4e0d\u5b89\u5168\u7684\u3002\u53ef\u4ee5\u5728 trait \u4e4b\u524d\u589e\u52a0 unsafe \u5173\u952e\u5b57\u5c06 trait \u58f0\u660e\u4e3a unsafe\uff0c\u540c\u65f6 trait \u7684\u5b9e\u73b0\u4e5f\u5fc5\u987b\u6807\u8bb0\u4e3a unsafe\uff0c\n\n```rust\nunsafe trait Foo {\n    // methods go here\n}\nunsafe impl Foo for i32 {\n    // method implementations go here\n}\n```\n'},wvSQ:function(n,t,e){"use strict";e.r(t),t.default='```rust\nfn main() {\n    let x = plus_one(5);\n\n    println!("The value of x is: {}", x);\n}\n\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n```\n'},x8FZ:function(n,t,e){"use strict";e.r(t),t.default='```c++\nprintf("Hello World\\n");\nprintf("%5d\\n", 123); // \u8f93\u51fa\u4e3a "  123"\nprintf("%-5d\\n", 123); // \u8f93\u51fa\u4e3a "123  "\nprintf("%12f\\n", 123.45); // \u8f93\u51fa "  123.450000"\nprintf("%+d\\n", 12); // \u8f93\u51fa +12\nprintf("%+d\\n", -12); // \u8f93\u51fa -12\nprintf("Number is %.2f\\n", 0.5); // \u8f93\u51fa Number is 0.50\nprintf("%6.2f\\n", 0.5); // \u8f93\u51fa\u4e3a "  0.50"\n\nprintf("%*.*f\\n", 6, 2, 0.5);\n// \u7b49\u540c\u4e8e\nprintf("%6.2f\\n", 0.5);\n\n// \u8f93\u51fa hello\nprintf("%.5s\\n", "hello world");\n```\n\n- `%a`\uff1a\u6d6e\u70b9\u6570\u3002\n- `%A`\uff1a\u6d6e\u70b9\u6570\u3002\n- `%c`\uff1a\u5b57\u7b26\u3002\n- `%d`\uff1a\u5341\u8fdb\u5236\u6574\u6570\u3002\n- `%e`\uff1a\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u6d6e\u70b9\u6570\uff0c\u6307\u6570\u90e8\u5206\u7684`e`\u4e3a\u5c0f\u5199\u3002\n- `%E`\uff1a\u4f7f\u7528\u79d1\u5b66\u8ba1\u6570\u6cd5\u7684\u6d6e\u70b9\u6570\uff0c\u6307\u6570\u90e8\u5206\u7684`E`\u4e3a\u5927\u5199\u3002\n- `%i`\uff1a\u6574\u6570\uff0c\u57fa\u672c\u7b49\u540c\u4e8e`%d`\u3002\n- `%f`\uff1a\u5c0f\u6570\uff08\u5305\u542b`float`\u7c7b\u578b\u548c`double`\u7c7b\u578b\uff09\u3002\n- `%g`\uff1a6 \u4e2a\u6709\u6548\u6570\u5b57\u7684\u6d6e\u70b9\u6570\u3002\u6574\u6570\u90e8\u5206\u4e00\u65e6\u8d85\u8fc7 6 \u4f4d\uff0c\u5c31\u4f1a\u81ea\u52a8\u8f6c\u4e3a\u79d1\u5b66\u8ba1\u6570\u6cd5\uff0c\u6307\u6570\u90e8\u5206\u7684`e`\u4e3a\u5c0f\u5199\u3002\n- `%G`\uff1a\u7b49\u540c\u4e8e`%g`\uff0c\u552f\u4e00\u7684\u533a\u522b\u662f\u6307\u6570\u90e8\u5206\u7684`E`\u4e3a\u5927\u5199\u3002\n- `%hd`\uff1a\u5341\u8fdb\u5236 short int \u7c7b\u578b\u3002\n- `%ho`\uff1a\u516b\u8fdb\u5236 short int \u7c7b\u578b\u3002\n- `%hx`\uff1a\u5341\u516d\u8fdb\u5236 short int \u7c7b\u578b\u3002\n- `%hu`\uff1aunsigned short int \u7c7b\u578b\u3002\n- `%ld`\uff1a\u5341\u8fdb\u5236 long int \u7c7b\u578b\u3002\n- `%lo`\uff1a\u516b\u8fdb\u5236 long int \u7c7b\u578b\u3002\n- `%lx`\uff1a\u5341\u516d\u8fdb\u5236 long int \u7c7b\u578b\u3002\n- `%lu`\uff1aunsigned long int \u7c7b\u578b\u3002\n- `%lld`\uff1a\u5341\u8fdb\u5236 long long int \u7c7b\u578b\u3002\n- `%llo`\uff1a\u516b\u8fdb\u5236 long long int \u7c7b\u578b\u3002\n- `%llx`\uff1a\u5341\u516d\u8fdb\u5236 long long int \u7c7b\u578b\u3002\n- `%llu`\uff1aunsigned long long int \u7c7b\u578b\u3002\n- `%Le`\uff1a\u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a\u7684 long double \u7c7b\u578b\u6d6e\u70b9\u6570\u3002\n- `%Lf`\uff1along double \u7c7b\u578b\u6d6e\u70b9\u6570\u3002\n- `%n`\uff1a\u5df2\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u6570\u91cf\u3002\u8be5\u5360\u4f4d\u7b26\u672c\u8eab\u4e0d\u8f93\u51fa\uff0c\u53ea\u5c06\u503c\u5b58\u50a8\u5728\u6307\u5b9a\u53d8\u91cf\u4e4b\u4e2d\u3002\n- `%o`\uff1a\u516b\u8fdb\u5236\u6574\u6570\u3002\n- `%p`\uff1a\u6307\u9488\u3002\n- `%s`\uff1a\u5b57\u7b26\u4e32\u3002\n- `%u`\uff1a\u65e0\u7b26\u53f7\u6574\u6570\uff08unsigned int\uff09\u3002\n- `%x`\uff1a\u5341\u516d\u8fdb\u5236\u6574\u6570\u3002\n- `%zd`\uff1a`size_t`\u7c7b\u578b\u3002\n- `%%`\uff1a\u8f93\u51fa\u4e00\u4e2a\u767e\u5206\u53f7\u3002\n'},xHTt:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\n---\n"},xNQ2:function(n,t,e){"use strict";e.r(t),t.default='- \u5982\u679c\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u53ef\u4ee5\u7701\u7565 return \u8bed\u53e5\uff0c\u6216\u8005\u5199\u6210 return;\n- C \u8bed\u8a00\u6807\u51c6\u89c4\u5b9a\uff0c\u51fd\u6570\u53ea\u80fd\u58f0\u660e\u5728\u6e90\u7801\u6587\u4ef6\u7684\u9876\u5c42\uff0c\u4e0d\u80fd\u58f0\u660e\u5728\u5176\u4ed6\u51fd\u6570\u5185\u90e8\u3002\n- \u51fd\u6570\u53ef\u4ee5\u8c03\u7528\u81ea\u8eab\uff0c\u8fd9\u5c31\u53eb\u505a\u9012\u5f52\uff08recursion\uff09\u3002\n- \u51fd\u6570\u4e0d\u8981\u8fd4\u56de\u5185\u90e8\u53d8\u91cf\u7684\u6307\u9488\u3002\n\n```c++\nint plus_one(int n) {\n  return n + 1;\n}\n```\n\n```c++\nunsigned long Fibonacci(unsigned n) {\n  if (n > 2)\n    return Fibonacci(n - 1) + Fibonacci(n - 2);\n  else\n    return 1;\n}\n```\n\n```c++\nvoid Swap(int* x, int* y) {\n  int temp;\n  temp = *x;\n  *x = *y;\n  *y = temp;\n}\n\nint a = 1;\nint b = 2;\nSwap(&a, &b);\n```\n\n## \u51fd\u6570\u539f\u578b\n\n```c++\n// \u4ee3\u7801\u5934\u90e8\u5148\u7ed9\u51fa\u4e86\u51fd\u6570\u539f\u578b\uff0c\u6240\u4ee5\u53ef\u4ee5\u6b63\u786e\u7f16\u8bd1\nint twice(int);\n\nint main(int num) {\n  return twice(num);\n}\n\nint twice(int num) {\n  return 2 * num;\n}\n```\n\n## `exit()`\n\n- \u5728 `main()`\u51fd\u6570\u91cc\u9762\uff0c`exit()`\u7b49\u4ef7\u4e8e\u4f7f\u7528 `return` \u8bed\u53e5\u3002\n- \u5176\u4ed6\u51fd\u6570\u4f7f\u7528 `exit()`\uff0c\u5c31\u662f\u7ec8\u6b62\u6574\u4e2a\u7a0b\u5e8f\u7684\u8fd0\u884c\uff0c\u6ca1\u6709\u5176\u4ed6\u4f5c\u7528\u3002\n\n```c++\n// \u7a0b\u5e8f\u8fd0\u884c\u6210\u529f\n// \u7b49\u540c\u4e8e exit(0);\nexit(EXIT_SUCCESS);\n\n// \u7a0b\u5e8f\u5f02\u5e38\u4e2d\u6b62\n// \u7b49\u540c\u4e8e exit(1);\nexit(EXIT_FAILURE);\n```\n\nC \u8bed\u8a00\u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a`atexit()`\u51fd\u6570\uff0c\u7528\u6765\u767b\u8bb0`exit()`\u6267\u884c\u65f6\u989d\u5916\u6267\u884c\u7684\u51fd\u6570\uff0c\u7528\u6765\u505a\u4e00\u4e9b\u9000\u51fa\u7a0b\u5e8f\u65f6\u7684\u6536\u5c3e\u5de5\u4f5c\u3002\n\n```c++\n// int atexit(void (*func)(void));\nvoid print(void) {\n  printf("something wrong!\\n");\n}\n\natexit(print);\nexit(EXIT_FAILURE);\n```\n\n## \u51fd\u6570\u8bf4\u660e\u7b26\n\n### `extern` \u8bf4\u660e\u7b26\n\n\u5f53\u524d\u6587\u4ef6\u91cc\u9762\uff0c\u9700\u8981\u7ed9\u51fa\u5916\u90e8\u51fd\u6570\u7684\u539f\u578b\uff0c\u5e76\u7528 `extern` \u8bf4\u660e\u8be5\u51fd\u6570\u7684\u5b9a\u4e49\u6765\u81ea\u5176\u4ed6\u6587\u4ef6\u3002\n\n```c++\n// \u51fd\u6570foo()\u5b9a\u4e49\u5728\u5176\u4ed6\u6587\u4ef6\uff0cextern\u544a\u8bc9\u7f16\u8bd1\u5668\u5f53\u524d\u6587\u4ef6\u4e0d\u5305\u542b\u8be5\u51fd\u6570\u7684\u5b9a\u4e49\nextern int foo(int arg1, char arg2);\n\nint main(void) {\n  int a = foo(2, 3);\n  // ...\n  return 0;\n}\n```\n\n### `static` \u8bf4\u660e\u7b26\n\n- `static` \u7528\u4e8e\u51fd\u6570\u5185\u90e8\u58f0\u660e\u53d8\u91cf\u65f6\uff0c\u8868\u793a\u8be5\u53d8\u91cf\u53ea\u9700\u8981\u521d\u59cb\u5316\u4e00\u6b21\uff0c\u4e0d\u9700\u8981\u5728\u6bcf\u6b21\u8c03\u7528\u65f6\u90fd\u8fdb\u884c\u521d\u59cb\u5316\u3002\n- `static` \u4fee\u9970\u7684\u53d8\u91cf\u521d\u59cb\u5316\u65f6\uff0c\u53ea\u80fd\u8d4b\u503c\u4e3a\u5e38\u91cf\uff0c\u4e0d\u80fd\u8d4b\u503c\u4e3a\u53d8\u91cf\n- \u5728\u5757\u4f5c\u7528\u57df\u4e2d\uff0c`static` \u58f0\u660e\u7684\u53d8\u91cf\u6709\u9ed8\u8ba4\u503c 0\n\n```c++\n#include <stdio.h>\n\nvoid counter(void) {\n  static int count = 1;  // \u53ea\u521d\u59cb\u5316\u4e00\u6b21\n  printf("%d\\n", count);\n  count++;\n}\n\nint main(void) {\n  counter();  // 1\n  counter();  // 2\n  counter();  // 3\n  counter();  // 4\n}\n```\n\n`static` \u5173\u952e\u5b57\u8868\u793a\u8be5\u51fd\u6570\u53ea\u80fd\u5728\u5f53\u524d\u6587\u4ef6\u91cc\u4f7f\u7528\uff0c\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u5173\u952e\u5b57\uff0c\u5176\u4ed6\u6587\u4ef6\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\uff08\u901a\u8fc7\u58f0\u660e\u51fd\u6570\u539f\u578b\uff09\u3002\n\n```c++\nstatic int Twice(int num) {\n  int result = num * 2;\n  return(result);\n}\n```\n\n`static` \u4e5f\u53ef\u4ee5\u7528\u5728\u53c2\u6570\u91cc\u9762\uff0c\u4fee\u9970\u53c2\u6570\u6570\u7ec4\u3002\n\u53ea\u662f\u7528\u6765\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u8be5\u6570\u7ec4\u957f\u5ea6\u81f3\u5c11\u4e3a 3\uff0c\u67d0\u4e9b\u60c5\u51b5\u4e0b\u53ef\u4ee5\u52a0\u5feb\u7a0b\u5e8f\u8fd0\u884c\u901f\u5ea6\u3002\n\n```c++\nint sum_array(int a[static 3], int n) {\n  // ...\n}\n```\n\n### `const` \u8bf4\u660e\u7b26\n\n\u5728\u6307\u9488\u53c2\u6570\u524d\u9762\u52a0\u4e0a `const` \u8bf4\u660e\u7b26\uff0c\u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u51fd\u6570\u5185\u90e8\u4e0d\u80fd\u4fee\u6539\u8be5\u53c2\u6570\u6240\u6307\u5411\u7684\u503c\u3002\n\n```c++\nvoid f(const int* p) {\n  *p = 0; // \u8be5\u884c\u62a5\u9519\n}\n```\n\n\u4f46\u662f\u4e0a\u9762\u8fd9\u79cd\u5199\u6cd5\uff0c\u53ea\u9650\u5236\u4fee\u6539 p \u6240\u6307\u5411\u7684\u503c\uff0c\u800c p \u672c\u8eab\u7684\u5730\u5740\u662f\u53ef\u4ee5\u4fee\u6539\u7684\u3002\n\n```c++\nvoid f(const int* p) {\n  int x = 13;\n  p = &x; // \u5141\u8bb8\u4fee\u6539\n}\n```\n\n\u5982\u679c\u60f3\u540c\u65f6\u9650\u5236\u4fee\u6539 `p` \u548c `*p`\uff0c\u9700\u8981\u4f7f\u7528\u4e24\u4e2a `const`\n\n```c++\nvoid f(const int* const p) {\n  // ...\n}\n```\n\n## \u53ef\u53d8\u53c2\u6570\n\n```c++\nint printf(const char* format, ...);\n```\n\n\u5934\u6587\u4ef6 `stdarg.h` \u5b9a\u4e49\u4e86\u4e00\u4e9b\u5b8f\uff0c\u53ef\u4ee5\u64cd\u4f5c\u53ef\u53d8\u53c2\u6570\u3002\n\n- \uff081\uff09`va_list`\uff1a\u4e00\u4e2a\u6570\u636e\u7c7b\u578b\uff0c\u7528\u6765\u5b9a\u4e49\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u5bf9\u8c61\u3002\u5b83\u5fc5\u987b\u5728\u64cd\u4f5c\u53ef\u53d8\u53c2\u6570\u65f6\uff0c\u9996\u5148\u4f7f\u7528\u3002\n- \uff082\uff09`va_start`\uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u521d\u59cb\u5316\u53ef\u53d8\u53c2\u6570\u5bf9\u8c61\u3002\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u53ef\u53d8\u53c2\u6570\u5bf9\u8c61\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u539f\u59cb\u51fd\u6570\u91cc\u9762\uff0c\u53ef\u53d8\u53c2\u6570\u4e4b\u524d\u7684\u90a3\u4e2a\u53c2\u6570\uff0c\u7528\u6765\u4e3a\u53ef\u53d8\u53c2\u6570\u5b9a\u4f4d\u3002\n- \uff083\uff09`va_arg`\uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u53d6\u51fa\u5f53\u524d\u90a3\u4e2a\u53ef\u53d8\u53c2\u6570\uff0c\u6bcf\u6b21\u8c03\u7528\u540e\uff0c\u5185\u90e8\u6307\u9488\u5c31\u4f1a\u6307\u5411\u4e0b\u4e00\u4e2a\u53ef\u53d8\u53c2\u6570\u3002\u5b83\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u53ef\u53d8\u53c2\u6570\u5bf9\u8c61\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5f53\u524d\u53ef\u53d8\u53c2\u6570\u7684\u7c7b\u578b\u3002\n- \uff084\uff09`va_end`\uff1a\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u6e05\u7406\u53ef\u53d8\u53c2\u6570\u5bf9\u8c61\u3002\n\n```c++\ndouble average(int i, ...) {\n  double total = 0;\n  va_list ap;\n  va_start(ap, i);\n  for (int j = 1; j <= i; ++j) {\n    total += va_arg(ap, double);\n  }\n  va_end(ap);\n  return total / i;\n}\n```\n'},xY5o:function(n,t,e){"use strict";e.r(t),t.default="```dart\nif (isRaining()) {\n  you.bringRainCoat();\n} else if (isSnowing()) {\n  you.wearJacket();\n} else {\n  car.putTopDown();\n}\n```\n"},xqSF:function(n,t,e){"use strict";e.r(t),t.default='```js\n// replace\u65b9\u6cd5\u7528\u4e8e\u66ff\u6362\u5339\u914d\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u53ea\u66ff\u6362\u7b2c\u4e00\u4e2a\u5339\u914d\uff08\u9664\u975e\u4f7f\u7528\u5e26\u6709g\u4fee\u9970\u7b26\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff09\u3002\n"aaa".replace("a", "b"); // "baa"\n\nconst someString = "a b c d e";\n// Only changes the first space\n// a,b c d e\n// console.log(someString.replace(\' \', \',\'))\n\n// Use / /g instead of \' \' to change every space\nconsole.log(someString.replace(/ /g, ","));\n```\n'},yFmA:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6570\u636e\u7c7b\u578b\u5224\u65ad\n---\n"},yHj9:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\nimport (\n    "os"\n    "text/template"\n)\n\nfunc main() {\n    t1 := template.New("t1")\n    t1, err := t1.Parse("Value is {{.}}\\n")\n    if err != nil {\n        panic(err)\n    }\n    // t1 = template.Must(t1.Parse("Value: {{.}}\\n")) // \u5728 Parse \u9519\u8bef\u65f6\u8fd4\u56de panic\n    t1.Execute(os.Stdout, "some text")\n    t1.Execute(os.Stdout, 5)\n    t1.Execute(os.Stdout, []string{\n        "Go",\n        "Rust",\n        "C++",\n        "C#",\n    })\n\n    Create := func(name, t string) *template.Template {\n        return template.Must(template.New(name).Parse(t))\n    }\n\n    t2 := Create("t2", "Name: {{.Name}}\\n") // \u8bbf\u95ee\u7ed3\u6784\u4f53\u5b57\u6bb5\n    t2.Execute(os.Stdout, struct {\n        Name string\n    }{"Jane Doe"})\n    t2.Execute(os.Stdout, map[string]string{\n        "Name": "Mickey Mouse",\n    })\n\n    t3 := Create("t3",\n        "{{if . -}} yes {{else -}} no {{end}}\\n") // \u6761\u4ef6\u6267\u884c\u6a21\u677f\n    t3.Execute(os.Stdout, "not empty")\n    t3.Execute(os.Stdout, "")\n\n    t4 := Create("t4",\n        "Range: {{range .}}{{.}} {{end}}\\n") // \u904d\u5386\u5207\u7247\n    t4.Execute(os.Stdout,\n        []string{\n            "Go",\n            "Rust",\n            "C++",\n            "C#",\n        })\n}\n```\n'},yIpi:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u6570\u7ec4/\u5217\u8868/\u5207\u7247\n---\n"},yNNv:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5207\u7247\u64cd\u4f5c\n---\n"},yXP0:function(n,t,e){"use strict";e.r(t),t.default='```c++\n// \u661f\u53f7*\u53ef\u4ee5\u653e\u5728\u53d8\u91cf\u540d\u4e0e\u7c7b\u578b\u5173\u952e\u5b57\u4e4b\u95f4\u7684\u4efb\u4f55\u5730\u65b9\nint* intPtr;\nint   *intPtr;\nint * intPtr;\nint*  intPtr;\n\n// \u6b63\u786e\nint * foo, * bar;\n\n// \u9519\u8bef\n// foo\u662f\u6574\u6570\u6307\u9488\u53d8\u91cf\uff0c\u800cbar\u662f\u6574\u6570\u53d8\u91cf\uff0c\u5373*\u53ea\u5bf9\u7b2c\u4e00\u4e2a\u53d8\u91cf\u751f\u6548\nint* foo, bar;\n\n// \u8868\u793a\u53d8\u91cffoo\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u7684\u8fd8\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u7b2c\u4e8c\u4e2a\u6307\u9488\u6307\u5411\u7684\u5219\u662f\u4e00\u4e2a\u6574\u6570\u3002\nint** foo;\n```\n\n## `*` \u8fd0\u7b97\u7b26\n\n```c++\nvoid increment(int* p) {\n  *p = *p + 1; // *p\u5c31\u8868\u793a\u6307\u9488p\u6240\u6307\u5411\u7684\u90a3\u4e2a\u503c\n}\n\nint x = 1;\nincrement(&x);\nprintf("%d\\n", x); // 2\n```\n\n## `&` \u8fd0\u7b97\u7b26\n\n```c++\n// x\u662f\u4e00\u4e2a\u6574\u6570\u53d8\u91cf\uff0c&x\u5c31\u662fx\u7684\u503c\u6240\u5728\u7684\u5185\u5b58\u5730\u5740\u3002\n// printf()\u7684%p\u662f\u5185\u5b58\u5730\u5740\u7684\u5360\u4f4d\u7b26\uff0c\u53ef\u4ee5\u6253\u5370\u51fa\u5185\u5b58\u5730\u5740\nint x = 1;\nprintf("x\'s address is %p\\n", &x); // x\'s address is 0x7ffdca476054\n```\n\n## \u6307\u9488\u53d8\u91cf\u7684\u521d\u59cb\u5316\n\n\u6307\u9488\u53d8\u91cf\u58f0\u660e\u540e\uff0c\u5fc5\u987b\u5148\u8ba9\u5b83\u6307\u5411\u4e00\u4e2a\u5206\u914d\u597d\u7684\u5730\u5740\uff0c\u7136\u540e\u518d\u8fdb\u884c\u8bfb\u5199\uff0c\u8fd9\u53eb\u505a\u6307\u9488\u53d8\u91cf\u7684\u521d\u59cb\u5316\u3002\n\n```c++\nint* p;\n*p = 1; // \u9519\u8bef\n```\n\n```c++\nint* p;\nint i;\n\np = &i;\n*p = 13;\n```\n\nNULL \u5728 C \u8bed\u8a00\u4e2d\u662f\u4e00\u4e2a\u5e38\u91cf\uff0c\u8868\u793a\u5730\u5740\u4e3a 0 \u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u8fd9\u4e2a\u5730\u5740\u662f\u65e0\u6cd5\u4f7f\u7528\u7684\uff0c\u8bfb\u5199\u8be5\u5730\u5740\u4f1a\u62a5\u9519\u3002\n\n```c++\nint* p = NULL;\n```\n\n## \u6307\u9488\u7684\u8fd0\u7b97\n\n### \u6307\u9488\u4e0e\u6574\u6570\u503c\u7684\u52a0\u51cf\u8fd0\u7b97\n\n`j + 1`\u8868\u793a\u6307\u9488\u5411\u5185\u5b58\u5730\u5740\u7684\u9ad8\u4f4d\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\uff0c\u800c\u4e00\u4e2a\u5355\u4f4d\u7684`short`\u7c7b\u578b\u5360\u636e\u4e24\u4e2a\u5b57\u8282\u7684\u5bbd\u5ea6\uff0c\u6240\u4ee5\u76f8\u5f53\u4e8e\u5411\u9ad8\u4f4d\u79fb\u52a8\u4e24\u4e2a\u5b57\u8282\n\n```c++\nshort* j;\nj = (short*)0x1234;\nj = j + 1; // 0x1236\n```\n\n### \u6307\u9488\u4e0e\u6307\u9488\u7684\u52a0\u6cd5\u8fd0\u7b97(\u975e\u6cd5)\n\n### \u6307\u9488\u4e0e\u6307\u9488\u7684\u51cf\u6cd5\n\n\u76f8\u540c\u7c7b\u578b\u7684\u6307\u9488\u5141\u8bb8\u8fdb\u884c\u51cf\u6cd5\u8fd0\u7b97\uff0c\u8fd4\u56de\u5b83\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5373\u76f8\u9694\u591a\u5c11\u4e2a\u6570\u636e\u5355\u4f4d\u3002\n\n```c++\nshort* j1;\nshort* j2;\n\nj1 = (short*)0x1234;\nj2 = (short*)0x1236;\n\nptrdiff_t dist = j2 - j1;\nprintf("%d\\n", dist); // 1\n```\n\n## \u51fd\u6570\u6307\u9488\n\n```c++\nvoid print(int a) {\n  printf("%d\\n", a);\n}\nvoid (*print_ptr)(int) = &print;\n\n(*print_ptr)(10);\n// \u7b49\u540c\u4e8e\nprint(10);\n```\n\n- C \u8bed\u8a00\u8fd8\u89c4\u5b9a\uff0c\u51fd\u6570\u540d\u672c\u8eab\u5c31\u662f\u6307\u5411\u51fd\u6570\u4ee3\u7801\u7684\u6307\u9488\uff0c\u901a\u8fc7\u51fd\u6570\u540d\u5c31\u80fd\u83b7\u53d6\u51fd\u6570\u5730\u5740\u3002\n  - \u4e5f\u5c31\u662f\u8bf4\uff0c`print` \u548c `&print` \u662f\u4e00\u56de\u4e8b\n- \u56e0\u6b64\uff0c\u4e0a\u9762\u4ee3\u7801\u7684 `print_ptr` \u7b49\u540c\u4e8e `print`\n\n```c++\nif (print == &print) // true\n\nvoid (*print_ptr)(int) = &print;\n// \u6216\nvoid (*print_ptr)(int) = print;\nif (print_ptr == print) // true\n\n// \u51fd\u6570compute()\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e5f\u662f\u4e00\u4e2a\u51fd\u6570\nint compute(int (*myfunc)(int), int, int);\n```\n\n\u5bf9\u4e8e\u4efb\u610f\u51fd\u6570\uff0c\u90fd\u6709\u4e94\u79cd\u8c03\u7528\u51fd\u6570\u7684\u5199\u6cd5\u3002\n\n```c++\n// \u5199\u6cd5\u4e00\nprint(10)\n\n// \u5199\u6cd5\u4e8c\n(*print)(10)\n\n// \u5199\u6cd5\u4e09\n(&print)(10)\n\n// \u5199\u6cd5\u56db\n(*print_ptr)(10)\n\n// \u5199\u6cd5\u4e94\nprint_ptr(10)\n```\n'},ylzQ:function(n,t,e){"use strict";e.r(t),t.default="```dart\nvar greetingTemplate = 'Hello, NAME!';\nvar greeting = greetingTemplate\n    .replaceAll(new RegExp('NAME'), 'Bob');\n\nassert(greeting !=\n    greetingTemplate); // greetingTemplate didn't change.\n```\n"},yur8:function(n,t,e){"use strict";e.r(t),t.default='```go\npackage main\n\nimport (\n    "fmt"\n    "time"\n)\n\nfunc main() {\n\n    ticker := time.NewTicker(500 * time.Millisecond)\n    done := make(chan bool)\n\n    go func() {\n        for {\n            select {\n            case <-done:\n                return\n            case t := <-ticker.C:\n                fmt.Println("Tick at", t)\n            }\n        }\n    }()\n\n    time.Sleep(1600 * time.Millisecond)\n    ticker.Stop()\n    done <- true\n    fmt.Println("Ticker stopped")\n}\n```\n'},yyRM:function(n,t,e){"use strict";e.r(t),t.default='```python\n# 1\n# 2\n# Fizz\n# 4\n# Buzz\nfor number in range(1, 101):\n    if number == 3:\n        print("Fizz")\n        continue\n    if number == 5:\n        print("Buzz")\n        break\n    print(number)\n```\n\n```sh\n# \u5faa\u73af\u8bed\u53e5\u53ef\u80fd\u5e26\u6709\u4e00\u4e2a else \u5b50\u53e5\uff1b\n# \u5b83\u4f1a\u5728\u5faa\u73af\u904d\u5386\u5b8c\u5217\u8868 (\u4f7f\u7528 for) \u6216\u662f\u5728\u6761\u4ef6\u53d8\u4e3a\u5047 (\u4f7f\u7528 while) \u7684\u65f6\u5019\u88ab\u6267\u884c\uff0c\n# \u4f46\u662f\u4e0d\u4f1a\u5728\u5faa\u73af\u88ab break \u8bed\u53e5\u7ec8\u6b62\u65f6\u88ab\u6267\u884c\u3002\n\n# \u5f53\u548c\u5faa\u73af\u4e00\u8d77\u4f7f\u7528\u65f6\uff0celse \u5b50\u53e5\u4e0e try \u8bed\u53e5\u4e2d\u7684 else \u5b50\u53e5\u7684\u5171\u540c\u70b9\u591a\u4e8e if \u8bed\u53e5\u4e2d\u7684\u5b50\u53e5:\n# try \u8bed\u53e5\u4e2d\u7684 else \u5b50\u53e5\u4f1a\u5728\u672a\u53d1\u751f\u5f02\u5e38\u65f6\u6267\u884c\uff0c\n# \u800c\u5faa\u73af\u4e2d\u7684 else \u5b50\u53e5\u5219\u4f1a\u5728\u672a\u53d1\u751f break \u65f6\u6267\u884c\u3002\n\n# \u8ba1\u7b97\u8d28\u6570(\u7d20\u6570)\n>>> for n in range(2, 10):\n...     for x in range(2, n):\n...         if n % x == 0:\n...             print(n, \'equals\', x, \'*\', n//x)\n...             break\n...     else: # else \u5b50\u53e5\u5c5e\u4e8e for \u5faa\u73af\uff0c \u4e0d\u5c5e\u4e8e if \u8bed\u53e5\u3002\n...         # loop fell through without finding a factor\n...         print(n, \'is a prime number\')\n...\n2 is a prime number\n3 is a prime number\n4 equals 2 * 2\n5 is a prime number\n6 equals 2 * 3\n7 is a prime number\n8 equals 2 * 4\n9 equals 3 * 3\n\n# continue \u8bed\u53e5\u4e5f\u662f\u501f\u9274\u81ea C \u8bed\u8a00\uff0c\u8868\u793a\u7ee7\u7eed\u5faa\u73af\u4e2d\u7684\u4e0b\u4e00\u6b21\u8fed\u4ee3:\n>>> for num in range(2, 10):\n...     if num % 2 == 0:\n...         print("Found an even number", num)\n...         continue\n...     print("Found a number", num)\nFound an even number 2\nFound a number 3\nFound an even number 4\nFound a number 5\nFound an even number 6\nFound a number 7\nFound an even number 8\nFound a number 9\n```\n'},z5Ge:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u961f\u5217\n---\n"},zJXW:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u5e76\u53d1\u7f16\u7a0b\n---\n"},zYe6:function(n,t,e){"use strict";e.r(t),t.default="---\ntitle: \u7b49\u5f85\u534f\u7a0b\n---\n"},zaG5:function(n,t,e){"use strict";e.r(t),t.default='```go\nvar cwd string\n\nfunc init() {\n    var err error\n    // cwd, err := os.Getwd() // NOTE: wrong!\n    cwd, err = os.Getwd()\n    if err != nil {\n        log.Fatalf("os.Getwd failed: %v", err)\n    }\n}\n```\n'},zdk2:function(n,t,e){"use strict";e.r(t),t.default='```sh\n# \u5378\u8f7d\u65e7\u7248\u672c\nsudo rm -rf /usr/local/go\n\n# \u4e0b\u8f7d\u6b64\u538b\u7f29\u5305\u5e76\u63d0\u53d6\u5230 /usr/local \u76ee\u5f55\uff0c\u5728 /usr/local/go \u4e2d\u521b\u5efaGo\u76ee\u5f55\u6811\u3002\n# \u8be5\u538b\u7f29\u5305\u7684\u540d\u79f0\u53ef\u80fd\u4e0d\u540c\uff0c\u8fd9\u53d6\u51b3\u4e8e\u4f60\u5b89\u88c5\u7684Go\u7248\u672c\u548c\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee5\u53ca\u5904\u7406\u5668\u67b6\u6784\u3002\nsudo tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz\n\n# \u8981\u5c06 /usr/local/go/bin \u6dfb\u52a0\u5230 PATH \u73af\u5883\u53d8\u91cf\uff0c\n# \u4f60\u9700\u8981\u5c06\u6b64\u884c\u6dfb\u52a0\u5230\u4f60\u7684 /etc/profile\uff08\u5168\u7cfb\u7edf\u5b89\u88c5\uff09\u6216 $HOME/.profile \u6587\u4ef6\u4e2d\uff1a\nexport PATH=$PATH:/usr/local/go/bin\n\n# \u5b89\u88c5\u5230\u6307\u5b9a\u4f4d\u7f6e\n# GOROOT \u4ec5\u5728\u5b89\u88c5\u5230\u6307\u5b9a\u4f4d\u7f6e\u65f6\u624d\u9700\u8981\u8bbe\u7f6e\u3002\nexport GOROOT=$HOME/go\nexport PATH=$PATH:$GOROOT/bin\n\n# \u6d4b\u8bd5\u4f60\u7684\u5b89\u88c5\n# package main\n# import "fmt"\n# func main() {\n#     fmt.Printf("hello, world\\n")\n# }\ngo run hello.go\n\n# GOPATH \u73af\u5883\u53d8\u91cf\n# GOPATH \u73af\u5883\u53d8\u91cf\u6307\u5b9a\u4e86\u4f60\u7684\u5de5\u4f5c\u7a7a\u95f4\u4f4d\u7f6e\u3002\n# \u6ce8\u610f\uff0c\u5b83\u7edd\u5bf9\u4e0d\u80fd\u548c\u4f60\u7684Go\u5b89\u88c5\u76ee\u5f55\u76f8\u540c\u3002\nmkdir $HOME/work\nexport GOPATH=$HOME/work\nexport PATH=$PATH:$GOPATH/bin\n```\n'},zuio:function(n,t,e){"use strict";e.r(t),t.default='Rust \u7684 \u95ed\u5305\uff08closures\uff09\u662f\u53ef\u4ee5\u4fdd\u5b58\u8fdb\u53d8\u91cf\u6216\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u5176\u4ed6\u51fd\u6570\u7684\u533f\u540d\u51fd\u6570\u3002\n\n```rust\nfn  add_one_v1   (x: u32) -> u32 { x + 1 }\nlet add_one_v2 = |x: u32| -> u32 { x + 1 };\nlet add_one_v3 = |x|             { x + 1 };\nlet add_one_v4 = |x|               x + 1  ;\n```\n\n## \u4f7f\u7528\u5e26\u6709\u6cdb\u578b\u548c Fn trait \u7684\u95ed\u5305\n\n```rust\nuse std::thread;\nuse std::time::Duration;\n\nstruct Cacher<T>\n    where T: Fn(u32) -> u32\n{\n    calculation: T,\n    value: Option<u32>,\n}\n\nimpl<T> Cacher<T>\n    where T: Fn(u32) -> u32\n{\n    fn new(calculation: T) -> Cacher<T> {\n        Cacher {\n            calculation,\n            value: None,\n        }\n    }\n\n    fn value(&mut self, arg: u32) -> u32 {\n        match self.value {\n            Some(v) => v,\n            None => {\n                let v = (self.calculation)(arg);\n                self.value = Some(v);\n                v\n            },\n        }\n    }\n}\n\nfn generate_workout(intensity: u32, random_number: u32) {\n    let mut expensive_result = Cacher::new(|num| {\n        println!("calculating slowly...");\n        thread::sleep(Duration::from_secs(2));\n        num\n    });\n\n    if intensity < 25 {\n        println!(\n            "Today, do {} pushups!",\n            expensive_result.value(intensity)\n        );\n        println!(\n            "Next, do {} situps!",\n            expensive_result.value(intensity)\n        );\n    } else {\n        if random_number == 3 {\n            println!("Take a break today! Remember to stay hydrated!");\n        } else {\n            println!(\n                "Today, run for {} minutes!",\n                expensive_result.value(intensity)\n            );\n        }\n    }\n}\n```\n\n## \u95ed\u5305\u4f1a\u6355\u83b7\u5176\u73af\u5883\n\n```rust\nfn main() {\n    let x = 4;\n    let equal_to_x = |z| z == x;\n    let y = 4;\n    assert!(equal_to_x(y));\n}\n\n// \u51fd\u6570\u5219\u4f1a\u9519\u8bef\nfn main() {\n    let x = 4;\n    fn equal_to_x(z: i32) -> bool { z == x } // \u8fd9\u91ccx\u4e0d\u80fd\u4f7f\u7528\n    let y = 4;\n    assert!(equal_to_x(y));\n}\n```\n\n## \u51fd\u6570\u6307\u9488\n\n- `fn` \u88ab\u79f0\u4e3a \u51fd\u6570\u6307\u9488\uff08function pointer\uff09\n- \u51fd\u6570\u6307\u9488\u5b9e\u73b0\u4e86\u6240\u6709\u4e09\u4e2a\u95ed\u5305 trait\uff08`Fn`\u3001`FnMut` \u548c `FnOnce`\uff09\n  - \u6240\u4ee5\u603b\u662f\u53ef\u4ee5\u5728\u8c03\u7528\u671f\u671b\u95ed\u5305\u7684\u51fd\u6570\u65f6\u4f20\u9012\u51fd\u6570\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\n  - \u8fd9\u6837\u5b83\u5c31\u80fd\u63a5\u53d7\u51fd\u6570\u6216\u95ed\u5305\u4f5c\u4e3a\u53c2\u6570\n\n```rust\nfn add_one(x: i32) -> i32 {\n    x + 1\n}\n// \u4f7f\u7528 fn \u7c7b\u578b\u63a5\u53d7\u51fd\u6570\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\nfn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {\n    f(arg) + f(arg)\n}\nfn main() {\n    let answer = do_twice(add_one, 5);\n    println!("The answer is: {}", answer);\n}\n\n// \u4f7f\u7528\u95ed\u5305\nlet list_of_numbers = vec![1, 2, 3];\nlet list_of_strings: Vec<String> = list_of_numbers\n    .iter()\n    .map(|i| i.to_string())\n    .collect();\n\n// \u53ef\u4ee5\u5c06\u51fd\u6570\u4f5c\u4e3a map \u7684\u53c2\u6570\u6765\u4ee3\u66ff\u95ed\u5305\nlet list_of_numbers = vec![1, 2, 3];\nlet list_of_strings: Vec<String> = list_of_numbers\n    .iter()\n    .map(ToString::to_string) // \u5b8c\u5168\u9650\u5b9a\u8bed\u6cd5\uff0c\u56e0\u4e3a\u5b58\u5728\u591a\u4e2a\u53eb\u505a to_string \u7684\u51fd\u6570\n    .collect();\n```\n\n```rust\n// \u8fd9\u91cc\u521b\u5efa\u4e86 Status::Value \u5b9e\u4f8b\uff0c\n// \u5b83\u901a\u8fc7 map \u7528\u8303\u56f4\u7684\u6bcf\u4e00\u4e2a u32 \u503c\u8c03\u7528 Status::Value \u7684\u521d\u59cb\u5316\u51fd\u6570\nenum Status {\n    Value(u32),\n    Stop,\n}\nlet list_of_statuses: Vec<Status> =\n    (0u32..20)\n    .map(Status::Value) // \u8fd9\u4e9b\u9879\u4f7f\u7528 () \u4f5c\u4e3a\u521d\u59cb\u5316\u8bed\u6cd5\uff0c\u8fd9\u770b\u8d77\u6765\u5c31\u50cf\u51fd\u6570\u8c03\u7528\n    .collect();\n```\n\n## \u8fd4\u56de\u95ed\u5305\n\n```rust\n// \u9519\u8bef\n// Rust \u5e76\u4e0d\u77e5\u9053\u9700\u8981\u591a\u5c11\u7a7a\u95f4\u6765\u50a8\u5b58\u95ed\u5305\nfn returns_closure() -> Fn(i32) -> i32 {\n    |x| x + 1\n}\n\n// \u4fee\u6b63\nfn returns_closure() -> Box<dyn Fn(i32) -> i32> {\n    Box::new(|x| x + 1)\n}\n```\n'}},[["+xyl",0,2,4,1,3]]]);
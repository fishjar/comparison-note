<!DOCTYPE html><html><head><meta name="viewport" content="width=device-width"/><meta charSet="utf-8"/><title>2.两数之和</title><link rel="preload" href="/comparison-note/_next/static/css/dc4eece8d63e31b4b040.css" as="style"/><link rel="stylesheet" href="/comparison-note/_next/static/css/dc4eece8d63e31b4b040.css" data-n-g=""/><link rel="preload" href="/comparison-note/_next/static/css/05437c60348a21355b6c.css" as="style"/><link rel="stylesheet" href="/comparison-note/_next/static/css/05437c60348a21355b6c.css" data-n-g=""/><noscript data-n-css="true"></noscript><link rel="preload" href="/comparison-note/_next/static/chunks/main-14614ae8e939b9e5961e.js" as="script"/><link rel="preload" href="/comparison-note/_next/static/chunks/webpack-e067438c4cf4ef2ef178.js" as="script"/><link rel="preload" href="/comparison-note/_next/static/chunks/framework.c7b20b4e446c7cca89e7.js" as="script"/><link rel="preload" href="/comparison-note/_next/static/chunks/7945cc82.ff5578978733a40a67a3.js" as="script"/><link rel="preload" href="/comparison-note/_next/static/chunks/commons.a32a113e095d8f0b1079.js" as="script"/><link rel="preload" href="/comparison-note/_next/static/chunks/pages/_app-1832d2b05f1f19d6a06d.js" as="script"/><link rel="preload" href="/comparison-note/_next/static/chunks/a1bc03cf.64f9f8493143216945e6.js" as="script"/><link rel="preload" href="/comparison-note/_next/static/chunks/4d6c67b811e74d3ca6630b1db854b02fef4ff3ce.8a4303f940dd12850a8f.js" as="script"/><link rel="preload" href="/comparison-note/_next/static/chunks/pages/%5B...param%5D-ec17b069b047a5ce78c3.js" as="script"/></head><body><div id="__next"><nav class="navbar navbar-expand-lg navbar-light bg-light"><a href="/comparison-note/" class="navbar-brand">对比学习笔记</a><button aria-controls="basic-navbar-nav" type="button" aria-label="Toggle navigation" class="navbar-toggler collapsed"><span class="navbar-toggler-icon"></span></button><div class="navbar-collapse collapse" id="basic-navbar-nav"><div class="mr-auto navbar-nav"><a href="/comparison-note/algorithm" data-rb-event-key="/algorithm" class="nav-link">数据结构和算法</a><a href="/comparison-note/basic-concept" data-rb-event-key="/basic-concept" class="nav-link">基础概念</a><a href="/comparison-note/data-type" data-rb-event-key="/data-type" class="nav-link">数据类型</a><a href="/comparison-note/special" data-rb-event-key="/special" class="nav-link">专题</a></div></div></nav><div style="padding-top:12px;padding-bottom:12px" class="container-fluid"><h1>2.两数之和</h1><div style="margin-bottom:12px"><div class="markdown-body"></div></div><div style="margin-bottom:12px" class="justify-content-md-center row"><div class="col-md-auto"><div role="toolbar" class="btn-toolbar"><div role="group" class="btn-group btn-group-sm btn-group-toggle"><label class="btn btn-secondary"><input type="checkbox" value="go" autoComplete="off"/>go</label></div></div></div></div><div class="card-group"></div></div><div style="text-align:center;padding:12px 0;font-size:14px">v<!-- -->0.1.0<!-- --> <a href="https://github.com/fishjar/comparison-note" title="访问github源码">github</a></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"nav":{"name":"2. 两数相加","fullPath":"/algorithm/leetcode/2. 两数相加","asPath":"/algorithm/leetcode/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0","id":"%2Falgorithm%2Fleetcode%2F2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0","parent":{"name":"leetcode","fullPath":"/algorithm/leetcode","asPath":"/algorithm/leetcode","id":"%2Falgorithm%2Fleetcode","readme":{"title":"力扣","fullPath":"/algorithm/leetcode/README.md"}},"readme":{"title":"2.两数之和","fullPath":"/algorithm/leetcode/2. 两数相加/README.md"},"cards":[{"name":"go.md","baseName":"go","extName":".md","fullPath":"/algorithm/leetcode/2. 两数相加/go.md"}],"nodes":[]},"content":"","cards":[{"name":"go.md","baseName":"go","extName":".md","fullPath":"/algorithm/leetcode/2. 两数相加/go.md","content":"```go\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    l := new(ListNode)  // 创建一个链表\n    c := l              // 当前指针\n    x := 0\n    for l1 != nil || l2 != nil || x != 0 {\n        if l1 != nil {\n            x += l1.Val\n            l1 = l1.Next\n        }\n        if l2 != nil {\n            x += l2.Val\n            l2 = l2.Next\n        }\n        c.Next = new(ListNode)  // 添加一个节点\n        c = c.Next              // 移动当前指针\n        c.Val =  x % 10         // 改变当前的值\n        x = x / 10              // 计算进制数\n    }\n    return l.Next\n}\n```\n\n```go\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    l := new(ListNode)\n    c := l\n    x := 0\n    for l1 != nil || l2 != nil || x != 0 {\n        c.Next = new(ListNode)\n        c = c.Next\n        if l1 != nil \u0026\u0026 l2 != nil {\n            x = x + l1.Val + l2.Val\n            l1 = l1.Next\n            l2 = l2.Next\n        } else if l1 != nil {\n            x += l1.Val\n            if x \u003c 10 \u0026\u0026 l1.Next != nil {\n                c.Next = l1.Next\n                l1 = nil\n            } else {\n                l1 = l1.Next\n            }\n        } else if l2 != nil {\n            x += l2.Val\n            if x \u003c 10 \u0026\u0026 l2.Next != nil {\n                c.Next = l2.Next\n                l2 = nil\n            } else {\n                l2 = l2.Next\n            }\n        }\n        c.Val =  x % 10\n        x = x / 10\n    }\n    return l.Next\n}\n```\n\n```go\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    l := l1\n    c := l1\n    x := 0\n    for l1 != nil || l2 != nil || x != 0 {\n        if l1 != nil {\n            x += l1.Val\n            l1 = l1.Next\n        }\n        if l2 != nil {\n            x += l2.Val\n            l2 = l2.Next\n        }\n        c.Val =  x % 10\n        x = x / 10\n\n        if l1 != nil {\n            c.Next = l1\n            c = c.Next\n        } else if l2 != nil {\n            c.Next = l2\n            c = c.Next\n        } else if x \u003e 0 {\n            c.Next = new(ListNode)\n            c = c.Next\n        }\n    }\n    return l\n}\n```\n\n```go\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    l := l1\n    c := l1\n    x := 0\n    for l1 != nil || l2 != nil || x != 0 {\n        if l1 != nil {\n            x += l1.Val\n            l1 = l1.Next\n        }\n        if l2 != nil {\n            x += l2.Val\n            l2 = l2.Next\n        }\n        c.Val =  x % 10\n        x = x / 10\n\n        if l1 != nil {\n            c = c.Next\n            if l2 == nil \u0026\u0026 x == 0 {\n                l1 = nil\n            }\n        } else if l2 != nil {\n            c.Next = l2\n            c = c.Next\n            if x == 0 {\n                l2 = nil\n            }\n        } else if x \u003e 0 {\n            c.Next = new(ListNode)\n            c = c.Next\n        }\n    }\n    return l\n}\n```\n"}]}},"page":"/[...param]","query":{"param":["algorithm","leetcode","2. 两数相加"]},"buildId":"S-jJrz2DKYE9I2Mqo2Xou","assetPrefix":"/comparison-note","nextExport":true,"isFallback":false,"gip":true,"head":[["meta",{"name":"viewport","content":"width=device-width"}],["meta",{"charSet":"utf-8"}],["title",{"children":"2.两数之和"}]]}</script><script nomodule="" src="/comparison-note/_next/static/chunks/polyfills-7258ef49cf482e03ae9c.js"></script><script src="/comparison-note/_next/static/chunks/main-14614ae8e939b9e5961e.js" async=""></script><script src="/comparison-note/_next/static/chunks/webpack-e067438c4cf4ef2ef178.js" async=""></script><script src="/comparison-note/_next/static/chunks/framework.c7b20b4e446c7cca89e7.js" async=""></script><script src="/comparison-note/_next/static/chunks/7945cc82.ff5578978733a40a67a3.js" async=""></script><script src="/comparison-note/_next/static/chunks/commons.a32a113e095d8f0b1079.js" async=""></script><script src="/comparison-note/_next/static/chunks/pages/_app-1832d2b05f1f19d6a06d.js" async=""></script><script src="/comparison-note/_next/static/chunks/a1bc03cf.64f9f8493143216945e6.js" async=""></script><script src="/comparison-note/_next/static/chunks/4d6c67b811e74d3ca6630b1db854b02fef4ff3ce.8a4303f940dd12850a8f.js" async=""></script><script src="/comparison-note/_next/static/chunks/pages/%5B...param%5D-ec17b069b047a5ce78c3.js" async=""></script><script src="/comparison-note/_next/static/S-jJrz2DKYE9I2Mqo2Xou/_buildManifest.js" async=""></script><script src="/comparison-note/_next/static/S-jJrz2DKYE9I2Mqo2Xou/_ssgManifest.js" async=""></script></body></html>